{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "811dae93",
   "metadata": {},
   "source": [
    "Building on content in our google docs,\n",
    "\n",
    "### Key assumptions:\n",
    "\n",
    "1. Clinic operates 8hours a day. 24 patients scheduled per day.\n",
    "\n",
    "2. Assumed mean of simulated exponential service time = 20mins.\n",
    "\n",
    "3. cost parameters (lect slides, existing literature review):\n",
    "\n",
    "- total cost DOES NOT include labour cost of doctors (if do comparison on number of servers)\n",
    "\n",
    "- unit waiting cost, C_w = 0.1\n",
    "\n",
    "- doctor's overtime cost, C_o = 1 \n",
    "\n",
    "- doctor's idle cost, C_i = 1 \n",
    "\n",
    "### Additional info:\n",
    "1. Set seed, to replicate simulation results.\n",
    "\n",
    "2. Each day of appointments represent one dataset (consisting of k/2=12 sets of uniform random numbers each for service time and interarrival time). Generate for 1000 days in each scenario.\n",
    "\n",
    "3. Scenarios:\n",
    "number of servers:1,2\n",
    "\n",
    "4. Simulation:\n",
    "Inverse transformation technique + use of antithetic variables (different set of uniform random numbers for service time & interarrival time, ensure independence)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "603b71ac",
   "metadata": {},
   "source": [
    "### Draft 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "770485c0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SINGLE DAY SIMULATION DEMO\n",
      "======================================================================\n",
      "Configuration: 1 Server, 20-min Interarrival, 20-min Mean Service Time\n",
      "Seed: 42 (for reproducibility)\n",
      "======================================================================\n",
      "\n",
      "COMPACT PATIENT SCHEDULE TABLE (All 24 Patients)\n",
      "----------------------------------------------------------------------\n",
      "Cust Arrival  Start Service    End  Wait\n",
      "   1     0.6    0.6    35.7   36.4   0.0\n",
      "   2    34.6   36.4     4.8   41.1   1.8\n",
      "   3    47.3   47.3     4.0   51.3   0.0\n",
      "   4    64.5   64.5     4.0   68.5   0.0\n",
      "   5    76.8   76.8     7.3   84.1   0.0\n",
      "   6    96.8   96.8    14.9  111.7   0.0\n",
      "   7   114.2  114.2    11.3  125.5   0.0\n",
      "   8   151.0  151.0     6.9  157.9   0.0\n",
      "   9   164.5  164.5    18.9  183.5   0.0\n",
      "  10   186.8  186.8     3.0  189.8   0.0\n",
      "  11   192.5  192.5     6.9  199.4   0.0\n",
      "  12   235.8  235.8     9.1  244.9   0.0\n",
      "  13   245.0  245.0     3.7  248.7   0.0\n",
      "  14   253.8  253.8    31.0  284.8   0.0\n",
      "  15   279.0  284.8    34.1  318.9   5.9\n",
      "  16   301.1  318.9    33.9  352.9  17.9\n",
      "  17   330.3  352.9    23.8  376.6  22.5\n",
      "  18   350.3  376.6    12.9  389.6  26.3\n",
      "  19   374.1  389.6    16.8  406.3  15.4\n",
      "  20   376.3  406.3    24.7  431.0  30.0\n",
      "  21   401.0  431.0     9.8  440.8  30.0\n",
      "  22   419.4  440.8    39.4  480.2  21.5\n",
      "  23   456.5  480.2    24.6  504.8  23.7\n",
      "  24   453.0  504.8    20.1  524.9  51.8\n",
      "\n",
      "======================================================================\n",
      "PERFORMANCE SUMMARY FOR THIS DAY\n",
      "----------------------------------------------------------------------\n",
      "Total Waiting Time: 246.9 minutes\n",
      "Average Waiting Time: 10.3 minutes\n",
      "Doctor Idle Time: 123.3 minutes\n",
      "Doctor Overtime: 44.9 minutes\n",
      "Last Service Ends at: 524.9 minutes\n",
      "Total Cost: $192.92\n",
      "\n",
      "\n",
      "MULTIPLE SCENARIOS COMPARISON\n",
      "======================================================================\n",
      "Testing different interarrival times (1 server, 20-min service mean)\n",
      "======================================================================\n",
      "\n",
      "COMPARISON OF DIFFERENT INTERARRIVAL TIMES\n",
      "(Averages over 100 days)\n",
      "--------------------------------------------------\n",
      " Interarrival Avg Cost Avg Wait\n",
      "           15  $240.21 72.4 min\n",
      "           20  $235.42 39.7 min\n",
      "           25  $349.04 21.2 min\n",
      "           30  $527.19 11.9 min\n",
      "\n",
      "======================================================================\n",
      "ADDITIONAL ANALYSIS\n",
      "======================================================================\n",
      "Maximum waiting time: 51.8 minutes\n",
      "Patients who waited: 11/24 (45.8%)\n",
      "Average service time: 16.7 minutes\n",
      "Doctor utilization: 76.5%\n",
      "\n",
      "FIRST 5 PATIENTS DETAIL:\n",
      "------------------------------------------------------------\n",
      " Cust  Arrival  Start  Service   End  Wait\n",
      "    1     0.63   0.63    35.73 36.36  0.00\n",
      "    2    34.56  36.36     4.77 41.13  1.79\n",
      "    3    47.32  47.32     4.01 51.33  0.00\n",
      "    4    64.48  64.48     4.05 68.53  0.00\n",
      "    5    76.84  76.84     7.26 84.10  0.00\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "class ClinicSimulation:\n",
    "    def __init__(self, num_servers=1, scheduled_interarrival=20, planning_horizon=480, \n",
    "                 patients_per_day=24, queue_capacity=20, cost_params=None,\n",
    "                 service_time_mean=20, base_seed=42):\n",
    "        self.num_servers = num_servers\n",
    "        self.scheduled_interarrival = scheduled_interarrival\n",
    "        self.planning_horizon = planning_horizon\n",
    "        self.patients_per_day = patients_per_day\n",
    "        self.queue_capacity = queue_capacity\n",
    "        self.base_seed = base_seed\n",
    "        \n",
    "        self.cost_params = cost_params or {'C_w': 0.1, 'C_i': 1, 'C_o': 1}\n",
    "        self.triangular_min = -10\n",
    "        self.triangular_mode = 0\n",
    "        self.triangular_max = 20\n",
    "        self.service_time_mean = service_time_mean\n",
    "    \n",
    "    def generate_interarrival_time(self, U):\n",
    "        F_mode = (self.triangular_mode - self.triangular_min) / (self.triangular_max - self.triangular_min)\n",
    "        triangular_component = np.where(\n",
    "            U <= F_mode,\n",
    "            self.triangular_min + np.sqrt(U * (self.triangular_max - self.triangular_min) * (self.triangular_mode - self.triangular_min)),\n",
    "            self.triangular_max - np.sqrt((1 - U) * (self.triangular_max - self.triangular_min) * (self.triangular_max - self.triangular_mode))\n",
    "        )\n",
    "        return self.scheduled_interarrival + triangular_component\n",
    "    \n",
    "    def generate_service_time(self, U):\n",
    "        return -np.log(1 - U) * self.service_time_mean\n",
    "    \n",
    "    def simulate_single_day(self, use_antithetic=False, day_seed=None):\n",
    "        if day_seed is not None:\n",
    "            np.random.seed(day_seed)\n",
    "        else:\n",
    "            np.random.seed(self.base_seed)\n",
    "        \n",
    "        n_patients = self.patients_per_day\n",
    "        \n",
    "        if use_antithetic:\n",
    "            half_n = n_patients // 2\n",
    "            U_interarrival = np.random.uniform(0, 1, half_n)\n",
    "            U_service = np.random.uniform(0, 1, half_n)\n",
    "            \n",
    "            interarrival_times1 = np.array([self.generate_interarrival_time(u) for u in U_interarrival])\n",
    "            interarrival_times2 = np.array([self.generate_interarrival_time(1-u) for u in U_interarrival])\n",
    "            service_times1 = np.array([self.generate_service_time(u) for u in U_service])\n",
    "            service_times2 = np.array([self.generate_service_time(1-u) for u in U_service])\n",
    "            \n",
    "            interarrival_times = np.concatenate([interarrival_times1, interarrival_times2])\n",
    "            service_times = np.concatenate([service_times1, service_times2])\n",
    "        else:\n",
    "            U_interarrival = np.random.uniform(0, 1, n_patients)\n",
    "            U_service = np.random.uniform(0, 1, n_patients)\n",
    "            interarrival_times = np.array([self.generate_interarrival_time(u) for u in U_interarrival])\n",
    "            service_times = np.array([self.generate_service_time(u) for u in U_service])\n",
    "        \n",
    "        scheduled_arrivals = np.arange(0, n_patients * self.scheduled_interarrival, self.scheduled_interarrival)\n",
    "        actual_arrival_times = scheduled_arrivals + (interarrival_times - self.scheduled_interarrival)\n",
    "        \n",
    "        service_start_times = np.zeros(n_patients)\n",
    "        service_end_times = np.zeros(n_patients)\n",
    "        waiting_times = np.zeros(n_patients)\n",
    "        \n",
    "        if self.num_servers == 1:\n",
    "            for i in range(n_patients):\n",
    "                if i == 0:\n",
    "                    service_start_times[i] = max(0, actual_arrival_times[i])\n",
    "                else:\n",
    "                    service_start_times[i] = max(actual_arrival_times[i], service_end_times[i-1])\n",
    "                service_end_times[i] = service_start_times[i] + service_times[i]\n",
    "                waiting_times[i] = max(0, service_start_times[i] - actual_arrival_times[i])\n",
    "        \n",
    "        results_df = pd.DataFrame({\n",
    "            'Cust': range(1, n_patients + 1),\n",
    "            'Arrival': actual_arrival_times,\n",
    "            'Start': service_start_times,\n",
    "            'Service': service_times,\n",
    "            'End': service_end_times,\n",
    "            'Wait': waiting_times\n",
    "        })\n",
    "        \n",
    "        return results_df\n",
    "    \n",
    "    def calculate_performance_metrics(self, results_df):\n",
    "        last_service_end = results_df['End'].max()\n",
    "        overtime = max(0, last_service_end - self.planning_horizon)\n",
    "        \n",
    "        idle_time = 0\n",
    "        for i in range(1, len(results_df)):\n",
    "            idle_gap = results_df.loc[i, 'Start'] - results_df.loc[i-1, 'End']\n",
    "            idle_time += max(0, idle_gap)\n",
    "        idle_time += max(0, results_df.loc[0, 'Start'] - 0)\n",
    "        \n",
    "        total_waiting_time = results_df['Wait'].sum()\n",
    "        total_cost = (total_waiting_time * self.cost_params['C_w'] + \n",
    "                     idle_time * self.cost_params['C_i'] + \n",
    "                     overtime * self.cost_params['C_o'])\n",
    "        \n",
    "        return {\n",
    "            'total_waiting_time': total_waiting_time,\n",
    "            'idle_time': idle_time,\n",
    "            'overtime': overtime,\n",
    "            'total_cost': total_cost,\n",
    "            'last_service_end': last_service_end,\n",
    "            'avg_waiting_time': total_waiting_time / len(results_df)\n",
    "        }\n",
    "\n",
    "def run_single_day_demo():\n",
    "    \"\"\"Run a single day demo with compact table output\"\"\"\n",
    "    print(\"SINGLE DAY SIMULATION DEMO\")\n",
    "    print(\"=\" * 70)\n",
    "    print(\"Configuration: 1 Server, 20-min Interarrival, 20-min Mean Service Time\")\n",
    "    print(\"Seed: 42 (for reproducibility)\")\n",
    "    print(\"=\" * 70)\n",
    "    \n",
    "    sim = ClinicSimulation(\n",
    "        num_servers=1,\n",
    "        scheduled_interarrival=20,\n",
    "        service_time_mean=20,\n",
    "        base_seed=42\n",
    "    )\n",
    "    \n",
    "    # Simulate one day\n",
    "    results_df = sim.simulate_single_day(use_antithetic=True, day_seed=42)\n",
    "    metrics = sim.calculate_performance_metrics(results_df)\n",
    "    \n",
    "    # Create compact table\n",
    "    compact_df = results_df.round(2)\n",
    "    \n",
    "    # Display the compact table\n",
    "    print(\"\\nCOMPACT PATIENT SCHEDULE TABLE (All 24 Patients)\")\n",
    "    print(\"-\" * 70)\n",
    "    \n",
    "    # Format for better display\n",
    "    pd.set_option('display.width', 120)\n",
    "    pd.set_option('display.max_columns', 6)\n",
    "    \n",
    "    print(compact_df.to_string(index=False, formatters={\n",
    "        'Cust': '{:>2}'.format,\n",
    "        'Arrival': '{:>6.1f}'.format,\n",
    "        'Start': '{:>6.1f}'.format,\n",
    "        'Service': '{:>6.1f}'.format,\n",
    "        'End': '{:>6.1f}'.format,\n",
    "        'Wait': '{:>5.1f}'.format\n",
    "    }))\n",
    "    \n",
    "    # Performance summary\n",
    "    print(\"\\n\" + \"=\" * 70)\n",
    "    print(\"PERFORMANCE SUMMARY FOR THIS DAY\")\n",
    "    print(\"-\" * 70)\n",
    "    print(f\"Total Waiting Time: {metrics['total_waiting_time']:.1f} minutes\")\n",
    "    print(f\"Average Waiting Time: {metrics['avg_waiting_time']:.1f} minutes\")\n",
    "    print(f\"Doctor Idle Time: {metrics['idle_time']:.1f} minutes\")\n",
    "    print(f\"Doctor Overtime: {metrics['overtime']:.1f} minutes\")\n",
    "    print(f\"Last Service Ends at: {metrics['last_service_end']:.1f} minutes\")\n",
    "    print(f\"Total Cost: ${metrics['total_cost']:.2f}\")\n",
    "    \n",
    "    return results_df, metrics\n",
    "\n",
    "def run_multiple_scenarios_demo():\n",
    "    \"\"\"Run multiple scenarios and show compact summary\"\"\"\n",
    "    print(\"\\n\\nMULTIPLE SCENARIOS COMPARISON\")\n",
    "    print(\"=\" * 70)\n",
    "    print(\"Testing different interarrival times (1 server, 20-min service mean)\")\n",
    "    print(\"=\" * 70)\n",
    "    \n",
    "    scenarios = [15, 20, 25, 30]\n",
    "    results = []\n",
    "    \n",
    "    for interarrival in scenarios:\n",
    "        sim = ClinicSimulation(\n",
    "            num_servers=1,\n",
    "            scheduled_interarrival=interarrival,\n",
    "            service_time_mean=20,\n",
    "            base_seed=42\n",
    "        )\n",
    "        \n",
    "        # Run 100 days for each scenario\n",
    "        total_cost = 0\n",
    "        total_wait = 0\n",
    "        for day in range(100):\n",
    "            day_results = sim.simulate_single_day(use_antithetic=True, day_seed=42+day)\n",
    "            metrics = sim.calculate_performance_metrics(day_results)\n",
    "            total_cost += metrics['total_cost']\n",
    "            total_wait += metrics['avg_waiting_time']\n",
    "        \n",
    "        avg_cost = total_cost / 100\n",
    "        avg_wait = total_wait / 100\n",
    "        \n",
    "        results.append({\n",
    "            'Interarrival': interarrival,\n",
    "            'Avg Cost': f\"${avg_cost:.2f}\",\n",
    "            'Avg Wait': f\"{avg_wait:.1f} min\"\n",
    "        })\n",
    "    \n",
    "    # Display compact comparison table\n",
    "    comparison_df = pd.DataFrame(results)\n",
    "    print(\"\\nCOMPARISON OF DIFFERENT INTERARRIVAL TIMES\")\n",
    "    print(\"(Averages over 100 days)\")\n",
    "    print(\"-\" * 50)\n",
    "    print(comparison_df.to_string(index=False))\n",
    "    \n",
    "    return results\n",
    "\n",
    "# Run the demos\n",
    "if __name__ == \"__main__\":\n",
    "    # Single day detailed table\n",
    "    day_results, day_metrics = run_single_day_demo()\n",
    "    \n",
    "    # Multiple scenarios comparison\n",
    "    scenario_results = run_multiple_scenarios_demo()\n",
    "    \n",
    "    # Additional analysis\n",
    "    print(\"\\n\" + \"=\" * 70)\n",
    "    print(\"ADDITIONAL ANALYSIS\")\n",
    "    print(\"=\" * 70)\n",
    "    \n",
    "    # Calculate some statistics from the single day\n",
    "    max_wait = day_results['Wait'].max()\n",
    "    patients_with_wait = (day_results['Wait'] > 0).sum()\n",
    "    avg_service_time = day_results['Service'].mean()\n",
    "    \n",
    "    print(f\"Maximum waiting time: {max_wait:.1f} minutes\")\n",
    "    print(f\"Patients who waited: {patients_with_wait}/24 ({patients_with_wait/24*100:.1f}%)\")\n",
    "    print(f\"Average service time: {avg_service_time:.1f} minutes\")\n",
    "    print(f\"Doctor utilization: {day_results['Service'].sum()/day_metrics['last_service_end']*100:.1f}%\")\n",
    "    \n",
    "    # Show first few patients in more detail\n",
    "    print(f\"\\nFIRST 5 PATIENTS DETAIL:\")\n",
    "    print(\"-\" * 60)\n",
    "    detailed_cols = ['Cust', 'Arrival', 'Start', 'Service', 'End', 'Wait']\n",
    "    print(day_results[detailed_cols].head().round(2).to_string(index=False))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9732c0d9",
   "metadata": {},
   "source": [
    "### Draft2\n",
    "\n",
    "one sample table + analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ff80a7e1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CLINIC APPOINTMENT SYSTEM SIMULATION\n",
      "======================================================================\n",
      "\n",
      "1. SAMPLE DAY - COMPACT PATIENT TABLE\n",
      "======================================================================\n",
      "Configuration: 1 Server, 20-min Interarrival, 20-min Mean Service Time\n",
      "Seed: 42\n",
      "----------------------------------------------------------------------\n",
      "\n",
      "COMPACT PATIENT SCHEDULE TABLE (All 24 Patients)\n",
      "----------------------------------------------------------------------\n",
      "Cust Arrival  Start Service    End  Wait Server\n",
      "   1     0.6    0.6    35.7   36.4   0.0      0\n",
      "   2    34.6   36.4     4.8   41.1   1.8      0\n",
      "   3    47.3   47.3     4.0   51.3   0.0      0\n",
      "   4    64.5   64.5     4.0   68.5   0.0      0\n",
      "   5    76.8   76.8     7.3   84.1   0.0      0\n",
      "   6    96.8   96.8    14.9  111.7   0.0      0\n",
      "   7   114.2  114.2    11.3  125.5   0.0      0\n",
      "   8   151.0  151.0     6.9  157.9   0.0      0\n",
      "   9   164.5  164.5    18.9  183.5   0.0      0\n",
      "  10   186.8  186.8     3.0  189.8   0.0      0\n",
      "  11   192.5  192.5     6.9  199.4   0.0      0\n",
      "  12   235.8  235.8     9.1  244.9   0.0      0\n",
      "  13   245.0  245.0     3.7  248.7   0.0      0\n",
      "  14   253.8  253.8    31.0  284.8   0.0      0\n",
      "  15   279.0  284.8    34.1  318.9   5.9      0\n",
      "  16   301.1  318.9    33.9  352.9  17.9      0\n",
      "  17   330.3  352.9    23.8  376.6  22.5      0\n",
      "  18   350.3  376.6    12.9  389.6  26.3      0\n",
      "  19   374.1  389.6    16.8  406.3  15.4      0\n",
      "  20   376.3  406.3    24.7  431.0  30.0      0\n",
      "  21   401.0  431.0     9.8  440.8  30.0      0\n",
      "  22   419.4  440.8    39.4  480.2  21.5      0\n",
      "  23   456.5  480.2    24.6  504.8  23.7      0\n",
      "  24   453.0  504.8    20.1  524.9  51.8      0\n",
      "\n",
      "----------------------------------------------------------------------\n",
      "PERFORMANCE SUMMARY FOR SAMPLE DAY\n",
      "Total Waiting Time: 246.9 min\n",
      "Average Waiting Time: 10.3 min\n",
      "Doctor Idle Time: 123.3 min\n",
      "Doctor Overtime: 44.9 min\n",
      "Last Service Ends: 524.9 min\n",
      "Total Cost: $192.92\n",
      "\n",
      "\n",
      "2. COMPREHENSIVE EXPERIMENT RESULTS\n",
      "======================================================================\n",
      "Running simulation for 1000 days per scenario...\n",
      "Simulating 1000 days: 1 server(s), 10 min interarrival...\n",
      "Simulating 1000 days: 1 server(s), 15 min interarrival...\n",
      "Simulating 1000 days: 1 server(s), 20 min interarrival...\n",
      "Simulating 1000 days: 1 server(s), 25 min interarrival...\n",
      "Simulating 1000 days: 1 server(s), 30 min interarrival...\n",
      "Simulating 1000 days: 2 server(s), 10 min interarrival...\n",
      "Simulating 1000 days: 2 server(s), 15 min interarrival...\n",
      "Simulating 1000 days: 2 server(s), 20 min interarrival...\n",
      "Simulating 1000 days: 2 server(s), 25 min interarrival...\n",
      "Simulating 1000 days: 2 server(s), 30 min interarrival...\n",
      "\n",
      "SUMMARY RESULTS (Average over 1000 days)\n",
      "======================================================================\n",
      "\n",
      "1 SERVER(S) CONFIGURATION:\n",
      "------------------------------------------------------------\n",
      " scheduled_interarrival  avg_total_cost  std_total_cost  avg_waiting_time  avg_idle_time  avg_overtime  avg_utilization\n",
      "                     10         330.613         129.838           121.051         10.654        29.437            0.979\n",
      "                     15         238.841         125.905            73.789         24.042        37.705            0.953\n",
      "                     20         227.467         106.950            39.894         65.122        66.600            0.881\n",
      "                     25         344.611          73.787            21.391        146.162       147.111            0.767\n",
      "                     30         526.215          59.427            12.404        247.748       248.697            0.660\n",
      "\n",
      "OPTIMAL CONFIGURATION:\n",
      "Interarrival time: 20.0 minutes\n",
      "Average total cost: $227.47\n",
      "Average waiting time: 39.89 minutes\n",
      "Average overtime: 66.60 minutes\n",
      "Utilization: 88.1%\n",
      "\n",
      "2 SERVER(S) CONFIGURATION:\n",
      "------------------------------------------------------------\n",
      " scheduled_interarrival  avg_total_cost  std_total_cost  avg_waiting_time  avg_idle_time  avg_overtime  avg_utilization\n",
      "                     10         122.829          35.983            16.866         82.258         0.092            0.826\n",
      "                     15         271.881          45.986             4.419        261.000         0.276            0.630\n",
      "                     20         493.252          60.837             1.448        475.606        14.172            0.490\n",
      "                     25         821.480          65.964             0.569        696.863       123.250            0.399\n",
      "                     30        1157.433          67.401             0.267        919.940       236.853            0.336\n",
      "\n",
      "OPTIMAL CONFIGURATION:\n",
      "Interarrival time: 10.0 minutes\n",
      "Average total cost: $122.83\n",
      "Average waiting time: 16.87 minutes\n",
      "Average overtime: 0.09 minutes\n",
      "Utilization: 82.6%\n",
      "\n",
      "\n",
      "3. PERFORMANCE METRICS TABLE\n",
      "======================================================================\n",
      "First 10 Days - 1 Server(s), 20-min Interarrival\n",
      "--------------------------------------------------------------------------------\n",
      " Day  Total Wait  Idle Time  Overtime  Total Cost  Avg Wait\n",
      "   1      246.91     123.31     44.92      192.92     10.29\n",
      "   2     2025.90      71.50    118.44      392.52     84.41\n",
      "   3     1523.61      41.93     48.11      242.39     63.48\n",
      "   4     1312.12      33.60     37.36      202.17     54.67\n",
      "   5      349.61     108.72     95.07      238.76     14.57\n",
      "   6      721.85      67.45    126.09      265.72     30.08\n",
      "   7      278.65     162.36    120.50      310.73     11.61\n",
      "   8      748.00       9.24      5.80       89.85     31.17\n",
      "   9     1425.88      15.13      0.96      158.68     59.41\n",
      "  10      666.98     104.37     50.87      221.94     27.79\n",
      "\n",
      "\n",
      "4. PERFORMANCE GRAPHS\n",
      "======================================================================\n"
     ]
    },
    {
     "data": {
      "image/png": "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19T0QGoVcgjee75HMEP3R6CMcJcHbbJNfc4kdlnj+9KISEsxs9uANe7+92jnEqZIUWYNsJO7z492Pu2JmR0FnOrum/RmUkREJFos2H3sWyB5g34fIiKhUAFDRFqMmV0BHOnu+0c7FxEREQlfZLnqOwRLV54Gatz92KgmJSIxq77OuCIizWJmiwmaPR0b3UxERESkBZ1H0IurmmAb1zqXpoqIhEEzMERERERERESkzVPTExERERERERFp82J2CUlmZqYPHjw49LhVVVUkJMTe0xar44LYHVusjgs0tvYoVscFsTu2lhrXjBkzst29Z+iBo0DvJTZdrI4tVscFsTu2WB0XaGztUayOC1r//URsPovA4MGDmT59euhxs7OzyczMDD1utMXquCB2xxar4wKNrT2K1XFB7I6tpcZlZj+GHjRK9F5i08Xq2GJ1XBC7Y4vVcYHG1h7F6rig9d9PaAmJiIiIiIiIiLR5KmCIiIiIiIiISJunAoaIiIiIiIiItHkx2wOjLpWVlSxbtoyysrImx6iurmbt2rUhZtU2hDmulJQUsrKySExMDCWeiIiIiIhIawnjvLG2WD2HhOaPbVPPHTtUAWPZsmWkp6czePBgzKxJMSorK2PyxDyscbk7OTk5LFu2jCFDhoSQmYiIiIiISOsJ47yxtlg9h4Tmja0p544daglJWVkZPXr0COWPUOpmZvTo0SO0aqWIiIiIiEhr0nlj62jKuWOHKmAA+iNsBXqORURERESkPdM5TevY1Oe5wxUwRERERERERKT96VA9MDZFcXkVj3y8gOem/Mi6kkq6pSZyyu6DOGv3gWTE6PolERERERERaZyRf36f7KKKeq/P7JzE9OsPasWMYp9mYNShuLyK4x76lEc+WkhuSSUO5JZU8shHCznx0c8pLq9qcuyzzjqLXr16se2229Z7m7lz57LvvvsyYsQIttpqK84999wmP15TuTv7778/BQUF9d5mzJgxzJ8/vxWzEhERERERaRsaKl405vqG6Lyxbipg1OGRjxfwY04J5VU1PzteXlXDktxSHvl4QZNjn3HGGUycOLHB21x66aVcfvnlzJw5kzlz5nDJJZc0On51dXWTc4PgD7CmpoZ3332XHXbYgS5dutR72wsuuIA77rijWY8nIiIiIiIiP9dezhvfe++9Vj1v7LBLSAZf806T7ldeVcN9H/zAfR/8UOf1i28/osH777PPPixevLjB26xcuZKsrKyfLm+33XZA8Ed2zTXXMHnyZMrLy7nooos477zzmDx5MjfffDN9+/Zl5syZHHXUUQwaNIgLL7wQgJtuuon09HSuvPJK7rzzTl555RXKy8s57rjjuPnmm1m8eDGHHnoo+++/P1OmTGH8+PE8//zzP1XwiouLGT16NMuWLaO6upobbriB3/zmN+y9996cccYZVFVVkZDQYf+UREREGqQpxiIi7VdTzxs3dv/2et542GGHsd9++/103vjiiy9y/vnnA61z3qgZGG3Q5Zdfzv77789hhx3GPffcQ15eHgCPP/44Xbt2Zdq0aUybNo3HHnuMRYsWAfDFF19w6623Mnv2bMaMGcPLL7/8U7xXXnmFE088kUmTJjF//ny++OILZs6cyYwZM/j4448BmDdvHqeddhpfffUVgwYN4tNPP2XnnXcGYOLEifTr149Zs2bx7bffcuihhwIQFxfH8OHDmTVrVis+OyIiIu1LS04xFhGRjisa541z58792XnjlClTWvW8scN+bN5QxWunWyaRW1JZ7/Xd05L48oaW+6TkzDPP5JBDDmHixIlMmDCBRx55hFmzZjFp0iS+/vprxo0bB0B+fj7z588nKSmJXXbZhSFDhgCw4447smbNGlasWMHatWvp1q0bAwcO5L777mPSpEnsuOOOABQVFTF//nwGDhzIoEGD2G233X7KITc3l/T0dCCo5F111VVcffXVHHnkkey9994/3a5Xr16sWLHipz9aERERERGRWNHQeWNjZmcsvv0IKisrSWyBjSA64nmjZmDU4ZTdB5GcUPdTk5wQxym7DWzxHPr168dZZ53FhAkTSEhI4Ntvv8Xduf/++5k5cyYzZ85k0aJFHHzwwQCkpaX97P4nnHAC48aN4+WXX2bMmDFAsE7p2muv/en+P/zwA2PHjgUgNTX1Z/dPSEigpiboAbL55pszY8YMtttuO6699lpuueWWn25XVlZGp06dWux5EBERqYuZPWFma8zs21rH7jSz783sazN7w8wyal13rZn9YGZzzeyQqCQtIiISstY+b9zw/q193qgCRh3O22cYg3qk/qKIkZwQx8DunThvn2Et+vgTJ06ksjKYAbJq1SpycnLo378/hxxyCA8//PBP182bN4/i4uI6Y4wZM4aXXnqJcePGccIJJwBw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zJgxY4Lc3bn22mt/uv8PP/zA2LHBWFJTU392/4SEBGpqgu33Nt98c2bMmMF2223Htddeyy233PLT7crKyujUqVOTnw8REWmCihLInqfiRQxLjI/jgd/uxGa9OjNvdREXPf8lVdX1b4srIiKxpa2eN254/9Y+b1QBoy57XArdhvyyiJGQgmcMCa5vAndn7NixbLXVVlxxxRX13m7ixIlUVlYCsGrVKnJycujfvz+HHHIIDz/88E/XzZs3j+Li4jpjjBkzhpdeeolx48ZxwgknAHDIIYfwxBNPUFQU7KKyfPly1qypuzPuFltswcKFCwFYsWIFqampnHLKKVx11VV8+eWXP91u3rx5bLPNNpv4TIiISJOVFUDOfKip2vT7VpbA9CfgmWPo8diOwYzD/9zW5N21pGV17ZTIE2eMokdaEp/Mz+amt74jRlbSiohIA9rTeePmm2/equeNHXcJSUOSO8PZ/w52G5n2OJTmQKceMGos1btcQFxy5yaF/fTTT3n22WfZbrvtGDFiBAC33XYbhx9++M9uN2nSJC677DJSUoICyp133kmfPn04++yzWbx4MTvttBPuTs+ePRk/fnydj7XNNttQWFhI//79f2oAc/DBBzNnzhx23313ADp37sxzzz1HfHz8L+5/xBFHMHnyZIYPH84333zD73//e+Li4khMTOThhx8GYPXq1XTq1Omn+CIi0sJKcoPdRpqyTWplCYy/EApWQHUFBj9tEc7sN4PXvSa+vknLGdA9lUdP25mTHvuc56YuYWhmZ87aa0i00xIREYC0Xg1vlZrWq0lh29N542GHHdaq540Wq5X8kSNH+vTp0392bM6cOWy11VbNitvU9Utt3YbjWrlyJaeddhrvv/9+vfe555576NKly0/TiWoL47kOS3Z2NpmZmdFOI3SxOi7Q2NqjWB0XtKGxFa6CwpVNv//0J2DWS1Bd8cvrElJgz8tgv+uaHj/CzGa4+8hmB2oD6novEYam/E1NmLmcy16aSZzBY6eN5ICteoeeVxjazL+XkMXquCB2xxar4wKNrTWEfS4Tq+eQAEuWLGHs2LFNPm+Eup/v+t5PaAmJ1Klv376cc845FBTU39k+IyOD008/vRWzEhHpoPKWNq94ATB7Qt3FC4CqsmDGobRZx4zoz+UHbk6NwyUvfsXsFdp5RkREoq+1zxs7XAEjVmectITR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\n",
      "text/plain": [
       "<Figure size 1080x864 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "5. OPTIMAL CONFIGURATIONS RECOMMENDATION\n",
      "======================================================================\n",
      "BEST CONFIGURATIONS:\n",
      "--------------------------------------------------\n",
      "1 SERVER OPTIMAL:\n",
      "  Interarrival time: 20.0 minutes\n",
      "  Average daily cost: $227.47\n",
      "  Average waiting time: 39.89 minutes\n",
      "  Average overtime: 66.60 minutes\n",
      "\n",
      "2 SERVER OPTIMAL:\n",
      "  Interarrival time: 10.0 minutes\n",
      "  Average daily cost: $122.83\n",
      "  Average waiting time: 16.87 minutes\n",
      "  Average overtime: 0.09 minutes\n",
      "\n",
      "\n",
      "6. COST BREAKDOWN ANALYSIS\n",
      "======================================================================\n",
      "Cost Breakdown - 1 Server(s), 20-min Interarrival:\n",
      "  Waiting Cost: $95.75 (42.1%)\n",
      "  Idle Cost: $65.12 (28.6%)\n",
      "  Overtime Cost: $66.60 (29.3%)\n",
      "  Total Cost: $227.47\n",
      "Cost Breakdown - 2 Server(s), 15-min Interarrival:\n",
      "  Waiting Cost: $10.60 (3.9%)\n",
      "  Idle Cost: $261.00 (96.0%)\n",
      "  Overtime Cost: $0.28 (0.1%)\n",
      "  Total Cost: $271.88\n",
      "\n",
      "======================================================================\n",
      "SIMULATION COMPLETED SUCCESSFULLY!\n",
      "All results are reproducible with seed 42\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "class ClinicSimulation:\n",
    "    def __init__(self, num_servers=1, scheduled_interarrival=20, planning_horizon=480, \n",
    "                 patients_per_day=24, queue_capacity=20, cost_params=None,\n",
    "                 service_time_mean=20, base_seed=42):\n",
    "        self.num_servers = num_servers\n",
    "        self.scheduled_interarrival = scheduled_interarrival\n",
    "        self.planning_horizon = planning_horizon\n",
    "        self.patients_per_day = patients_per_day\n",
    "        self.queue_capacity = queue_capacity\n",
    "        self.base_seed = base_seed\n",
    "        \n",
    "        self.cost_params = cost_params or {'C_w': 0.1, 'C_i': 1, 'C_o': 1}\n",
    "        self.triangular_min = -10\n",
    "        self.triangular_mode = 0\n",
    "        self.triangular_max = 20\n",
    "        self.service_time_mean = service_time_mean\n",
    "    \n",
    "    def generate_interarrival_time(self, U):\n",
    "        F_mode = (self.triangular_mode - self.triangular_min) / (self.triangular_max - self.triangular_min)\n",
    "        triangular_component = np.where(\n",
    "            U <= F_mode,\n",
    "            self.triangular_min + np.sqrt(U * (self.triangular_max - self.triangular_min) * (self.triangular_mode - self.triangular_min)),\n",
    "            self.triangular_max - np.sqrt((1 - U) * (self.triangular_max - self.triangular_min) * (self.triangular_max - self.triangular_mode))\n",
    "        )\n",
    "        return self.scheduled_interarrival + triangular_component\n",
    "    \n",
    "    def generate_service_time(self, U):\n",
    "        return -np.log(1 - U) * self.service_time_mean\n",
    "    \n",
    "    def simulate_single_day(self, use_antithetic=False, day_seed=None):\n",
    "        if day_seed is not None:\n",
    "            np.random.seed(day_seed)\n",
    "        else:\n",
    "            np.random.seed(self.base_seed)\n",
    "        \n",
    "        n_patients = self.patients_per_day\n",
    "        \n",
    "        if use_antithetic:\n",
    "            half_n = n_patients // 2\n",
    "            U_interarrival = np.random.uniform(0, 1, half_n)\n",
    "            U_service = np.random.uniform(0, 1, half_n)\n",
    "            \n",
    "            interarrival_times1 = np.array([self.generate_interarrival_time(u) for u in U_interarrival])\n",
    "            interarrival_times2 = np.array([self.generate_interarrival_time(1-u) for u in U_interarrival])\n",
    "            service_times1 = np.array([self.generate_service_time(u) for u in U_service])\n",
    "            service_times2 = np.array([self.generate_service_time(1-u) for u in U_service])\n",
    "            \n",
    "            interarrival_times = np.concatenate([interarrival_times1, interarrival_times2])\n",
    "            service_times = np.concatenate([service_times1, service_times2])\n",
    "        else:\n",
    "            U_interarrival = np.random.uniform(0, 1, n_patients)\n",
    "            U_service = np.random.uniform(0, 1, n_patients)\n",
    "            interarrival_times = np.array([self.generate_interarrival_time(u) for u in U_interarrival])\n",
    "            service_times = np.array([self.generate_service_time(u) for u in U_service])\n",
    "        \n",
    "        scheduled_arrivals = np.arange(0, n_patients * self.scheduled_interarrival, self.scheduled_interarrival)\n",
    "        actual_arrival_times = scheduled_arrivals + (interarrival_times - self.scheduled_interarrival)\n",
    "        \n",
    "        service_start_times = np.zeros(n_patients)\n",
    "        service_end_times = np.zeros(n_patients)\n",
    "        waiting_times = np.zeros(n_patients)\n",
    "        server_assignment = np.zeros(n_patients, dtype=int)\n",
    "        \n",
    "        if self.num_servers == 1:\n",
    "            for i in range(n_patients):\n",
    "                if i == 0:\n",
    "                    service_start_times[i] = max(0, actual_arrival_times[i])\n",
    "                else:\n",
    "                    service_start_times[i] = max(actual_arrival_times[i], service_end_times[i-1])\n",
    "                service_end_times[i] = service_start_times[i] + service_times[i]\n",
    "                waiting_times[i] = max(0, service_start_times[i] - actual_arrival_times[i])\n",
    "                server_assignment[i] = 0\n",
    "        else:\n",
    "            server_end_times = [0] * self.num_servers\n",
    "            for i in range(n_patients):\n",
    "                next_available_time = min(server_end_times)\n",
    "                server_index = server_end_times.index(next_available_time)\n",
    "                service_start_times[i] = max(actual_arrival_times[i], next_available_time)\n",
    "                service_end_times[i] = service_start_times[i] + service_times[i]\n",
    "                waiting_times[i] = max(0, service_start_times[i] - actual_arrival_times[i])\n",
    "                server_assignment[i] = server_index\n",
    "                server_end_times[server_index] = service_end_times[i]\n",
    "        \n",
    "        results_df = pd.DataFrame({\n",
    "            'Cust': range(1, n_patients + 1),\n",
    "            'Arrival': actual_arrival_times,\n",
    "            'Start': service_start_times,\n",
    "            'Service': service_times,\n",
    "            'End': service_end_times,\n",
    "            'Wait': waiting_times,\n",
    "            'Server': server_assignment\n",
    "        })\n",
    "        \n",
    "        return results_df\n",
    "    \n",
    "    def calculate_performance_metrics(self, results_df):\n",
    "        last_service_end = results_df['End'].max()\n",
    "        overtime = max(0, last_service_end - self.planning_horizon)\n",
    "        \n",
    "        idle_time = 0\n",
    "        if self.num_servers == 1:\n",
    "            for i in range(1, len(results_df)):\n",
    "                idle_gap = results_df.loc[i, 'Start'] - results_df.loc[i-1, 'End']\n",
    "                idle_time += max(0, idle_gap)\n",
    "            idle_time += max(0, results_df.loc[0, 'Start'] - 0)\n",
    "        else:\n",
    "            server_last_end = {server: 0 for server in range(self.num_servers)}\n",
    "            for _, patient in results_df.iterrows():\n",
    "                server = patient['Server']\n",
    "                start_time = patient['Start']\n",
    "                idle_gap = start_time - server_last_end[server]\n",
    "                idle_time += max(0, idle_gap)\n",
    "                server_last_end[server] = patient['End']\n",
    "        \n",
    "        total_waiting_time = results_df['Wait'].sum()\n",
    "        total_cost = (total_waiting_time * self.cost_params['C_w'] + \n",
    "                     idle_time * self.cost_params['C_i'] + \n",
    "                     overtime * self.cost_params['C_o'])\n",
    "        \n",
    "        performance_metrics = {\n",
    "            'total_waiting_time': total_waiting_time,\n",
    "            'idle_time': idle_time,\n",
    "            'overtime': overtime,\n",
    "            'total_cost': total_cost,\n",
    "            'last_service_end': last_service_end,\n",
    "            'avg_waiting_time': total_waiting_time / len(results_df),\n",
    "            'utilization': (results_df['Service'].sum() / \n",
    "                          (self.num_servers * last_service_end)) if last_service_end > 0 else 0\n",
    "        }\n",
    "        \n",
    "        return performance_metrics\n",
    "\n",
    "def run_multiple_days_simulation(num_datasets=1000, num_servers=1, scheduled_interarrival=20, \n",
    "                               cost_params=None, use_antithetic=True, service_time_mean=20,\n",
    "                               base_seed=42):\n",
    "    \n",
    "    sim = ClinicSimulation(\n",
    "        num_servers=num_servers, \n",
    "        scheduled_interarrival=scheduled_interarrival,\n",
    "        cost_params=cost_params,\n",
    "        service_time_mean=service_time_mean,\n",
    "        base_seed=base_seed\n",
    "    )\n",
    "    \n",
    "    daily_results = []\n",
    "    daily_metrics = []\n",
    "    \n",
    "    for day in range(num_datasets):\n",
    "        day_seed = base_seed + day\n",
    "        day_results = sim.simulate_single_day(use_antithetic=use_antithetic, day_seed=day_seed)\n",
    "        metrics = sim.calculate_performance_metrics(day_results)\n",
    "        \n",
    "        daily_results.append(day_results)\n",
    "        daily_metrics.append({\n",
    "            'day': day + 1,\n",
    "            'total_waiting_time': metrics['total_waiting_time'],\n",
    "            'idle_time': metrics['idle_time'],\n",
    "            'overtime': metrics['overtime'],\n",
    "            'total_cost': metrics['total_cost'],\n",
    "            'avg_waiting_time': metrics['avg_waiting_time'],\n",
    "            'utilization': metrics['utilization'],\n",
    "            'service_time_mean': service_time_mean\n",
    "        })\n",
    "    \n",
    "    metrics_df = pd.DataFrame(daily_metrics)\n",
    "    return daily_results, metrics_df\n",
    "\n",
    "def run_comprehensive_experiment(service_time_mean=20, base_seed=42):\n",
    "    cost_params = {'C_w': 0.1, 'C_i': 1, 'C_o': 1}\n",
    "    scheduled_interarrivals = [10, 15, 20, 25, 30]\n",
    "    server_configs = [1, 2]\n",
    "    num_datasets = 1000\n",
    "    \n",
    "    all_results = {}\n",
    "    summary_stats = []\n",
    "    \n",
    "    for num_servers in server_configs:\n",
    "        for interarrival in scheduled_interarrivals:\n",
    "            print(f\"Simulating {num_datasets} days: {num_servers} server(s), {interarrival} min interarrival...\")\n",
    "            \n",
    "            key = f\"servers_{num_servers}_interarrival_{interarrival}\"\n",
    "            \n",
    "            daily_results, metrics_df = run_multiple_days_simulation(\n",
    "                num_datasets=num_datasets,\n",
    "                num_servers=num_servers,\n",
    "                scheduled_interarrival=interarrival,\n",
    "                cost_params=cost_params,\n",
    "                use_antithetic=True,\n",
    "                service_time_mean=service_time_mean,\n",
    "                base_seed=base_seed\n",
    "            )\n",
    "            \n",
    "            all_results[key] = {\n",
    "                'daily_results': daily_results,\n",
    "                'metrics_df': metrics_df\n",
    "            }\n",
    "            \n",
    "            avg_metrics = metrics_df.mean()\n",
    "            std_metrics = metrics_df.std()\n",
    "            \n",
    "            summary_stats.append({\n",
    "                'num_servers': num_servers,\n",
    "                'scheduled_interarrival': interarrival,\n",
    "                'service_time_mean': service_time_mean,\n",
    "                'avg_total_cost': avg_metrics['total_cost'],\n",
    "                'std_total_cost': std_metrics['total_cost'],\n",
    "                'avg_waiting_time': avg_metrics['avg_waiting_time'],\n",
    "                'avg_idle_time': avg_metrics['idle_time'],\n",
    "                'avg_overtime': avg_metrics['overtime'],\n",
    "                'avg_utilization': avg_metrics['utilization']\n",
    "            })\n",
    "    \n",
    "    summary_df = pd.DataFrame(summary_stats)\n",
    "    return all_results, summary_df\n",
    "\n",
    "# MAIN EXECUTION\n",
    "print(\"CLINIC APPOINTMENT SYSTEM SIMULATION\")\n",
    "print(\"=\" * 70)\n",
    "\n",
    "# 1. Show sample day with compact table\n",
    "print(\"\\n1. SAMPLE DAY - COMPACT PATIENT TABLE\")\n",
    "print(\"=\" * 70)\n",
    "sim = ClinicSimulation(num_servers=1, scheduled_interarrival=20, service_time_mean=20, base_seed=42)\n",
    "sample_day = sim.simulate_single_day(use_antithetic=True, day_seed=42)\n",
    "sample_metrics = sim.calculate_performance_metrics(sample_day)\n",
    "\n",
    "print(f\"Configuration: 1 Server, 20-min Interarrival, 20-min Mean Service Time\")\n",
    "print(f\"Seed: 42\")\n",
    "print(\"-\" * 70)\n",
    "\n",
    "# Display compact table for all 24 patients\n",
    "compact_df = sample_day.round(2)\n",
    "print(\"\\nCOMPACT PATIENT SCHEDULE TABLE (All 24 Patients)\")\n",
    "print(\"-\" * 70)\n",
    "print(compact_df.to_string(index=False, formatters={\n",
    "    'Cust': '{:>2}'.format,\n",
    "    'Arrival': '{:>6.1f}'.format,\n",
    "    'Start': '{:>6.1f}'.format,\n",
    "    'Service': '{:>6.1f}'.format,\n",
    "    'End': '{:>6.1f}'.format,\n",
    "    'Wait': '{:>5.1f}'.format,\n",
    "    'Server': '{:>1}'.format\n",
    "}))\n",
    "\n",
    "print(\"\\n\" + \"-\" * 70)\n",
    "print(\"PERFORMANCE SUMMARY FOR SAMPLE DAY\")\n",
    "print(f\"Total Waiting Time: {sample_metrics['total_waiting_time']:.1f} min\")\n",
    "print(f\"Average Waiting Time: {sample_metrics['avg_waiting_time']:.1f} min\")\n",
    "print(f\"Doctor Idle Time: {sample_metrics['idle_time']:.1f} min\")\n",
    "print(f\"Doctor Overtime: {sample_metrics['overtime']:.1f} min\")\n",
    "print(f\"Last Service Ends: {sample_metrics['last_service_end']:.1f} min\")\n",
    "print(f\"Total Cost: ${sample_metrics['total_cost']:.2f}\")\n",
    "\n",
    "# 2. Run comprehensive experiment\n",
    "print(\"\\n\\n2. COMPREHENSIVE EXPERIMENT RESULTS\")\n",
    "print(\"=\" * 70)\n",
    "print(\"Running simulation for 1000 days per scenario...\")\n",
    "\n",
    "all_results, summary_df = run_comprehensive_experiment(service_time_mean=20, base_seed=42)\n",
    "\n",
    "# 3. Display summary results\n",
    "print(\"\\nSUMMARY RESULTS (Average over 1000 days)\")\n",
    "print(\"=\" * 70)\n",
    "for num_servers in [1, 2]:\n",
    "    server_results = summary_df[summary_df['num_servers'] == num_servers]\n",
    "    print(f\"\\n{num_servers} SERVER(S) CONFIGURATION:\")\n",
    "    print(\"-\" * 60)\n",
    "    display_df = server_results[[\n",
    "        'scheduled_interarrival', 'avg_total_cost', 'std_total_cost', \n",
    "        'avg_waiting_time', 'avg_idle_time', 'avg_overtime', 'avg_utilization'\n",
    "    ]].round(3)\n",
    "    print(display_df.to_string(index=False))\n",
    "    \n",
    "    optimal_idx = server_results['avg_total_cost'].idxmin()\n",
    "    optimal = server_results.loc[optimal_idx]\n",
    "    print(f\"\\nOPTIMAL CONFIGURATION:\")\n",
    "    print(f\"Interarrival time: {optimal['scheduled_interarrival']} minutes\")\n",
    "    print(f\"Average total cost: ${optimal['avg_total_cost']:.2f}\")\n",
    "    print(f\"Average waiting time: {optimal['avg_waiting_time']:.2f} minutes\")\n",
    "    print(f\"Average overtime: {optimal['avg_overtime']:.2f} minutes\")\n",
    "    print(f\"Utilization: {optimal['avg_utilization']:.1%}\")\n",
    "\n",
    "# 4. Create performance metrics table\n",
    "print(\"\\n\\n3. PERFORMANCE METRICS TABLE\")\n",
    "print(\"=\" * 70)\n",
    "\n",
    "def create_performance_table(all_results, num_servers=1, scheduled_interarrival=20, num_days=10):\n",
    "    key = f\"servers_{num_servers}_interarrival_{scheduled_interarrival}\"\n",
    "    metrics_df = all_results[key]['metrics_df']\n",
    "    \n",
    "    performance_table = metrics_df.head(num_days).copy()\n",
    "    performance_table['Day'] = range(1, num_days + 1)\n",
    "    \n",
    "    print(f\"First {num_days} Days - {num_servers} Server(s), {scheduled_interarrival}-min Interarrival\")\n",
    "    print(\"-\" * 80)\n",
    "    \n",
    "    display_table = performance_table[['Day', 'total_waiting_time', 'idle_time', 'overtime', 'total_cost', 'avg_waiting_time']].round(2)\n",
    "    display_table.columns = ['Day', 'Total Wait', 'Idle Time', 'Overtime', 'Total Cost', 'Avg Wait']\n",
    "    print(display_table.to_string(index=False))\n",
    "\n",
    "create_performance_table(all_results, num_servers=1, scheduled_interarrival=20, num_days=10)\n",
    "\n",
    "# 5. Plotting results\n",
    "print(\"\\n\\n4. PERFORMANCE GRAPHS\")\n",
    "print(\"=\" * 70)\n",
    "\n",
    "def plot_results(summary_df):\n",
    "    fig, axes = plt.subplots(2, 2, figsize=(15, 12))\n",
    "    \n",
    "    # Plot 1: Total Cost vs Interarrival Time\n",
    "    for servers in summary_df['num_servers'].unique():\n",
    "        subset = summary_df[summary_df['num_servers'] == servers]\n",
    "        axes[0,0].plot(subset['scheduled_interarrival'], subset['avg_total_cost'], \n",
    "                      marker='o', linewidth=2, markersize=8, label=f'{servers} Server(s)')\n",
    "        axes[0,0].fill_between(subset['scheduled_interarrival'],\n",
    "                              subset['avg_total_cost'] - subset['std_total_cost'],\n",
    "                              subset['avg_total_cost'] + subset['std_total_cost'],\n",
    "                              alpha=0.2)\n",
    "    axes[0,0].set_xlabel('Scheduled Interarrival Time (min)')\n",
    "    axes[0,0].set_ylabel('Average Total Cost ($)')\n",
    "    axes[0,0].set_title('Total Cost vs Interarrival Time\\n(1000 days simulation)')\n",
    "    axes[0,0].legend()\n",
    "    axes[0,0].grid(True, alpha=0.3)\n",
    "    \n",
    "    # Plot 2: Average Waiting Time vs Interarrival Time\n",
    "    for servers in summary_df['num_servers'].unique():\n",
    "        subset = summary_df[summary_df['num_servers'] == servers]\n",
    "        axes[0,1].plot(subset['scheduled_interarrival'], subset['avg_waiting_time'], \n",
    "                      marker='s', linewidth=2, markersize=8, label=f'{servers} Server(s)')\n",
    "    axes[0,1].set_xlabel('Scheduled Interarrival Time (min)')\n",
    "    axes[0,1].set_ylabel('Average Waiting Time (min)')\n",
    "    axes[0,1].set_title('Patient Waiting Time vs Interarrival Time')\n",
    "    axes[0,1].legend()\n",
    "    axes[0,1].grid(True, alpha=0.3)\n",
    "    \n",
    "    # Plot 3: Overtime vs Interarrival Time\n",
    "    for servers in summary_df['num_servers'].unique():\n",
    "        subset = summary_df[summary_df['num_servers'] == servers]\n",
    "        axes[1,0].plot(subset['scheduled_interarrival'], subset['avg_overtime'], \n",
    "                      marker='^', linewidth=2, markersize=8, label=f'{servers} Server(s)')\n",
    "    axes[1,0].set_xlabel('Scheduled Interarrival Time (min)')\n",
    "    axes[1,0].set_ylabel('Average Overtime (min)')\n",
    "    axes[1,0].set_title('Doctor Overtime vs Interarrival Time')\n",
    "    axes[1,0].legend()\n",
    "    axes[1,0].grid(True, alpha=0.3)\n",
    "    \n",
    "    # Plot 4: Utilization vs Interarrival Time\n",
    "    for servers in summary_df['num_servers'].unique():\n",
    "        subset = summary_df[summary_df['num_servers'] == servers]\n",
    "        axes[1,1].plot(subset['scheduled_interarrival'], subset['avg_utilization'] * 100, \n",
    "                      marker='d', linewidth=2, markersize=8, label=f'{servers} Server(s)')\n",
    "    axes[1,1].set_xlabel('Scheduled Interarrival Time (min)')\n",
    "    axes[1,1].set_ylabel('Utilization Rate (%)')\n",
    "    axes[1,1].set_title('Doctor Utilization vs Interarrival Time')\n",
    "    axes[1,1].legend()\n",
    "    axes[1,1].grid(True, alpha=0.3)\n",
    "    \n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "plot_results(summary_df)\n",
    "\n",
    "# 6. Final recommendations\n",
    "print(\"\\n\\n5. OPTIMAL CONFIGURATIONS RECOMMENDATION\")\n",
    "print(\"=\" * 70)\n",
    "\n",
    "optimal_1_server = summary_df[summary_df['num_servers'] == 1].loc[\n",
    "    summary_df[summary_df['num_servers'] == 1]['avg_total_cost'].idxmin()\n",
    "]\n",
    "optimal_2_server = summary_df[summary_df['num_servers'] == 2].loc[\n",
    "    summary_df[summary_df['num_servers'] == 2]['avg_total_cost'].idxmin()\n",
    "]\n",
    "\n",
    "print(\"BEST CONFIGURATIONS:\")\n",
    "print(\"-\" * 50)\n",
    "print(f\"1 SERVER OPTIMAL:\")\n",
    "print(f\"  Interarrival time: {optimal_1_server['scheduled_interarrival']} minutes\")\n",
    "print(f\"  Average daily cost: ${optimal_1_server['avg_total_cost']:.2f}\")\n",
    "print(f\"  Average waiting time: {optimal_1_server['avg_waiting_time']:.2f} minutes\")\n",
    "print(f\"  Average overtime: {optimal_1_server['avg_overtime']:.2f} minutes\")\n",
    "\n",
    "print(f\"\\n2 SERVER OPTIMAL:\")\n",
    "print(f\"  Interarrival time: {optimal_2_server['scheduled_interarrival']} minutes\")\n",
    "print(f\"  Average daily cost: ${optimal_2_server['avg_total_cost']:.2f}\")\n",
    "print(f\"  Average waiting time: {optimal_2_server['avg_waiting_time']:.2f} minutes\")\n",
    "print(f\"  Average overtime: {optimal_2_server['avg_overtime']:.2f} minutes\")\n",
    "\n",
    "# 7. Cost breakdown analysis\n",
    "print(\"\\n\\n6. COST BREAKDOWN ANALYSIS\")\n",
    "print(\"=\" * 70)\n",
    "\n",
    "def analyze_cost_breakdown(all_results, num_servers, scheduled_interarrival):\n",
    "    key = f\"servers_{num_servers}_interarrival_{scheduled_interarrival}\"\n",
    "    metrics_df = all_results[key]['metrics_df']\n",
    "    \n",
    "    avg_waiting_cost = metrics_df['total_waiting_time'].mean() * 0.1\n",
    "    avg_idle_cost = metrics_df['idle_time'].mean() * 1\n",
    "    avg_overtime_cost = metrics_df['overtime'].mean() * 1\n",
    "    total_avg_cost = avg_waiting_cost + avg_idle_cost + avg_overtime_cost\n",
    "    \n",
    "    print(f\"Cost Breakdown - {num_servers} Server(s), {scheduled_interarrival}-min Interarrival:\")\n",
    "    print(f\"  Waiting Cost: ${avg_waiting_cost:.2f} ({avg_waiting_cost/total_avg_cost*100:.1f}%)\")\n",
    "    print(f\"  Idle Cost: ${avg_idle_cost:.2f} ({avg_idle_cost/total_avg_cost*100:.1f}%)\")\n",
    "    print(f\"  Overtime Cost: ${avg_overtime_cost:.2f} ({avg_overtime_cost/total_avg_cost*100:.1f}%)\")\n",
    "    print(f\"  Total Cost: ${total_avg_cost:.2f}\")\n",
    "\n",
    "analyze_cost_breakdown(all_results, 1, 20)\n",
    "analyze_cost_breakdown(all_results, 2, 15)\n",
    "\n",
    "print(\"\\n\" + \"=\" * 70)\n",
    "print(\"SIMULATION COMPLETED SUCCESSFULLY!\")\n",
    "print(\"All results are reproducible with seed 42\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7bef13de",
   "metadata": {},
   "source": [
    "### Draft 3\n",
    "\n",
    "simulation model that can perform sensitivity analysis + export raw data and tables into json file"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "88c2d20f",
   "metadata": {},
   "source": [
    "#### Key Enhancements:\n",
    "1. Sensitivity Analysis\n",
    "- Tests variations in service time mean (15, 18, 20, 22, 25 minutes)\n",
    "\n",
    "- Tests variations in cost parameters (C_w, C_i, C_o)\n",
    "\n",
    "- Provides insights into how sensitive the system is to parameter changes\n",
    "\n",
    "2. Complete Data Export\n",
    "- Main Results JSON: All simulation results, performance metrics, and summary statistics\n",
    "\n",
    "- Sensitivity Analysis JSON: Results from all sensitivity tests\n",
    "\n",
    "- Raw Data JSON: All uniform random numbers, generated service times, interarrival times, and patient schedules\n",
    "\n",
    "3. Raw Data Collection\n",
    "- Stores all uniform random numbers used for both service times and interarrival times\n",
    "\n",
    "- Tracks antithetic variable pairs when used\n",
    "\n",
    "- Records all generated values and simulation states\n",
    "\n",
    "- Includes day-specific seeds for complete reproducibility"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f3a9acde",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CLINIC APPOINTMENT SYSTEM SIMULATION WITH SENSITIVITY ANALYSIS\n",
      "======================================================================\n",
      "\n",
      "1. SAMPLE DAY - COMPACT PATIENT TABLE\n",
      "======================================================================\n",
      "Configuration: 1 Server, 20-min Interarrival, 20-min Mean Service Time\n",
      "Seed: 42\n",
      "----------------------------------------------------------------------\n",
      "\n",
      "COMPACT PATIENT SCHEDULE TABLE (All 24 Patients)\n",
      "----------------------------------------------------------------------\n",
      "Cust Arrival  Start Service    End  Wait Server\n",
      "   1     0.6    0.6    35.7   36.4   0.0      0\n",
      "   2    34.6   36.4     4.8   41.1   1.8      0\n",
      "   3    47.3   47.3     4.0   51.3   0.0      0\n",
      "   4    64.5   64.5     4.0   68.5   0.0      0\n",
      "   5    76.8   76.8     7.3   84.1   0.0      0\n",
      "   6    96.8   96.8    14.9  111.7   0.0      0\n",
      "   7   114.2  114.2    11.3  125.5   0.0      0\n",
      "   8   151.0  151.0     6.9  157.9   0.0      0\n",
      "   9   164.5  164.5    18.9  183.5   0.0      0\n",
      "  10   186.8  186.8     3.0  189.8   0.0      0\n",
      "  11   192.5  192.5     6.9  199.4   0.0      0\n",
      "  12   235.8  235.8     9.1  244.9   0.0      0\n",
      "  13   245.0  245.0     3.7  248.7   0.0      0\n",
      "  14   253.8  253.8    31.0  284.8   0.0      0\n",
      "  15   279.0  284.8    34.1  318.9   5.9      0\n",
      "  16   301.1  318.9    33.9  352.9  17.9      0\n",
      "  17   330.3  352.9    23.8  376.6  22.5      0\n",
      "  18   350.3  376.6    12.9  389.6  26.3      0\n",
      "  19   374.1  389.6    16.8  406.3  15.4      0\n",
      "  20   376.3  406.3    24.7  431.0  30.0      0\n",
      "  21   401.0  431.0     9.8  440.8  30.0      0\n",
      "  22   419.4  440.8    39.4  480.2  21.5      0\n",
      "  23   456.5  480.2    24.6  504.8  23.7      0\n",
      "  24   453.0  504.8    20.1  524.9  51.8      0\n",
      "\n",
      "----------------------------------------------------------------------\n",
      "PERFORMANCE SUMMARY FOR SAMPLE DAY\n",
      "Total Waiting Time: 246.9 min\n",
      "Average Waiting Time: 10.3 min\n",
      "Doctor Idle Time: 123.3 min\n",
      "Doctor Overtime: 44.9 min\n",
      "Last Service Ends: 524.9 min\n",
      "Total Cost: $192.92\n",
      "\n",
      "\n",
      "2. COMPREHENSIVE EXPERIMENT WITH RAW DATA COLLECTION\n",
      "======================================================================\n",
      "Running simulation for 100 days per scenario (with raw data)...\n",
      "Simulating: servers_1_interarrival_15...\n",
      "Simulating: servers_1_interarrival_20...\n",
      "Simulating: servers_1_interarrival_25...\n",
      "Simulating: servers_2_interarrival_15...\n",
      "Simulating: servers_2_interarrival_20...\n",
      "Simulating: servers_2_interarrival_25...\n",
      "\n",
      "\n",
      "3. SENSITIVITY ANALYSIS\n",
      "======================================================================\n",
      "RUNNING SENSITIVITY ANALYSIS\n",
      "============================================================\n",
      "\n",
      "1. Service Time Sensitivity:\n",
      "----------------------------------------\n",
      "Service Mean: 15 min -> Avg Cost: $190.17, Avg Wait: 13.5 min\n",
      "Service Mean: 18 min -> Avg Cost: $202.55, Avg Wait: 27.3 min\n",
      "Service Mean: 20 min -> Avg Cost: $235.42, Avg Wait: 39.7 min\n",
      "Service Mean: 22 min -> Avg Cost: $289.63, Avg Wait: 54.5 min\n",
      "Service Mean: 25 min -> Avg Cost: $395.49, Avg Wait: 80.2 min\n",
      "\n",
      "2. Cost Parameters Sensitivity:\n",
      "----------------------------------------\n",
      "C_w: 0.05 -> Avg Cost: $187.80\n",
      "C_w: 0.1 -> Avg Cost: $235.42\n",
      "C_w: 0.2 -> Avg Cost: $330.65\n",
      "C_w: 0.5 -> Avg Cost: $616.35\n",
      "C_i: 0.5 -> Avg Cost: $201.15\n",
      "C_i: 1 -> Avg Cost: $235.42\n",
      "C_i: 2 -> Avg Cost: $303.97\n",
      "C_i: 5 -> Avg Cost: $509.62\n",
      "C_o: 0.5 -> Avg Cost: $199.60\n",
      "C_o: 1 -> Avg Cost: $235.42\n",
      "C_o: 2 -> Avg Cost: $307.06\n",
      "C_o: 5 -> Avg Cost: $521.97\n",
      "\n",
      "\n",
      "4. DATA EXPORT\n",
      "======================================================================\n",
      "\n",
      "Results exported to simulation_outputs/clinic_simulation_results_20251016_140527_main.json\n",
      "Sensitivity results exported to simulation_outputs/clinic_simulation_results_20251016_140527_sensitivity.json\n",
      "Raw data exported to simulation_outputs/clinic_simulation_raw_data_20251016_140528.json\n",
      "\n",
      "\n",
      "5. SUMMARY RESULTS\n",
      "======================================================================\n",
      "                   config  avg_total_cost  avg_waiting_time  avg_overtime  avg_utilization\n",
      "servers_1_interarrival_15         240.208            72.382        38.881            0.947\n",
      "servers_1_interarrival_20         235.421            39.681        71.638            0.877\n",
      "servers_1_interarrival_25         349.037            21.207       150.513            0.766\n",
      "servers_2_interarrival_15         271.368             4.116         0.000            0.631\n",
      "servers_2_interarrival_20         494.574             1.152        15.426            0.491\n",
      "servers_2_interarrival_25         824.239             0.420       124.842            0.399\n",
      "\n",
      "\n",
      "6. PERFORMANCE GRAPHS\n",
      "======================================================================\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x864 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "======================================================================\n",
      "SIMULATION COMPLETED SUCCESSFULLY!\n",
      "All data has been exported to JSON files in the 'simulation_outputs' folder\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import json\n",
    "import os\n",
    "from datetime import datetime\n",
    "\n",
    "class ClinicSimulation:\n",
    "    def __init__(self, num_servers=1, scheduled_interarrival=20, planning_horizon=480, \n",
    "                 patients_per_day=24, queue_capacity=20, cost_params=None,\n",
    "                 service_time_mean=20, base_seed=42):\n",
    "        self.num_servers = num_servers\n",
    "        self.scheduled_interarrival = scheduled_interarrival\n",
    "        self.planning_horizon = planning_horizon\n",
    "        self.patients_per_day = patients_per_day\n",
    "        self.queue_capacity = queue_capacity\n",
    "        self.base_seed = base_seed\n",
    "        \n",
    "        self.cost_params = cost_params or {'C_w': 0.1, 'C_i': 1, 'C_o': 1}\n",
    "        self.triangular_min = -10\n",
    "        self.triangular_mode = 0\n",
    "        self.triangular_max = 20\n",
    "        self.service_time_mean = service_time_mean\n",
    "    \n",
    "    def generate_interarrival_time(self, U):\n",
    "        F_mode = (self.triangular_mode - self.triangular_min) / (self.triangular_max - self.triangular_min)\n",
    "        triangular_component = np.where(\n",
    "            U <= F_mode,\n",
    "            self.triangular_min + np.sqrt(U * (self.triangular_max - self.triangular_min) * (self.triangular_mode - self.triangular_min)),\n",
    "            self.triangular_max - np.sqrt((1 - U) * (self.triangular_max - self.triangular_min) * (self.triangular_max - self.triangular_mode))\n",
    "        )\n",
    "        return self.scheduled_interarrival + triangular_component\n",
    "    \n",
    "    def generate_service_time(self, U):\n",
    "        return -np.log(1 - U) * self.service_time_mean\n",
    "    \n",
    "    def simulate_single_day(self, use_antithetic=False, day_seed=None, store_raw_data=False):\n",
    "        if day_seed is not None:\n",
    "            np.random.seed(day_seed)\n",
    "        else:\n",
    "            np.random.seed(self.base_seed)\n",
    "        \n",
    "        n_patients = self.patients_per_day\n",
    "        raw_data = {}\n",
    "        \n",
    "        if use_antithetic:\n",
    "            half_n = n_patients // 2\n",
    "            U_interarrival = np.random.uniform(0, 1, half_n)\n",
    "            U_service = np.random.uniform(0, 1, half_n)\n",
    "            \n",
    "            if store_raw_data:\n",
    "                raw_data['U_interarrival_antithetic_set1'] = U_interarrival.tolist()\n",
    "                raw_data['U_service_antithetic_set1'] = U_service.tolist()\n",
    "                raw_data['U_interarrival_antithetic_set2'] = (1 - U_interarrival).tolist()\n",
    "                raw_data['U_service_antithetic_set2'] = (1 - U_service).tolist()\n",
    "            \n",
    "            interarrival_times1 = np.array([self.generate_interarrival_time(u) for u in U_interarrival])\n",
    "            interarrival_times2 = np.array([self.generate_interarrival_time(1-u) for u in U_interarrival])\n",
    "            service_times1 = np.array([self.generate_service_time(u) for u in U_service])\n",
    "            service_times2 = np.array([self.generate_service_time(1-u) for u in U_service])\n",
    "            \n",
    "            interarrival_times = np.concatenate([interarrival_times1, interarrival_times2])\n",
    "            service_times = np.concatenate([service_times1, service_times2])\n",
    "            \n",
    "            if store_raw_data:\n",
    "                raw_data['interarrival_times_set1'] = interarrival_times1.tolist()\n",
    "                raw_data['interarrival_times_set2'] = interarrival_times2.tolist()\n",
    "                raw_data['service_times_set1'] = service_times1.tolist()\n",
    "                raw_data['service_times_set2'] = service_times2.tolist()\n",
    "        else:\n",
    "            U_interarrival = np.random.uniform(0, 1, n_patients)\n",
    "            U_service = np.random.uniform(0, 1, n_patients)\n",
    "            \n",
    "            if store_raw_data:\n",
    "                raw_data['U_interarrival'] = U_interarrival.tolist()\n",
    "                raw_data['U_service'] = U_service.tolist()\n",
    "            \n",
    "            interarrival_times = np.array([self.generate_interarrival_time(u) for u in U_interarrival])\n",
    "            service_times = np.array([self.generate_service_time(u) for u in U_service])\n",
    "            \n",
    "            if store_raw_data:\n",
    "                raw_data['interarrival_times'] = interarrival_times.tolist()\n",
    "                raw_data['service_times'] = service_times.tolist()\n",
    "        \n",
    "        scheduled_arrivals = np.arange(0, n_patients * self.scheduled_interarrival, self.scheduled_interarrival)\n",
    "        actual_arrival_times = scheduled_arrivals + (interarrival_times - self.scheduled_interarrival)\n",
    "        \n",
    "        service_start_times = np.zeros(n_patients)\n",
    "        service_end_times = np.zeros(n_patients)\n",
    "        waiting_times = np.zeros(n_patients)\n",
    "        server_assignment = np.zeros(n_patients, dtype=int)\n",
    "        \n",
    "        if self.num_servers == 1:\n",
    "            for i in range(n_patients):\n",
    "                if i == 0:\n",
    "                    service_start_times[i] = max(0, actual_arrival_times[i])\n",
    "                else:\n",
    "                    service_start_times[i] = max(actual_arrival_times[i], service_end_times[i-1])\n",
    "                service_end_times[i] = service_start_times[i] + service_times[i]\n",
    "                waiting_times[i] = max(0, service_start_times[i] - actual_arrival_times[i])\n",
    "                server_assignment[i] = 0\n",
    "        else:\n",
    "            server_end_times = [0] * self.num_servers\n",
    "            for i in range(n_patients):\n",
    "                next_available_time = min(server_end_times)\n",
    "                server_index = server_end_times.index(next_available_time)\n",
    "                service_start_times[i] = max(actual_arrival_times[i], next_available_time)\n",
    "                service_end_times[i] = service_start_times[i] + service_times[i]\n",
    "                waiting_times[i] = max(0, service_start_times[i] - actual_arrival_times[i])\n",
    "                server_assignment[i] = server_index\n",
    "                server_end_times[server_index] = service_end_times[i]\n",
    "        \n",
    "        results_df = pd.DataFrame({\n",
    "            'Cust': range(1, n_patients + 1),\n",
    "            'Arrival': actual_arrival_times,\n",
    "            'Start': service_start_times,\n",
    "            'Service': service_times,\n",
    "            'End': service_end_times,\n",
    "            'Wait': waiting_times,\n",
    "            'Server': server_assignment\n",
    "        })\n",
    "        \n",
    "        if store_raw_data:\n",
    "            raw_data['scheduled_arrivals'] = scheduled_arrivals.tolist()\n",
    "            raw_data['actual_arrival_times'] = actual_arrival_times.tolist()\n",
    "            raw_data['service_start_times'] = service_start_times.tolist()\n",
    "            raw_data['service_end_times'] = service_end_times.tolist()\n",
    "            raw_data['waiting_times'] = waiting_times.tolist()\n",
    "            raw_data['server_assignment'] = server_assignment.tolist()\n",
    "            return results_df, raw_data\n",
    "        \n",
    "        return results_df\n",
    "    \n",
    "    def calculate_performance_metrics(self, results_df):\n",
    "        last_service_end = results_df['End'].max()\n",
    "        overtime = max(0, last_service_end - self.planning_horizon)\n",
    "        \n",
    "        idle_time = 0\n",
    "        if self.num_servers == 1:\n",
    "            for i in range(1, len(results_df)):\n",
    "                idle_gap = results_df.loc[i, 'Start'] - results_df.loc[i-1, 'End']\n",
    "                idle_time += max(0, idle_gap)\n",
    "            idle_time += max(0, results_df.loc[0, 'Start'] - 0)\n",
    "        else:\n",
    "            server_last_end = {server: 0 for server in range(self.num_servers)}\n",
    "            for _, patient in results_df.iterrows():\n",
    "                server = patient['Server']\n",
    "                start_time = patient['Start']\n",
    "                idle_gap = start_time - server_last_end[server]\n",
    "                idle_time += max(0, idle_gap)\n",
    "                server_last_end[server] = patient['End']\n",
    "        \n",
    "        total_waiting_time = results_df['Wait'].sum()\n",
    "        total_cost = (total_waiting_time * self.cost_params['C_w'] + \n",
    "                     idle_time * self.cost_params['C_i'] + \n",
    "                     overtime * self.cost_params['C_o'])\n",
    "        \n",
    "        performance_metrics = {\n",
    "            'total_waiting_time': total_waiting_time,\n",
    "            'idle_time': idle_time,\n",
    "            'overtime': overtime,\n",
    "            'total_cost': total_cost,\n",
    "            'last_service_end': last_service_end,\n",
    "            'avg_waiting_time': total_waiting_time / len(results_df),\n",
    "            'utilization': (results_df['Service'].sum() / \n",
    "                          (self.num_servers * last_service_end)) if last_service_end > 0 else 0\n",
    "        }\n",
    "        \n",
    "        return performance_metrics\n",
    "\n",
    "def run_multiple_days_simulation(num_datasets=1000, num_servers=1, scheduled_interarrival=20, \n",
    "                               cost_params=None, use_antithetic=True, service_time_mean=20,\n",
    "                               base_seed=42, store_raw_data=False):\n",
    "    \n",
    "    sim = ClinicSimulation(\n",
    "        num_servers=num_servers, \n",
    "        scheduled_interarrival=scheduled_interarrival,\n",
    "        cost_params=cost_params,\n",
    "        service_time_mean=service_time_mean,\n",
    "        base_seed=base_seed\n",
    "    )\n",
    "    \n",
    "    daily_results = []\n",
    "    daily_metrics = []\n",
    "    raw_data_all_days = []\n",
    "    \n",
    "    for day in range(num_datasets):\n",
    "        day_seed = base_seed + day\n",
    "        \n",
    "        if store_raw_data:\n",
    "            day_results, day_raw_data = sim.simulate_single_day(\n",
    "                use_antithetic=use_antithetic, \n",
    "                day_seed=day_seed,\n",
    "                store_raw_data=True\n",
    "            )\n",
    "            day_raw_data['day'] = day + 1\n",
    "            day_raw_data['day_seed'] = day_seed\n",
    "            raw_data_all_days.append(day_raw_data)\n",
    "        else:\n",
    "            day_results = sim.simulate_single_day(\n",
    "                use_antithetic=use_antithetic, \n",
    "                day_seed=day_seed,\n",
    "                store_raw_data=False\n",
    "            )\n",
    "        \n",
    "        metrics = sim.calculate_performance_metrics(day_results)\n",
    "        \n",
    "        daily_results.append(day_results)\n",
    "        daily_metrics.append({\n",
    "            'day': day + 1,\n",
    "            'day_seed': day_seed,\n",
    "            'total_waiting_time': metrics['total_waiting_time'],\n",
    "            'idle_time': metrics['idle_time'],\n",
    "            'overtime': metrics['overtime'],\n",
    "            'total_cost': metrics['total_cost'],\n",
    "            'avg_waiting_time': metrics['avg_waiting_time'],\n",
    "            'utilization': metrics['utilization'],\n",
    "            'service_time_mean': service_time_mean\n",
    "        })\n",
    "    \n",
    "    metrics_df = pd.DataFrame(daily_metrics)\n",
    "    \n",
    "    if store_raw_data:\n",
    "        return daily_results, metrics_df, raw_data_all_days\n",
    "    else:\n",
    "        return daily_results, metrics_df\n",
    "\n",
    "def run_sensitivity_analysis(base_params=None, variations=None):\n",
    "    \"\"\"Run sensitivity analysis by varying key parameters\"\"\"\n",
    "    if base_params is None:\n",
    "        base_params = {\n",
    "            'num_servers': 1,\n",
    "            'scheduled_interarrival': 20,\n",
    "            'service_time_mean': 20,\n",
    "            'cost_params': {'C_w': 0.1, 'C_i': 1, 'C_o': 1}\n",
    "        }\n",
    "    \n",
    "    if variations is None:\n",
    "        variations = {\n",
    "            'service_time_mean': [15, 18, 20, 22, 25],\n",
    "            'scheduled_interarrival': [15, 18, 20, 22, 25],\n",
    "            'C_w': [0.05, 0.1, 0.2, 0.5],\n",
    "            'C_i': [0.5, 1, 2, 5],\n",
    "            'C_o': [0.5, 1, 2, 5]\n",
    "        }\n",
    "    \n",
    "    sensitivity_results = {}\n",
    "    \n",
    "    print(\"RUNNING SENSITIVITY ANALYSIS\")\n",
    "    print(\"=\" * 60)\n",
    "    \n",
    "    # Service time sensitivity\n",
    "    print(\"\\n1. Service Time Sensitivity:\")\n",
    "    print(\"-\" * 40)\n",
    "    for service_mean in variations['service_time_mean']:\n",
    "        params = base_params.copy()\n",
    "        params['service_time_mean'] = service_mean\n",
    "        \n",
    "        daily_results, metrics_df = run_multiple_days_simulation(\n",
    "            num_datasets=100,\n",
    "            num_servers=params['num_servers'],\n",
    "            scheduled_interarrival=params['scheduled_interarrival'],\n",
    "            cost_params=params['cost_params'],\n",
    "            service_time_mean=service_mean,\n",
    "            base_seed=42\n",
    "        )\n",
    "        \n",
    "        avg_cost = metrics_df['total_cost'].mean()\n",
    "        avg_wait = metrics_df['avg_waiting_time'].mean()\n",
    "        \n",
    "        sensitivity_results[f'service_mean_{service_mean}'] = {\n",
    "            'avg_cost': avg_cost,\n",
    "            'avg_wait': avg_wait,\n",
    "            'params': params\n",
    "        }\n",
    "        \n",
    "        print(f\"Service Mean: {service_mean} min -> Avg Cost: ${avg_cost:.2f}, Avg Wait: {avg_wait:.1f} min\")\n",
    "    \n",
    "    # Cost parameters sensitivity\n",
    "    print(\"\\n2. Cost Parameters Sensitivity:\")\n",
    "    print(\"-\" * 40)\n",
    "    for cost_param in ['C_w', 'C_i', 'C_o']:\n",
    "        for value in variations[cost_param]:\n",
    "            params = base_params.copy()\n",
    "            cost_params = params['cost_params'].copy()\n",
    "            cost_params[cost_param] = value\n",
    "            params['cost_params'] = cost_params\n",
    "            \n",
    "            daily_results, metrics_df = run_multiple_days_simulation(\n",
    "                num_datasets=100,\n",
    "                num_servers=params['num_servers'],\n",
    "                scheduled_interarrival=params['scheduled_interarrival'],\n",
    "                cost_params=cost_params,\n",
    "                service_time_mean=params['service_time_mean'],\n",
    "                base_seed=42\n",
    "            )\n",
    "            \n",
    "            avg_cost = metrics_df['total_cost'].mean()\n",
    "            \n",
    "            sensitivity_results[f'{cost_param}_{value}'] = {\n",
    "                'avg_cost': avg_cost,\n",
    "                'params': params\n",
    "            }\n",
    "            \n",
    "            print(f\"{cost_param}: {value} -> Avg Cost: ${avg_cost:.2f}\")\n",
    "    \n",
    "    return sensitivity_results\n",
    "\n",
    "def export_to_json(all_results, sensitivity_results=None, filename=None):\n",
    "    \"\"\"Export all simulation results to JSON files\"\"\"\n",
    "    if filename is None:\n",
    "        timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n",
    "        filename = f\"clinic_simulation_results_{timestamp}\"\n",
    "    \n",
    "    # Create output directory\n",
    "    os.makedirs('simulation_outputs', exist_ok=True)\n",
    "    \n",
    "    # Export main results\n",
    "    main_output = {}\n",
    "    \n",
    "    for key, result in all_results.items():\n",
    "        # Convert DataFrames to dictionaries\n",
    "        daily_data = []\n",
    "        for i, day_df in enumerate(result['daily_results']):\n",
    "            daily_data.append({\n",
    "                'day': i + 1,\n",
    "                'patient_data': day_df.to_dict('records'),\n",
    "                'performance_metrics': result['metrics_df'].iloc[i].to_dict()\n",
    "            })\n",
    "        \n",
    "        main_output[key] = {\n",
    "            'config': key,\n",
    "            'daily_data': daily_data,\n",
    "            'summary_stats': result['metrics_df'].describe().to_dict()\n",
    "        }\n",
    "    \n",
    "    # Save main results\n",
    "    with open(f'simulation_outputs/{filename}_main.json', 'w') as f:\n",
    "        json.dump(main_output, f, indent=2, default=str)\n",
    "    \n",
    "    # Export sensitivity analysis results\n",
    "    if sensitivity_results:\n",
    "        with open(f'simulation_outputs/{filename}_sensitivity.json', 'w') as f:\n",
    "            json.dump(sensitivity_results, f, indent=2, default=str)\n",
    "    \n",
    "    print(f\"\\nResults exported to simulation_outputs/{filename}_main.json\")\n",
    "    if sensitivity_results:\n",
    "        print(f\"Sensitivity results exported to simulation_outputs/{filename}_sensitivity.json\")\n",
    "    \n",
    "    return filename\n",
    "\n",
    "def export_raw_data(all_results_with_raw, filename=None):\n",
    "    \"\"\"Export raw simulation data including random numbers\"\"\"\n",
    "    if filename is None:\n",
    "        timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n",
    "        filename = f\"clinic_simulation_raw_data_{timestamp}\"\n",
    "    \n",
    "    raw_output = {}\n",
    "    \n",
    "    for key, result in all_results_with_raw.items():\n",
    "        raw_output[key] = {\n",
    "            'config': key,\n",
    "            'raw_data': result['raw_data']\n",
    "        }\n",
    "    \n",
    "    with open(f'simulation_outputs/{filename}.json', 'w') as f:\n",
    "        json.dump(raw_output, f, indent=2, default=str)\n",
    "    \n",
    "    print(f\"Raw data exported to simulation_outputs/{filename}.json\")\n",
    "    return filename\n",
    "\n",
    "# MAIN EXECUTION\n",
    "def main():\n",
    "    print(\"CLINIC APPOINTMENT SYSTEM SIMULATION WITH SENSITIVITY ANALYSIS\")\n",
    "    print(\"=\" * 70)\n",
    "    \n",
    "    # Create output directory\n",
    "    os.makedirs('simulation_outputs', exist_ok=True)\n",
    "    \n",
    "    # 1. Show sample day with compact table\n",
    "    print(\"\\n1. SAMPLE DAY - COMPACT PATIENT TABLE\")\n",
    "    print(\"=\" * 70)\n",
    "    sim = ClinicSimulation(num_servers=1, scheduled_interarrival=20, service_time_mean=20, base_seed=42)\n",
    "    sample_day, raw_data = sim.simulate_single_day(use_antithetic=True, day_seed=42, store_raw_data=True)\n",
    "    sample_metrics = sim.calculate_performance_metrics(sample_day)\n",
    "\n",
    "    print(f\"Configuration: 1 Server, 20-min Interarrival, 20-min Mean Service Time\")\n",
    "    print(f\"Seed: 42\")\n",
    "    print(\"-\" * 70)\n",
    "\n",
    "    # Display compact table for all 24 patients\n",
    "    compact_df = sample_day.round(2)\n",
    "    print(\"\\nCOMPACT PATIENT SCHEDULE TABLE (All 24 Patients)\")\n",
    "    print(\"-\" * 70)\n",
    "    print(compact_df.to_string(index=False, formatters={\n",
    "        'Cust': '{:>2}'.format,\n",
    "        'Arrival': '{:>6.1f}'.format,\n",
    "        'Start': '{:>6.1f}'.format,\n",
    "        'Service': '{:>6.1f}'.format,\n",
    "        'End': '{:>6.1f}'.format,\n",
    "        'Wait': '{:>5.1f}'.format,\n",
    "        'Server': '{:>1}'.format\n",
    "    }))\n",
    "\n",
    "    print(\"\\n\" + \"-\" * 70)\n",
    "    print(\"PERFORMANCE SUMMARY FOR SAMPLE DAY\")\n",
    "    print(f\"Total Waiting Time: {sample_metrics['total_waiting_time']:.1f} min\")\n",
    "    print(f\"Average Waiting Time: {sample_metrics['avg_waiting_time']:.1f} min\")\n",
    "    print(f\"Doctor Idle Time: {sample_metrics['idle_time']:.1f} min\")\n",
    "    print(f\"Doctor Overtime: {sample_metrics['overtime']:.1f} min\")\n",
    "    print(f\"Last Service Ends: {sample_metrics['last_service_end']:.1f} min\")\n",
    "    print(f\"Total Cost: ${sample_metrics['total_cost']:.2f}\")\n",
    "\n",
    "    # 2. Run comprehensive experiment with raw data collection\n",
    "    print(\"\\n\\n2. COMPREHENSIVE EXPERIMENT WITH RAW DATA COLLECTION\")\n",
    "    print(\"=\" * 70)\n",
    "    print(\"Running simulation for 100 days per scenario (with raw data)...\")\n",
    "\n",
    "    all_results_with_raw = {}\n",
    "    scheduled_interarrivals = [15, 20, 25]\n",
    "    server_configs = [1, 2]\n",
    "    \n",
    "    for num_servers in server_configs:\n",
    "        for interarrival in scheduled_interarrivals:\n",
    "            key = f\"servers_{num_servers}_interarrival_{interarrival}\"\n",
    "            print(f\"Simulating: {key}...\")\n",
    "            \n",
    "            daily_results, metrics_df, raw_data_all_days = run_multiple_days_simulation(\n",
    "                num_datasets=100,  # Reduced for demonstration\n",
    "                num_servers=num_servers,\n",
    "                scheduled_interarrival=interarrival,\n",
    "                service_time_mean=20,\n",
    "                base_seed=42,\n",
    "                store_raw_data=True\n",
    "            )\n",
    "            \n",
    "            all_results_with_raw[key] = {\n",
    "                'daily_results': daily_results,\n",
    "                'metrics_df': metrics_df,\n",
    "                'raw_data': raw_data_all_days\n",
    "            }\n",
    "\n",
    "    # 3. Run sensitivity analysis\n",
    "    print(\"\\n\\n3. SENSITIVITY ANALYSIS\")\n",
    "    print(\"=\" * 70)\n",
    "    sensitivity_results = run_sensitivity_analysis()\n",
    "\n",
    "    # 4. Export all data to JSON files\n",
    "    print(\"\\n\\n4. DATA EXPORT\")\n",
    "    print(\"=\" * 70)\n",
    "    \n",
    "    # Prepare all_results for export (without raw data for main export)\n",
    "    all_results_for_export = {}\n",
    "    for key, result in all_results_with_raw.items():\n",
    "        all_results_for_export[key] = {\n",
    "            'daily_results': result['daily_results'],\n",
    "            'metrics_df': result['metrics_df']\n",
    "        }\n",
    "    \n",
    "    # Export main results and sensitivity analysis\n",
    "    export_filename = export_to_json(all_results_for_export, sensitivity_results)\n",
    "    \n",
    "    # Export raw data separately\n",
    "    export_raw_data(all_results_with_raw)\n",
    "\n",
    "    # 5. Display summary results\n",
    "    print(\"\\n\\n5. SUMMARY RESULTS\")\n",
    "    print(\"=\" * 70)\n",
    "    \n",
    "    summary_stats = []\n",
    "    for key, result in all_results_with_raw.items():\n",
    "        avg_metrics = result['metrics_df'].mean()\n",
    "        summary_stats.append({\n",
    "            'config': key,\n",
    "            'avg_total_cost': avg_metrics['total_cost'],\n",
    "            'avg_waiting_time': avg_metrics['avg_waiting_time'],\n",
    "            'avg_overtime': avg_metrics['overtime'],\n",
    "            'avg_utilization': avg_metrics['utilization']\n",
    "        })\n",
    "    \n",
    "    summary_df = pd.DataFrame(summary_stats)\n",
    "    print(summary_df.round(3).to_string(index=False))\n",
    "\n",
    "    # 6. Plotting results\n",
    "    print(\"\\n\\n6. PERFORMANCE GRAPHS\")\n",
    "    print(\"=\" * 70)\n",
    "\n",
    "    def plot_sensitivity(sensitivity_results):\n",
    "        fig, axes = plt.subplots(2, 2, figsize=(15, 12))\n",
    "        \n",
    "        # Service time sensitivity\n",
    "        service_data = {k: v for k, v in sensitivity_results.items() if k.startswith('service_mean')}\n",
    "        service_means = [int(k.split('_')[-1]) for k in service_data.keys()]\n",
    "        service_costs = [service_data[k]['avg_cost'] for k in service_data.keys()]\n",
    "        \n",
    "        axes[0,0].plot(service_means, service_costs, 'o-', linewidth=2, markersize=8)\n",
    "        axes[0,0].set_xlabel('Service Time Mean (min)')\n",
    "        axes[0,0].set_ylabel('Average Total Cost ($)')\n",
    "        axes[0,0].set_title('Sensitivity: Service Time vs Cost')\n",
    "        axes[0,0].grid(True, alpha=0.3)\n",
    "        \n",
    "        # Cost parameters sensitivity\n",
    "        cost_params = ['C_w', 'C_i', 'C_o']\n",
    "        for i, cost_param in enumerate(cost_params):\n",
    "            cost_data = {k: v for k, v in sensitivity_results.items() if k.startswith(cost_param)}\n",
    "            cost_values = [float(k.split('_')[-1]) for k in cost_data.keys()]\n",
    "            cost_costs = [cost_data[k]['avg_cost'] for k in cost_data.keys()]\n",
    "            \n",
    "            axes[0,1].plot(cost_values, cost_costs, 'o-', linewidth=2, markersize=8, label=cost_param)\n",
    "        \n",
    "        axes[0,1].set_xlabel('Cost Parameter Value')\n",
    "        axes[0,1].set_ylabel('Average Total Cost ($)')\n",
    "        axes[0,1].set_title('Sensitivity: Cost Parameters vs Cost')\n",
    "        axes[0,1].legend()\n",
    "        axes[0,1].grid(True, alpha=0.3)\n",
    "        \n",
    "        # Waiting time vs service time\n",
    "        service_wait = [service_data[k]['avg_wait'] for k in service_data.keys()]\n",
    "        axes[1,0].plot(service_means, service_wait, 's-', linewidth=2, markersize=8, color='red')\n",
    "        axes[1,0].set_xlabel('Service Time Mean (min)')\n",
    "        axes[1,0].set_ylabel('Average Waiting Time (min)')\n",
    "        axes[1,0].set_title('Sensitivity: Service Time vs Waiting Time')\n",
    "        axes[1,0].grid(True, alpha=0.3)\n",
    "        \n",
    "        plt.tight_layout()\n",
    "        plt.show()\n",
    "\n",
    "    plot_sensitivity(sensitivity_results)\n",
    "\n",
    "    print(\"\\n\" + \"=\" * 70)\n",
    "    print(\"SIMULATION COMPLETED SUCCESSFULLY!\")\n",
    "    print(\"All data has been exported to JSON files in the 'simulation_outputs' folder\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8fd36434",
   "metadata": {},
   "source": [
    "#### export to excel format"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "53bf2f9e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CLINIC APPOINTMENT SYSTEM SIMULATION WITH SENSITIVITY ANALYSIS\n",
      "======================================================================\n",
      "\n",
      "1. SAMPLE DAY - COMPACT PATIENT TABLE\n",
      "======================================================================\n",
      "Configuration: 1 Server, 20-min Interarrival, 20-min Mean Service Time\n",
      "Seed: 42\n",
      "----------------------------------------------------------------------\n",
      "\n",
      "COMPACT PATIENT SCHEDULE TABLE (All 24 Patients)\n",
      "----------------------------------------------------------------------\n",
      "Cust Arrival  Start Service    End  Wait Server\n",
      "   1     0.6    0.6    35.7   36.4   0.0      0\n",
      "   2    34.6   36.4     4.8   41.1   1.8      0\n",
      "   3    47.3   47.3     4.0   51.3   0.0      0\n",
      "   4    64.5   64.5     4.0   68.5   0.0      0\n",
      "   5    76.8   76.8     7.3   84.1   0.0      0\n",
      "   6    96.8   96.8    14.9  111.7   0.0      0\n",
      "   7   114.2  114.2    11.3  125.5   0.0      0\n",
      "   8   151.0  151.0     6.9  157.9   0.0      0\n",
      "   9   164.5  164.5    18.9  183.5   0.0      0\n",
      "  10   186.8  186.8     3.0  189.8   0.0      0\n",
      "  11   192.5  192.5     6.9  199.4   0.0      0\n",
      "  12   235.8  235.8     9.1  244.9   0.0      0\n",
      "  13   245.0  245.0     3.7  248.7   0.0      0\n",
      "  14   253.8  253.8    31.0  284.8   0.0      0\n",
      "  15   279.0  284.8    34.1  318.9   5.9      0\n",
      "  16   301.1  318.9    33.9  352.9  17.9      0\n",
      "  17   330.3  352.9    23.8  376.6  22.5      0\n",
      "  18   350.3  376.6    12.9  389.6  26.3      0\n",
      "  19   374.1  389.6    16.8  406.3  15.4      0\n",
      "  20   376.3  406.3    24.7  431.0  30.0      0\n",
      "  21   401.0  431.0     9.8  440.8  30.0      0\n",
      "  22   419.4  440.8    39.4  480.2  21.5      0\n",
      "  23   456.5  480.2    24.6  504.8  23.7      0\n",
      "  24   453.0  504.8    20.1  524.9  51.8      0\n",
      "\n",
      "----------------------------------------------------------------------\n",
      "PERFORMANCE SUMMARY FOR SAMPLE DAY\n",
      "Total Waiting Time: 246.9 min\n",
      "Average Waiting Time: 10.3 min\n",
      "Doctor Idle Time: 123.3 min\n",
      "Doctor Overtime: 44.9 min\n",
      "Last Service Ends: 524.9 min\n",
      "Total Cost: $192.92\n",
      "\n",
      "\n",
      "2. COMPREHENSIVE EXPERIMENT WITH RAW DATA COLLECTION\n",
      "======================================================================\n",
      "Running simulation for 100 days per scenario (with raw data)...\n",
      "Simulating: servers_1_interarrival_15...\n",
      "Simulating: servers_1_interarrival_20...\n",
      "Simulating: servers_1_interarrival_25...\n",
      "Simulating: servers_2_interarrival_15...\n",
      "Simulating: servers_2_interarrival_20...\n",
      "Simulating: servers_2_interarrival_25...\n",
      "\n",
      "\n",
      "3. SENSITIVITY ANALYSIS\n",
      "======================================================================\n",
      "RUNNING SENSITIVITY ANALYSIS\n",
      "============================================================\n",
      "\n",
      "1. Service Time Sensitivity:\n",
      "----------------------------------------\n",
      "Service Mean: 15 min -> Avg Cost: $190.17, Avg Wait: 13.5 min\n",
      "Service Mean: 18 min -> Avg Cost: $202.55, Avg Wait: 27.3 min\n",
      "Service Mean: 20 min -> Avg Cost: $235.42, Avg Wait: 39.7 min\n",
      "Service Mean: 22 min -> Avg Cost: $289.63, Avg Wait: 54.5 min\n",
      "Service Mean: 25 min -> Avg Cost: $395.49, Avg Wait: 80.2 min\n",
      "\n",
      "2. Cost Parameters Sensitivity:\n",
      "----------------------------------------\n",
      "C_w: 0.05 -> Avg Cost: $187.80\n",
      "C_w: 0.1 -> Avg Cost: $235.42\n",
      "C_w: 0.2 -> Avg Cost: $330.65\n",
      "C_w: 0.5 -> Avg Cost: $616.35\n",
      "C_i: 0.5 -> Avg Cost: $201.15\n",
      "C_i: 1 -> Avg Cost: $235.42\n",
      "C_i: 2 -> Avg Cost: $303.97\n",
      "C_i: 5 -> Avg Cost: $509.62\n",
      "C_o: 0.5 -> Avg Cost: $199.60\n",
      "C_o: 1 -> Avg Cost: $235.42\n",
      "C_o: 2 -> Avg Cost: $307.06\n",
      "C_o: 5 -> Avg Cost: $521.97\n",
      "\n",
      "\n",
      "4. DATA EXPORT TO EXCEL\n",
      "======================================================================\n",
      "\n",
      "Results exported to:\n",
      "  Main results: simulation_outputs/clinic_simulation_results_20251016_142324_main.xlsx\n",
      "  Sensitivity analysis: simulation_outputs/clinic_simulation_results_20251016_142324_sensitivity.xlsx\n",
      "  Raw data: simulation_outputs/clinic_simulation_results_20251016_142324_raw_data.xlsx\n",
      "\n",
      "\n",
      "5. SUMMARY RESULTS\n",
      "======================================================================\n",
      "                   config  avg_total_cost  avg_waiting_time  avg_overtime  avg_utilization\n",
      "servers_1_interarrival_15         240.208            72.382        38.881            0.947\n",
      "servers_1_interarrival_20         235.421            39.681        71.638            0.877\n",
      "servers_1_interarrival_25         349.037            21.207       150.513            0.766\n",
      "servers_2_interarrival_15         271.368             4.116         0.000            0.631\n",
      "servers_2_interarrival_20         494.574             1.152        15.426            0.491\n",
      "servers_2_interarrival_25         824.239             0.420       124.842            0.399\n",
      "\n",
      "\n",
      "6. PERFORMANCE GRAPHS\n",
      "======================================================================\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x864 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "======================================================================\n",
      "SIMULATION COMPLETED SUCCESSFULLY!\n",
      "All data has been exported to Excel files in the 'simulation_outputs' folder\n",
      "\n",
      "Excel Files Created:\n",
      "1. _main.xlsx - Summary, performance metrics, and sample patient data\n",
      "2. _sensitivity.xlsx - Sensitivity analysis results\n",
      "3. _raw_data.xlsx - All uniform random numbers and generated values\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import os\n",
    "from datetime import datetime\n",
    "from openpyxl import Workbook\n",
    "from openpyxl.utils.dataframe import dataframe_to_rows\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "class ClinicSimulation:\n",
    "    def __init__(self, num_servers=1, scheduled_interarrival=20, planning_horizon=480, \n",
    "                 patients_per_day=24, queue_capacity=20, cost_params=None,\n",
    "                 service_time_mean=20, base_seed=42):\n",
    "        self.num_servers = num_servers\n",
    "        self.scheduled_interarrival = scheduled_interarrival\n",
    "        self.planning_horizon = planning_horizon\n",
    "        self.patients_per_day = patients_per_day\n",
    "        self.queue_capacity = queue_capacity\n",
    "        self.base_seed = base_seed\n",
    "        \n",
    "        self.cost_params = cost_params or {'C_w': 0.1, 'C_i': 1, 'C_o': 1}\n",
    "        self.triangular_min = -10\n",
    "        self.triangular_mode = 0\n",
    "        self.triangular_max = 20\n",
    "        self.service_time_mean = service_time_mean\n",
    "    \n",
    "    def generate_interarrival_time(self, U):\n",
    "        F_mode = (self.triangular_mode - self.triangular_min) / (self.triangular_max - self.triangular_min)\n",
    "        triangular_component = np.where(\n",
    "            U <= F_mode,\n",
    "            self.triangular_min + np.sqrt(U * (self.triangular_max - self.triangular_min) * (self.triangular_mode - self.triangular_min)),\n",
    "            self.triangular_max - np.sqrt((1 - U) * (self.triangular_max - self.triangular_min) * (self.triangular_max - self.triangular_mode))\n",
    "        )\n",
    "        return self.scheduled_interarrival + triangular_component\n",
    "    \n",
    "    def generate_service_time(self, U):\n",
    "        return -np.log(1 - U) * self.service_time_mean\n",
    "    \n",
    "    def simulate_single_day(self, use_antithetic=False, day_seed=None, store_raw_data=False):\n",
    "        if day_seed is not None:\n",
    "            np.random.seed(day_seed)\n",
    "        else:\n",
    "            np.random.seed(self.base_seed)\n",
    "        \n",
    "        n_patients = self.patients_per_day\n",
    "        raw_data = {}\n",
    "        \n",
    "        if use_antithetic:\n",
    "            half_n = n_patients // 2\n",
    "            U_interarrival = np.random.uniform(0, 1, half_n)\n",
    "            U_service = np.random.uniform(0, 1, half_n)\n",
    "            \n",
    "            if store_raw_data:\n",
    "                raw_data['U_interarrival_antithetic_set1'] = U_interarrival.tolist()\n",
    "                raw_data['U_service_antithetic_set1'] = U_service.tolist()\n",
    "                raw_data['U_interarrival_antithetic_set2'] = (1 - U_interarrival).tolist()\n",
    "                raw_data['U_service_antithetic_set2'] = (1 - U_service).tolist()\n",
    "            \n",
    "            interarrival_times1 = np.array([self.generate_interarrival_time(u) for u in U_interarrival])\n",
    "            interarrival_times2 = np.array([self.generate_interarrival_time(1-u) for u in U_interarrival])\n",
    "            service_times1 = np.array([self.generate_service_time(u) for u in U_service])\n",
    "            service_times2 = np.array([self.generate_service_time(1-u) for u in U_service])\n",
    "            \n",
    "            interarrival_times = np.concatenate([interarrival_times1, interarrival_times2])\n",
    "            service_times = np.concatenate([service_times1, service_times2])\n",
    "            \n",
    "            if store_raw_data:\n",
    "                raw_data['interarrival_times_set1'] = interarrival_times1.tolist()\n",
    "                raw_data['interarrival_times_set2'] = interarrival_times2.tolist()\n",
    "                raw_data['service_times_set1'] = service_times1.tolist()\n",
    "                raw_data['service_times_set2'] = service_times2.tolist()\n",
    "        else:\n",
    "            U_interarrival = np.random.uniform(0, 1, n_patients)\n",
    "            U_service = np.random.uniform(0, 1, n_patients)\n",
    "            \n",
    "            if store_raw_data:\n",
    "                raw_data['U_interarrival'] = U_interarrival.tolist()\n",
    "                raw_data['U_service'] = U_service.tolist()\n",
    "            \n",
    "            interarrival_times = np.array([self.generate_interarrival_time(u) for u in U_interarrival])\n",
    "            service_times = np.array([self.generate_service_time(u) for u in U_service])\n",
    "            \n",
    "            if store_raw_data:\n",
    "                raw_data['interarrival_times'] = interarrival_times.tolist()\n",
    "                raw_data['service_times'] = service_times.tolist()\n",
    "        \n",
    "        scheduled_arrivals = np.arange(0, n_patients * self.scheduled_interarrival, self.scheduled_interarrival)\n",
    "        actual_arrival_times = scheduled_arrivals + (interarrival_times - self.scheduled_interarrival)\n",
    "        \n",
    "        service_start_times = np.zeros(n_patients)\n",
    "        service_end_times = np.zeros(n_patients)\n",
    "        waiting_times = np.zeros(n_patients)\n",
    "        server_assignment = np.zeros(n_patients, dtype=int)\n",
    "        \n",
    "        if self.num_servers == 1:\n",
    "            for i in range(n_patients):\n",
    "                if i == 0:\n",
    "                    service_start_times[i] = max(0, actual_arrival_times[i])\n",
    "                else:\n",
    "                    service_start_times[i] = max(actual_arrival_times[i], service_end_times[i-1])\n",
    "                service_end_times[i] = service_start_times[i] + service_times[i]\n",
    "                waiting_times[i] = max(0, service_start_times[i] - actual_arrival_times[i])\n",
    "                server_assignment[i] = 0\n",
    "        else:\n",
    "            server_end_times = [0] * self.num_servers\n",
    "            for i in range(n_patients):\n",
    "                next_available_time = min(server_end_times)\n",
    "                server_index = server_end_times.index(next_available_time)\n",
    "                service_start_times[i] = max(actual_arrival_times[i], next_available_time)\n",
    "                service_end_times[i] = service_start_times[i] + service_times[i]\n",
    "                waiting_times[i] = max(0, service_start_times[i] - actual_arrival_times[i])\n",
    "                server_assignment[i] = server_index\n",
    "                server_end_times[server_index] = service_end_times[i]\n",
    "        \n",
    "        results_df = pd.DataFrame({\n",
    "            'Cust': range(1, n_patients + 1),\n",
    "            'Arrival': actual_arrival_times,\n",
    "            'Start': service_start_times,\n",
    "            'Service': service_times,\n",
    "            'End': service_end_times,\n",
    "            'Wait': waiting_times,\n",
    "            'Server': server_assignment\n",
    "        })\n",
    "        \n",
    "        if store_raw_data:\n",
    "            raw_data['scheduled_arrivals'] = scheduled_arrivals.tolist()\n",
    "            raw_data['actual_arrival_times'] = actual_arrival_times.tolist()\n",
    "            raw_data['service_start_times'] = service_start_times.tolist()\n",
    "            raw_data['service_end_times'] = service_end_times.tolist()\n",
    "            raw_data['waiting_times'] = waiting_times.tolist()\n",
    "            raw_data['server_assignment'] = server_assignment.tolist()\n",
    "            raw_data['day_seed'] = day_seed\n",
    "            return results_df, raw_data\n",
    "        \n",
    "        return results_df\n",
    "    \n",
    "    def calculate_performance_metrics(self, results_df):\n",
    "        last_service_end = results_df['End'].max()\n",
    "        overtime = max(0, last_service_end - self.planning_horizon)\n",
    "        \n",
    "        idle_time = 0\n",
    "        if self.num_servers == 1:\n",
    "            for i in range(1, len(results_df)):\n",
    "                idle_gap = results_df.loc[i, 'Start'] - results_df.loc[i-1, 'End']\n",
    "                idle_time += max(0, idle_gap)\n",
    "            idle_time += max(0, results_df.loc[0, 'Start'] - 0)\n",
    "        else:\n",
    "            server_last_end = {server: 0 for server in range(self.num_servers)}\n",
    "            for _, patient in results_df.iterrows():\n",
    "                server = patient['Server']\n",
    "                start_time = patient['Start']\n",
    "                idle_gap = start_time - server_last_end[server]\n",
    "                idle_time += max(0, idle_gap)\n",
    "                server_last_end[server] = patient['End']\n",
    "        \n",
    "        total_waiting_time = results_df['Wait'].sum()\n",
    "        total_cost = (total_waiting_time * self.cost_params['C_w'] + \n",
    "                     idle_time * self.cost_params['C_i'] + \n",
    "                     overtime * self.cost_params['C_o'])\n",
    "        \n",
    "        performance_metrics = {\n",
    "            'total_waiting_time': total_waiting_time,\n",
    "            'idle_time': idle_time,\n",
    "            'overtime': overtime,\n",
    "            'total_cost': total_cost,\n",
    "            'last_service_end': last_service_end,\n",
    "            'avg_waiting_time': total_waiting_time / len(results_df),\n",
    "            'utilization': (results_df['Service'].sum() / \n",
    "                          (self.num_servers * last_service_end)) if last_service_end > 0 else 0\n",
    "        }\n",
    "        \n",
    "        return performance_metrics\n",
    "\n",
    "def run_multiple_days_simulation(num_datasets=1000, num_servers=1, scheduled_interarrival=20, \n",
    "                               cost_params=None, use_antithetic=True, service_time_mean=20,\n",
    "                               base_seed=42, store_raw_data=False):\n",
    "    \n",
    "    sim = ClinicSimulation(\n",
    "        num_servers=num_servers, \n",
    "        scheduled_interarrival=scheduled_interarrival,\n",
    "        cost_params=cost_params,\n",
    "        service_time_mean=service_time_mean,\n",
    "        base_seed=base_seed\n",
    "    )\n",
    "    \n",
    "    daily_results = []\n",
    "    daily_metrics = []\n",
    "    raw_data_all_days = []\n",
    "    \n",
    "    for day in range(num_datasets):\n",
    "        day_seed = base_seed + day\n",
    "        \n",
    "        if store_raw_data:\n",
    "            day_results, day_raw_data = sim.simulate_single_day(\n",
    "                use_antithetic=use_antithetic, \n",
    "                day_seed=day_seed,\n",
    "                store_raw_data=True\n",
    "            )\n",
    "            day_raw_data['day'] = day + 1\n",
    "            day_raw_data['day_seed'] = day_seed\n",
    "            raw_data_all_days.append(day_raw_data)\n",
    "        else:\n",
    "            day_results = sim.simulate_single_day(\n",
    "                use_antithetic=use_antithetic, \n",
    "                day_seed=day_seed,\n",
    "                store_raw_data=False\n",
    "            )\n",
    "        \n",
    "        metrics = sim.calculate_performance_metrics(day_results)\n",
    "        \n",
    "        daily_results.append(day_results)\n",
    "        daily_metrics.append({\n",
    "            'day': day + 1,\n",
    "            'day_seed': day_seed,\n",
    "            'total_waiting_time': metrics['total_waiting_time'],\n",
    "            'idle_time': metrics['idle_time'],\n",
    "            'overtime': metrics['overtime'],\n",
    "            'total_cost': metrics['total_cost'],\n",
    "            'avg_waiting_time': metrics['avg_waiting_time'],\n",
    "            'utilization': metrics['utilization'],\n",
    "            'service_time_mean': service_time_mean\n",
    "        })\n",
    "    \n",
    "    metrics_df = pd.DataFrame(daily_metrics)\n",
    "    \n",
    "    if store_raw_data:\n",
    "        return daily_results, metrics_df, raw_data_all_days\n",
    "    else:\n",
    "        return daily_results, metrics_df\n",
    "\n",
    "def run_sensitivity_analysis(base_params=None, variations=None):\n",
    "    \"\"\"Run sensitivity analysis by varying key parameters\"\"\"\n",
    "    if base_params is None:\n",
    "        base_params = {\n",
    "            'num_servers': 1,\n",
    "            'scheduled_interarrival': 20,\n",
    "            'service_time_mean': 20,\n",
    "            'cost_params': {'C_w': 0.1, 'C_i': 1, 'C_o': 1}\n",
    "        }\n",
    "    \n",
    "    if variations is None:\n",
    "        variations = {\n",
    "            'service_time_mean': [15, 18, 20, 22, 25],\n",
    "            'scheduled_interarrival': [15, 18, 20, 22, 25],\n",
    "            'C_w': [0.05, 0.1, 0.2, 0.5],\n",
    "            'C_i': [0.5, 1, 2, 5],\n",
    "            'C_o': [0.5, 1, 2, 5]\n",
    "        }\n",
    "    \n",
    "    sensitivity_results = {}\n",
    "    \n",
    "    print(\"RUNNING SENSITIVITY ANALYSIS\")\n",
    "    print(\"=\" * 60)\n",
    "    \n",
    "    # Service time sensitivity\n",
    "    print(\"\\n1. Service Time Sensitivity:\")\n",
    "    print(\"-\" * 40)\n",
    "    for service_mean in variations['service_time_mean']:\n",
    "        params = base_params.copy()\n",
    "        params['service_time_mean'] = service_mean\n",
    "        \n",
    "        daily_results, metrics_df = run_multiple_days_simulation(\n",
    "            num_datasets=100,\n",
    "            num_servers=params['num_servers'],\n",
    "            scheduled_interarrival=params['scheduled_interarrival'],\n",
    "            cost_params=params['cost_params'],\n",
    "            service_time_mean=service_mean,\n",
    "            base_seed=42\n",
    "        )\n",
    "        \n",
    "        avg_cost = metrics_df['total_cost'].mean()\n",
    "        avg_wait = metrics_df['avg_waiting_time'].mean()\n",
    "        \n",
    "        sensitivity_results[f'service_mean_{service_mean}'] = {\n",
    "            'avg_cost': avg_cost,\n",
    "            'avg_wait': avg_wait,\n",
    "            'params': params\n",
    "        }\n",
    "        \n",
    "        print(f\"Service Mean: {service_mean} min -> Avg Cost: ${avg_cost:.2f}, Avg Wait: {avg_wait:.1f} min\")\n",
    "    \n",
    "    # Cost parameters sensitivity\n",
    "    print(\"\\n2. Cost Parameters Sensitivity:\")\n",
    "    print(\"-\" * 40)\n",
    "    for cost_param in ['C_w', 'C_i', 'C_o']:\n",
    "        for value in variations[cost_param]:\n",
    "            params = base_params.copy()\n",
    "            cost_params = params['cost_params'].copy()\n",
    "            cost_params[cost_param] = value\n",
    "            params['cost_params'] = cost_params\n",
    "            \n",
    "            daily_results, metrics_df = run_multiple_days_simulation(\n",
    "                num_datasets=100,\n",
    "                num_servers=params['num_servers'],\n",
    "                scheduled_interarrival=params['scheduled_interarrival'],\n",
    "                cost_params=cost_params,\n",
    "                service_time_mean=params['service_time_mean'],\n",
    "                base_seed=42\n",
    "            )\n",
    "            \n",
    "            avg_cost = metrics_df['total_cost'].mean()\n",
    "            \n",
    "            sensitivity_results[f'{cost_param}_{value}'] = {\n",
    "                'avg_cost': avg_cost,\n",
    "                'params': params\n",
    "            }\n",
    "            \n",
    "            print(f\"{cost_param}: {value} -> Avg Cost: ${avg_cost:.2f}\")\n",
    "    \n",
    "    return sensitivity_results\n",
    "\n",
    "def export_to_excel(all_results, sensitivity_results=None, raw_data_all=None, filename=None):\n",
    "    \"\"\"Export all simulation results to Excel files\"\"\"\n",
    "    if filename is None:\n",
    "        timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n",
    "        filename = f\"clinic_simulation_results_{timestamp}\"\n",
    "    \n",
    "    # Create output directory\n",
    "    os.makedirs('simulation_outputs', exist_ok=True)\n",
    "    \n",
    "    # Create main results workbook\n",
    "    with pd.ExcelWriter(f'simulation_outputs/{filename}_main.xlsx', engine='openpyxl') as writer:\n",
    "        \n",
    "        # Summary sheet\n",
    "        summary_data = []\n",
    "        for key, result in all_results.items():\n",
    "            avg_metrics = result['metrics_df'].mean()\n",
    "            summary_data.append({\n",
    "                'Configuration': key,\n",
    "                'Avg_Total_Cost': avg_metrics['total_cost'],\n",
    "                'Avg_Waiting_Time': avg_metrics['avg_waiting_time'],\n",
    "                'Avg_Idle_Time': avg_metrics['idle_time'],\n",
    "                'Avg_Overtime': avg_metrics['overtime'],\n",
    "                'Avg_Utilization': avg_metrics['utilization']\n",
    "            })\n",
    "        \n",
    "        summary_df = pd.DataFrame(summary_data)\n",
    "        summary_df.to_excel(writer, sheet_name='Summary', index=False)\n",
    "        \n",
    "        # Performance metrics for each configuration\n",
    "        for key, result in all_results.items():\n",
    "            metrics_df = result['metrics_df']\n",
    "            metrics_df.to_excel(writer, sheet_name=f'{key}_Metrics', index=False)\n",
    "            \n",
    "            # Sample patient data (first 5 days)\n",
    "            for day in range(min(5, len(result['daily_results']))):\n",
    "                day_df = result['daily_results'][day]\n",
    "                day_df.to_excel(writer, sheet_name=f'{key}_Day{day+1}', index=False)\n",
    "    \n",
    "    # Create sensitivity analysis workbook\n",
    "    if sensitivity_results:\n",
    "        with pd.ExcelWriter(f'simulation_outputs/{filename}_sensitivity.xlsx', engine='openpyxl') as writer:\n",
    "            sensitivity_data = []\n",
    "            for key, result in sensitivity_results.items():\n",
    "                sensitivity_data.append({\n",
    "                    'Parameter_Variation': key,\n",
    "                    'Average_Cost': result['avg_cost'],\n",
    "                    'Average_Wait_Time': result.get('avg_wait', None),\n",
    "                    'Parameters': str(result['params'])\n",
    "                })\n",
    "            \n",
    "            sensitivity_df = pd.DataFrame(sensitivity_data)\n",
    "            sensitivity_df.to_excel(writer, sheet_name='Sensitivity_Analysis', index=False)\n",
    "    \n",
    "    # Create raw data workbook\n",
    "    if raw_data_all:\n",
    "        with pd.ExcelWriter(f'simulation_outputs/{filename}_raw_data.xlsx', engine='openpyxl') as writer:\n",
    "            for config_key, config_data in raw_data_all.items():\n",
    "                # Create a sheet for each configuration\n",
    "                raw_data_list = []\n",
    "                \n",
    "                for day_data in config_data['raw_data']:\n",
    "                    day_num = day_data['day']\n",
    "                    day_seed = day_data['day_seed']\n",
    "                    \n",
    "                    # Extract uniform random numbers\n",
    "                    if 'U_interarrival_antithetic_set1' in day_data:\n",
    "                        # Antithetic case\n",
    "                        for i, (u_int1, u_int2, u_serv1, u_serv2) in enumerate(zip(\n",
    "                            day_data['U_interarrival_antithetic_set1'],\n",
    "                            day_data['U_interarrival_antithetic_set2'],\n",
    "                            day_data['U_service_antithetic_set1'],\n",
    "                            day_data['U_service_antithetic_set2']\n",
    "                        )):\n",
    "                            raw_data_list.append({\n",
    "                                'Configuration': config_key,\n",
    "                                'Day': day_num,\n",
    "                                'Day_Seed': day_seed,\n",
    "                                'Patient_Group': f'Set1_Patient{i+1}',\n",
    "                                'U_Interarrival': u_int1,\n",
    "                                'U_Service': u_serv1,\n",
    "                                'Interarrival_Time': day_data['interarrival_times_set1'][i],\n",
    "                                'Service_Time': day_data['service_times_set1'][i],\n",
    "                                'Method': 'Antithetic_Set1'\n",
    "                            })\n",
    "                            raw_data_list.append({\n",
    "                                'Configuration': config_key,\n",
    "                                'Day': day_num,\n",
    "                                'Day_Seed': day_seed,\n",
    "                                'Patient_Group': f'Set2_Patient{i+1}',\n",
    "                                'U_Interarrival': u_int2,\n",
    "                                'U_Service': u_serv2,\n",
    "                                'Interarrival_Time': day_data['interarrival_times_set2'][i],\n",
    "                                'Service_Time': day_data['service_times_set2'][i],\n",
    "                                'Method': 'Antithetic_Set2'\n",
    "                            })\n",
    "                    else:\n",
    "                        # Regular case\n",
    "                        for i, (u_int, u_serv) in enumerate(zip(\n",
    "                            day_data['U_interarrival'],\n",
    "                            day_data['U_service']\n",
    "                        )):\n",
    "                            raw_data_list.append({\n",
    "                                'Configuration': config_key,\n",
    "                                'Day': day_num,\n",
    "                                'Day_Seed': day_seed,\n",
    "                                'Patient': i+1,\n",
    "                                'U_Interarrival': u_int,\n",
    "                                'U_Service': u_serv,\n",
    "                                'Interarrival_Time': day_data['interarrival_times'][i],\n",
    "                                'Service_Time': day_data['service_times'][i],\n",
    "                                'Method': 'Standard'\n",
    "                            })\n",
    "                \n",
    "                raw_data_df = pd.DataFrame(raw_data_list)\n",
    "                raw_data_df.to_excel(writer, sheet_name=f'{config_key}_RawData', index=False)\n",
    "    \n",
    "    print(f\"\\nResults exported to:\")\n",
    "    print(f\"  Main results: simulation_outputs/{filename}_main.xlsx\")\n",
    "    if sensitivity_results:\n",
    "        print(f\"  Sensitivity analysis: simulation_outputs/{filename}_sensitivity.xlsx\")\n",
    "    if raw_data_all:\n",
    "        print(f\"  Raw data: simulation_outputs/{filename}_raw_data.xlsx\")\n",
    "    \n",
    "    return filename\n",
    "\n",
    "# MAIN EXECUTION\n",
    "def main():\n",
    "    print(\"CLINIC APPOINTMENT SYSTEM SIMULATION WITH SENSITIVITY ANALYSIS\")\n",
    "    print(\"=\" * 70)\n",
    "    \n",
    "    # Create output directory\n",
    "    os.makedirs('simulation_outputs', exist_ok=True)\n",
    "    \n",
    "    # 1. Show sample day with compact table\n",
    "    print(\"\\n1. SAMPLE DAY - COMPACT PATIENT TABLE\")\n",
    "    print(\"=\" * 70)\n",
    "    sim = ClinicSimulation(num_servers=1, scheduled_interarrival=20, service_time_mean=20, base_seed=42)\n",
    "    sample_day, raw_data = sim.simulate_single_day(use_antithetic=True, day_seed=42, store_raw_data=True)\n",
    "    sample_metrics = sim.calculate_performance_metrics(sample_day)\n",
    "\n",
    "    print(f\"Configuration: 1 Server, 20-min Interarrival, 20-min Mean Service Time\")\n",
    "    print(f\"Seed: 42\")\n",
    "    print(\"-\" * 70)\n",
    "\n",
    "    # Display compact table for all 24 patients\n",
    "    compact_df = sample_day.round(2)\n",
    "    print(\"\\nCOMPACT PATIENT SCHEDULE TABLE (All 24 Patients)\")\n",
    "    print(\"-\" * 70)\n",
    "    print(compact_df.to_string(index=False, formatters={\n",
    "        'Cust': '{:>2}'.format,\n",
    "        'Arrival': '{:>6.1f}'.format,\n",
    "        'Start': '{:>6.1f}'.format,\n",
    "        'Service': '{:>6.1f}'.format,\n",
    "        'End': '{:>6.1f}'.format,\n",
    "        'Wait': '{:>5.1f}'.format,\n",
    "        'Server': '{:>1}'.format\n",
    "    }))\n",
    "\n",
    "    print(\"\\n\" + \"-\" * 70)\n",
    "    print(\"PERFORMANCE SUMMARY FOR SAMPLE DAY\")\n",
    "    print(f\"Total Waiting Time: {sample_metrics['total_waiting_time']:.1f} min\")\n",
    "    print(f\"Average Waiting Time: {sample_metrics['avg_waiting_time']:.1f} min\")\n",
    "    print(f\"Doctor Idle Time: {sample_metrics['idle_time']:.1f} min\")\n",
    "    print(f\"Doctor Overtime: {sample_metrics['overtime']:.1f} min\")\n",
    "    print(f\"Last Service Ends: {sample_metrics['last_service_end']:.1f} min\")\n",
    "    print(f\"Total Cost: ${sample_metrics['total_cost']:.2f}\")\n",
    "\n",
    "    # 2. Run comprehensive experiment with raw data collection\n",
    "    print(\"\\n\\n2. COMPREHENSIVE EXPERIMENT WITH RAW DATA COLLECTION\")\n",
    "    print(\"=\" * 70)\n",
    "    print(\"Running simulation for 100 days per scenario (with raw data)...\")\n",
    "\n",
    "    all_results_with_raw = {}\n",
    "    scheduled_interarrivals = [15, 20, 25]\n",
    "    server_configs = [1, 2]\n",
    "    \n",
    "    for num_servers in server_configs:\n",
    "        for interarrival in scheduled_interarrivals:\n",
    "            key = f\"servers_{num_servers}_interarrival_{interarrival}\"\n",
    "            print(f\"Simulating: {key}...\")\n",
    "            \n",
    "            daily_results, metrics_df, raw_data_all_days = run_multiple_days_simulation(\n",
    "                num_datasets=100,  # Reduced for demonstration\n",
    "                num_servers=num_servers,\n",
    "                scheduled_interarrival=interarrival,\n",
    "                service_time_mean=20,\n",
    "                base_seed=42,\n",
    "                store_raw_data=True\n",
    "            )\n",
    "            \n",
    "            all_results_with_raw[key] = {\n",
    "                'daily_results': daily_results,\n",
    "                'metrics_df': metrics_df,\n",
    "                'raw_data': raw_data_all_days\n",
    "            }\n",
    "\n",
    "    # 3. Run sensitivity analysis\n",
    "    print(\"\\n\\n3. SENSITIVITY ANALYSIS\")\n",
    "    print(\"=\" * 70)\n",
    "    sensitivity_results = run_sensitivity_analysis()\n",
    "\n",
    "    # 4. Export all data to Excel files\n",
    "    print(\"\\n\\n4. DATA EXPORT TO EXCEL\")\n",
    "    print(\"=\" * 70)\n",
    "    \n",
    "    # Prepare all_results for export\n",
    "    all_results_for_export = {}\n",
    "    for key, result in all_results_with_raw.items():\n",
    "        all_results_for_export[key] = {\n",
    "            'daily_results': result['daily_results'],\n",
    "            'metrics_df': result['metrics_df']\n",
    "        }\n",
    "    \n",
    "    # Export to Excel\n",
    "    export_filename = export_to_excel(\n",
    "        all_results_for_export, \n",
    "        sensitivity_results, \n",
    "        all_results_with_raw\n",
    "    )\n",
    "\n",
    "    # 5. Display summary results\n",
    "    print(\"\\n\\n5. SUMMARY RESULTS\")\n",
    "    print(\"=\" * 70)\n",
    "    \n",
    "    summary_stats = []\n",
    "    for key, result in all_results_with_raw.items():\n",
    "        avg_metrics = result['metrics_df'].mean()\n",
    "        summary_stats.append({\n",
    "            'config': key,\n",
    "            'avg_total_cost': avg_metrics['total_cost'],\n",
    "            'avg_waiting_time': avg_metrics['avg_waiting_time'],\n",
    "            'avg_overtime': avg_metrics['overtime'],\n",
    "            'avg_utilization': avg_metrics['utilization']\n",
    "        })\n",
    "    \n",
    "    summary_df = pd.DataFrame(summary_stats)\n",
    "    print(summary_df.round(3).to_string(index=False))\n",
    "\n",
    "    # 6. Plotting results\n",
    "    print(\"\\n\\n6. PERFORMANCE GRAPHS\")\n",
    "    print(\"=\" * 70)\n",
    "\n",
    "    def plot_sensitivity(sensitivity_results):\n",
    "        fig, axes = plt.subplots(2, 2, figsize=(15, 12))\n",
    "        \n",
    "        # Service time sensitivity\n",
    "        service_data = {k: v for k, v in sensitivity_results.items() if k.startswith('service_mean')}\n",
    "        service_means = [int(k.split('_')[-1]) for k in service_data.keys()]\n",
    "        service_costs = [service_data[k]['avg_cost'] for k in service_data.keys()]\n",
    "        \n",
    "        axes[0,0].plot(service_means, service_costs, 'o-', linewidth=2, markersize=8)\n",
    "        axes[0,0].set_xlabel('Service Time Mean (min)')\n",
    "        axes[0,0].set_ylabel('Average Total Cost ($)')\n",
    "        axes[0,0].set_title('Sensitivity: Service Time vs Cost')\n",
    "        axes[0,0].grid(True, alpha=0.3)\n",
    "        \n",
    "        # Cost parameters sensitivity\n",
    "        cost_params = ['C_w', 'C_i', 'C_o']\n",
    "        for i, cost_param in enumerate(cost_params):\n",
    "            cost_data = {k: v for k, v in sensitivity_results.items() if k.startswith(cost_param)}\n",
    "            cost_values = [float(k.split('_')[-1]) for k in cost_data.keys()]\n",
    "            cost_costs = [cost_data[k]['avg_cost'] for k in cost_data.keys()]\n",
    "            \n",
    "            axes[0,1].plot(cost_values, cost_costs, 'o-', linewidth=2, markersize=8, label=cost_param)\n",
    "        \n",
    "        axes[0,1].set_xlabel('Cost Parameter Value')\n",
    "        axes[0,1].set_ylabel('Average Total Cost ($)')\n",
    "        axes[0,1].set_title('Sensitivity: Cost Parameters vs Cost')\n",
    "        axes[0,1].legend()\n",
    "        axes[0,1].grid(True, alpha=0.3)\n",
    "        \n",
    "        # Waiting time vs service time\n",
    "        service_wait = [service_data[k]['avg_wait'] for k in service_data.keys()]\n",
    "        axes[1,0].plot(service_means, service_wait, 's-', linewidth=2, markersize=8, color='red')\n",
    "        axes[1,0].set_xlabel('Service Time Mean (min)')\n",
    "        axes[1,0].set_ylabel('Average Waiting Time (min)')\n",
    "        axes[1,0].set_title('Sensitivity: Service Time vs Waiting Time')\n",
    "        axes[1,0].grid(True, alpha=0.3)\n",
    "        \n",
    "        plt.tight_layout()\n",
    "        plt.show()\n",
    "\n",
    "    plot_sensitivity(sensitivity_results)\n",
    "\n",
    "    print(\"\\n\" + \"=\" * 70)\n",
    "    print(\"SIMULATION COMPLETED SUCCESSFULLY!\")\n",
    "    print(\"All data has been exported to Excel files in the 'simulation_outputs' folder\")\n",
    "    print(\"\\nExcel Files Created:\")\n",
    "    print(\"1. _main.xlsx - Summary, performance metrics, and sample patient data\")\n",
    "    print(\"2. _sensitivity.xlsx - Sensitivity analysis results\") \n",
    "    print(\"3. _raw_data.xlsx - All uniform random numbers and generated values\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c2bc2b8c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CLINIC APPOINTMENT SYSTEM SIMULATION - OPTIMAL SCHEDULING ANALYSIS\n",
      "================================================================================\n",
      "Testing 5 interarrival times: 10, 15, 20, 25, 30 minutes\n",
      "With 1 and 2 server configurations\n",
      "Triangular distribution: (-10, 0, 20) minutes for patient punctuality\n",
      "================================================================================\n",
      "\n",
      "1. SAMPLE DAY - COMPACT PATIENT TABLE\n",
      "================================================================================\n",
      "Configuration: 1 Server, 20-min Interarrival, 20-min Mean Service Time\n",
      "Seed: 42\n",
      "--------------------------------------------------------------------------------\n",
      "\n",
      "COMPACT PATIENT SCHEDULE TABLE (All 24 Patients)\n",
      "--------------------------------------------------------------------------------\n",
      "Customer Sequence Arrival time Service staring time Service time Service ending time Waiting Time\n",
      "                1          0.6                  0.6         35.7                36.4          0.0\n",
      "                2         34.6                 36.4          4.8                41.1          1.8\n",
      "                3         47.3                 47.3          4.0                51.3          0.0\n",
      "                4         64.5                 64.5          4.0                68.5          0.0\n",
      "                5         76.8                 76.8          7.3                84.1          0.0\n",
      "                6         96.8                 96.8         14.9               111.7          0.0\n",
      "                7        114.2                114.2         11.3               125.5          0.0\n",
      "                8        151.0                151.0          6.9               157.9          0.0\n",
      "                9        164.5                164.5         18.9               183.5          0.0\n",
      "               10        186.8                186.8          3.0               189.8          0.0\n",
      "               11        192.5                192.5          6.9               199.4          0.0\n",
      "               12        235.8                235.8          9.1               244.9          0.0\n",
      "               13        245.0                245.0          3.7               248.7          0.0\n",
      "               14        253.8                253.8         31.0               284.8          0.0\n",
      "               15        279.0                284.8         34.1               318.9          5.9\n",
      "               16        301.1                318.9         33.9               352.9         17.9\n",
      "               17        330.3                352.9         23.8               376.6         22.5\n",
      "               18        350.3                376.6         12.9               389.6         26.3\n",
      "               19        374.1                389.6         16.8               406.3         15.4\n",
      "               20        376.3                406.3         24.7               431.0         30.0\n",
      "               21        401.0                431.0          9.8               440.8         30.0\n",
      "               22        419.4                440.8         39.4               480.2         21.5\n",
      "               23        456.5                480.2         24.6               504.8         23.7\n",
      "               24        453.0                504.8         20.1               524.9         51.8\n",
      "\n",
      "--------------------------------------------------------------------------------\n",
      "PERFORMANCE SUMMARY FOR SAMPLE DAY\n",
      "Total Waiting Time: 246.9 min\n",
      "Average Waiting Time: 10.3 min\n",
      "Doctor Idle Time: 123.3 min\n",
      "Doctor Overtime: 44.9 min\n",
      "Last Service Ends: 524.9 min\n",
      "Total Cost: $192.92\n",
      "\n",
      "\n",
      "2. COMPREHENSIVE EXPERIMENT - FINDING OPTIMAL SCHEDULE\n",
      "================================================================================\n",
      "Running simulation for 1000 days per scenario...\n",
      "Testing interarrival times: [10, 15, 20, 25, 30] minutes\n",
      "With server configurations: [1, 2] servers\n",
      "Simulating 1000 days: 1 server(s), 10 min interarrival...\n",
      "Simulating 1000 days: 1 server(s), 15 min interarrival...\n",
      "Simulating 1000 days: 1 server(s), 20 min interarrival...\n",
      "Simulating 1000 days: 1 server(s), 25 min interarrival...\n",
      "Simulating 1000 days: 1 server(s), 30 min interarrival...\n",
      "Simulating 1000 days: 2 server(s), 10 min interarrival...\n",
      "Simulating 1000 days: 2 server(s), 15 min interarrival...\n",
      "Simulating 1000 days: 2 server(s), 20 min interarrival...\n",
      "Simulating 1000 days: 2 server(s), 25 min interarrival...\n",
      "Simulating 1000 days: 2 server(s), 30 min interarrival...\n",
      "\n",
      "\n",
      "3. SENSITIVITY ANALYSIS\n",
      "================================================================================\n",
      "RUNNING SENSITIVITY ANALYSIS\n",
      "============================================================\n",
      "\n",
      "1. Service Time Sensitivity:\n",
      "----------------------------------------\n",
      "Service Mean: 15 min -> Avg Cost: $190.17, Avg Wait: 13.5 min\n",
      "Service Mean: 18 min -> Avg Cost: $202.55, Avg Wait: 27.3 min\n",
      "Service Mean: 20 min -> Avg Cost: $235.42, Avg Wait: 39.7 min\n",
      "Service Mean: 22 min -> Avg Cost: $289.63, Avg Wait: 54.5 min\n",
      "Service Mean: 25 min -> Avg Cost: $395.49, Avg Wait: 80.2 min\n",
      "\n",
      "2. Cost Parameters Sensitivity:\n",
      "----------------------------------------\n",
      "C_w: 0.05 -> Avg Cost: $187.80\n",
      "C_w: 0.1 -> Avg Cost: $235.42\n",
      "C_w: 0.2 -> Avg Cost: $330.65\n",
      "C_w: 0.5 -> Avg Cost: $616.35\n",
      "C_i: 0.5 -> Avg Cost: $201.15\n",
      "C_i: 1 -> Avg Cost: $235.42\n",
      "C_i: 2 -> Avg Cost: $303.97\n",
      "C_i: 5 -> Avg Cost: $509.62\n",
      "C_o: 0.5 -> Avg Cost: $199.60\n",
      "C_o: 1 -> Avg Cost: $235.42\n",
      "C_o: 2 -> Avg Cost: $307.06\n",
      "C_o: 5 -> Avg Cost: $521.97\n",
      "\n",
      "\n",
      "4. DATA EXPORT TO EXCEL\n",
      "================================================================================\n",
      "\n",
      "Results exported to:\n",
      "  Main results: simulation_outputs/clinic_simulation_results_20251016_150643_main.xlsx\n",
      "  Sensitivity analysis: simulation_outputs/clinic_simulation_results_20251016_150643_sensitivity.xlsx\n",
      "  Raw data: simulation_outputs/clinic_simulation_results_20251016_150643_raw_data.xlsx\n",
      "\n",
      "\n",
      "5. OPTIMAL SCHEDULE ANALYSIS\n",
      "================================================================================\n",
      "\n",
      "OPTIMAL CONFIGURATIONS:\n",
      "------------------------------------------------------------\n",
      "\n",
      "1 SERVER OPTIMAL:\n",
      "  Interarrival Time: 20 minutes\n",
      "  Average Daily Cost: $227.47\n",
      "  Average Waiting Time: 39.89 minutes\n",
      "  Average Overtime: 66.60 minutes\n",
      "  Utilization: 88.1%\n",
      "\n",
      "2 SERVER OPTIMAL:\n",
      "  Interarrival Time: 10 minutes\n",
      "  Average Daily Cost: $74.65\n",
      "  Average Waiting Time: 16.87 minutes\n",
      "  Average Overtime: 0.09 minutes\n",
      "  Utilization: 82.6%\n",
      "\n",
      "ALL CONFIGURATIONS COMPARISON:\n",
      "--------------------------------------------------------------------------------\n",
      " Servers  Interarrival  Avg Cost  Avg Wait  Avg Overtime  Utilization\n",
      "       1            10   330.613   121.051        29.437        0.979\n",
      "       1            15   238.841    73.789        37.705        0.953\n",
      "       1            20   227.467    39.894        66.600        0.881\n",
      "       1            25   344.611    21.391       147.111        0.767\n",
      "       1            30   526.215    12.404       248.697        0.660\n",
      "       2            10    74.653    16.866         0.092        0.826\n",
      "       2            15   113.013     4.419         0.276        0.630\n",
      "       2            20   196.121     1.448        14.172        0.490\n",
      "       2            25   383.520     0.569       123.250        0.399\n",
      "       2            30   582.158     0.267       236.853        0.336\n",
      "\n",
      "\n",
      "6. PERFORMANCE GRAPHS\n",
      "================================================================================\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x864 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "================================================================================\n",
      "SIMULATION COMPLETED SUCCESSFULLY!\n",
      "All data has been exported to Excel files in the 'simulation_outputs' folder\n",
      "\n",
      "Key Features:\n",
      "- Original triangular distribution: (-10, 0, 20) minutes\n",
      "- Arrival times can be negative (patients arriving before clinic opens)\n",
      "- Service start times are always non-negative\n",
      "- Full column names as originally specified\n",
      "- Tested 5 interarrival times (10, 15, 20, 25, 30 minutes)\n",
      "- Compared 1-server vs 2-server configurations\n",
      "- Identified optimal schedules for minimum cost\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import os\n",
    "from datetime import datetime\n",
    "from openpyxl import Workbook\n",
    "from openpyxl.utils.dataframe import dataframe_to_rows\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "class ClinicSimulation:\n",
    "    def __init__(self, num_servers=1, scheduled_interarrival=20, planning_horizon=480, \n",
    "                 patients_per_day=24, queue_capacity=20, cost_params=None,\n",
    "                 service_time_mean=20, base_seed=42):\n",
    "        self.num_servers = num_servers\n",
    "        self.scheduled_interarrival = scheduled_interarrival\n",
    "        self.planning_horizon = planning_horizon\n",
    "        self.patients_per_day = patients_per_day\n",
    "        self.queue_capacity = queue_capacity\n",
    "        self.base_seed = base_seed\n",
    "        \n",
    "        self.cost_params = cost_params or {'C_w': 0.1, 'C_i': 1, 'C_o': 1}\n",
    "        # Original triangular distribution: patients can be 10min early to 20min late\n",
    "        self.triangular_min = -10\n",
    "        self.triangular_mode = 0\n",
    "        self.triangular_max = 20\n",
    "        self.service_time_mean = service_time_mean\n",
    "    \n",
    "    def generate_interarrival_time(self, U):\n",
    "        F_mode = (self.triangular_mode - self.triangular_min) / (self.triangular_max - self.triangular_min)\n",
    "        triangular_component = np.where(\n",
    "            U <= F_mode,\n",
    "            self.triangular_min + np.sqrt(U * (self.triangular_max - self.triangular_min) * (self.triangular_mode - self.triangular_min)),\n",
    "            self.triangular_max - np.sqrt((1 - U) * (self.triangular_max - self.triangular_min) * (self.triangular_max - self.triangular_mode))\n",
    "        )\n",
    "        return self.scheduled_interarrival + triangular_component\n",
    "    \n",
    "    def generate_service_time(self, U):\n",
    "        return -np.log(1 - U) * self.service_time_mean\n",
    "    \n",
    "    def simulate_single_day(self, use_antithetic=False, day_seed=None, store_raw_data=False):\n",
    "        if day_seed is not None:\n",
    "            np.random.seed(day_seed)\n",
    "        else:\n",
    "            np.random.seed(self.base_seed)\n",
    "        \n",
    "        n_patients = self.patients_per_day\n",
    "        raw_data = {}\n",
    "        \n",
    "        if use_antithetic:\n",
    "            half_n = n_patients // 2\n",
    "            U_interarrival = np.random.uniform(0, 1, half_n)\n",
    "            U_service = np.random.uniform(0, 1, half_n)\n",
    "            \n",
    "            if store_raw_data:\n",
    "                raw_data['U_interarrival_antithetic_set1'] = U_interarrival.tolist()\n",
    "                raw_data['U_service_antithetic_set1'] = U_service.tolist()\n",
    "                raw_data['U_interarrival_antithetic_set2'] = (1 - U_interarrival).tolist()\n",
    "                raw_data['U_service_antithetic_set2'] = (1 - U_service).tolist()\n",
    "            \n",
    "            interarrival_times1 = np.array([self.generate_interarrival_time(u) for u in U_interarrival])\n",
    "            interarrival_times2 = np.array([self.generate_interarrival_time(1-u) for u in U_interarrival])\n",
    "            service_times1 = np.array([self.generate_service_time(u) for u in U_service])\n",
    "            service_times2 = np.array([self.generate_service_time(1-u) for u in U_service])\n",
    "            \n",
    "            interarrival_times = np.concatenate([interarrival_times1, interarrival_times2])\n",
    "            service_times = np.concatenate([service_times1, service_times2])\n",
    "            \n",
    "            if store_raw_data:\n",
    "                raw_data['interarrival_times_set1'] = interarrival_times1.tolist()\n",
    "                raw_data['interarrival_times_set2'] = interarrival_times2.tolist()\n",
    "                raw_data['service_times_set1'] = service_times1.tolist()\n",
    "                raw_data['service_times_set2'] = service_times2.tolist()\n",
    "        else:\n",
    "            U_interarrival = np.random.uniform(0, 1, n_patients)\n",
    "            U_service = np.random.uniform(0, 1, n_patients)\n",
    "            \n",
    "            if store_raw_data:\n",
    "                raw_data['U_interarrival'] = U_interarrival.tolist()\n",
    "                raw_data['U_service'] = U_service.tolist()\n",
    "            \n",
    "            interarrival_times = np.array([self.generate_interarrival_time(u) for u in U_interarrival])\n",
    "            service_times = np.array([self.generate_service_time(u) for u in U_service])\n",
    "            \n",
    "            if store_raw_data:\n",
    "                raw_data['interarrival_times'] = interarrival_times.tolist()\n",
    "                raw_data['service_times'] = service_times.tolist()\n",
    "        \n",
    "        # Calculate scheduled arrival times (starting from time 0)\n",
    "        scheduled_arrivals = np.arange(0, n_patients * self.scheduled_interarrival, self.scheduled_interarrival)\n",
    "        \n",
    "        # Calculate actual arrival times (scheduled time + punctuality variation)\n",
    "        # Using original triangular distribution: patients can arrive 10min early to 20min late\n",
    "        lateness = interarrival_times - self.scheduled_interarrival\n",
    "        actual_arrival_times = scheduled_arrivals + lateness\n",
    "        \n",
    "        # Allow negative arrival times (patients arriving before clinic opens)\n",
    "        # But service can only start at or after time 0\n",
    "        service_start_times = np.zeros(n_patients)\n",
    "        service_end_times = np.zeros(n_patients)\n",
    "        waiting_times = np.zeros(n_patients)\n",
    "        server_assignment = np.zeros(n_patients, dtype=int)\n",
    "        \n",
    "        if self.num_servers == 1:\n",
    "            for i in range(n_patients):\n",
    "                if i == 0:\n",
    "                    # First patient: service starts at max(0, arrival_time)\n",
    "                    service_start_times[i] = max(0, actual_arrival_times[i])\n",
    "                else:\n",
    "                    service_start_times[i] = max(actual_arrival_times[i], service_end_times[i-1])\n",
    "                service_end_times[i] = service_start_times[i] + service_times[i]\n",
    "                waiting_times[i] = max(0, service_start_times[i] - actual_arrival_times[i])\n",
    "                server_assignment[i] = 0\n",
    "        else:\n",
    "            server_end_times = [0] * self.num_servers  # All servers start available at time 0\n",
    "            for i in range(n_patients):\n",
    "                next_available_time = min(server_end_times)\n",
    "                server_index = server_end_times.index(next_available_time)\n",
    "                service_start_times[i] = max(actual_arrival_times[i], next_available_time)\n",
    "                service_end_times[i] = service_start_times[i] + service_times[i]\n",
    "                waiting_times[i] = max(0, service_start_times[i] - actual_arrival_times[i])\n",
    "                server_assignment[i] = server_index\n",
    "                server_end_times[server_index] = service_end_times[i]\n",
    "        \n",
    "        # Use full column names as originally specified\n",
    "        results_df = pd.DataFrame({\n",
    "            'Customer Sequence': range(1, n_patients + 1),\n",
    "            'Arrival time': actual_arrival_times,\n",
    "            'Service staring time': service_start_times,\n",
    "            'Service time': service_times,\n",
    "            'Service ending time': service_end_times,\n",
    "            'Waiting Time': waiting_times\n",
    "        })\n",
    "        \n",
    "        if store_raw_data:\n",
    "            raw_data['scheduled_arrivals'] = scheduled_arrivals.tolist()\n",
    "            raw_data['actual_arrival_times'] = actual_arrival_times.tolist()\n",
    "            raw_data['lateness'] = lateness.tolist()\n",
    "            raw_data['service_start_times'] = service_start_times.tolist()\n",
    "            raw_data['service_end_times'] = service_end_times.tolist()\n",
    "            raw_data['waiting_times'] = waiting_times.tolist()\n",
    "            raw_data['server_assignment'] = server_assignment.tolist()\n",
    "            raw_data['day_seed'] = day_seed\n",
    "            return results_df, raw_data\n",
    "        \n",
    "        return results_df\n",
    "    \n",
    "    def calculate_performance_metrics(self, results_df):\n",
    "        last_service_end = results_df['Service ending time'].max()\n",
    "        overtime = max(0, last_service_end - self.planning_horizon)\n",
    "        \n",
    "        idle_time = 0\n",
    "        if self.num_servers == 1:\n",
    "            for i in range(1, len(results_df)):\n",
    "                idle_gap = results_df.loc[i, 'Service staring time'] - results_df.loc[i-1, 'Service ending time']\n",
    "                idle_time += max(0, idle_gap)\n",
    "            # Initial idle time before first patient starts\n",
    "            idle_time += max(0, results_df.loc[0, 'Service staring time'] - 0)\n",
    "        else:\n",
    "            server_last_end = {server: 0 for server in range(self.num_servers)}\n",
    "            for _, patient in results_df.iterrows():\n",
    "                server = patient.get('Server', 0)  # Handle case where Server column might not exist\n",
    "                start_time = patient['Service staring time']\n",
    "                idle_gap = start_time - server_last_end[server]\n",
    "                idle_time += max(0, idle_gap)\n",
    "                server_last_end[server] = patient['Service ending time']\n",
    "        \n",
    "        total_waiting_time = results_df['Waiting Time'].sum()\n",
    "        total_cost = (total_waiting_time * self.cost_params['C_w'] + \n",
    "                     idle_time * self.cost_params['C_i'] + \n",
    "                     overtime * self.cost_params['C_o'])\n",
    "        \n",
    "        performance_metrics = {\n",
    "            'total_waiting_time': total_waiting_time,\n",
    "            'idle_time': idle_time,\n",
    "            'overtime': overtime,\n",
    "            'total_cost': total_cost,\n",
    "            'last_service_end': last_service_end,\n",
    "            'avg_waiting_time': total_waiting_time / len(results_df),\n",
    "            'utilization': (results_df['Service time'].sum() / \n",
    "                          (self.num_servers * last_service_end)) if last_service_end > 0 else 0\n",
    "        }\n",
    "        \n",
    "        return performance_metrics\n",
    "\n",
    "def run_multiple_days_simulation(num_datasets=1000, num_servers=1, scheduled_interarrival=20, \n",
    "                               cost_params=None, use_antithetic=True, service_time_mean=20,\n",
    "                               base_seed=42, store_raw_data=False):\n",
    "    \n",
    "    sim = ClinicSimulation(\n",
    "        num_servers=num_servers, \n",
    "        scheduled_interarrival=scheduled_interarrival,\n",
    "        cost_params=cost_params,\n",
    "        service_time_mean=service_time_mean,\n",
    "        base_seed=base_seed\n",
    "    )\n",
    "    \n",
    "    daily_results = []\n",
    "    daily_metrics = []\n",
    "    raw_data_all_days = []\n",
    "    \n",
    "    for day in range(num_datasets):\n",
    "        day_seed = base_seed + day\n",
    "        \n",
    "        if store_raw_data:\n",
    "            day_results, day_raw_data = sim.simulate_single_day(\n",
    "                use_antithetic=use_antithetic, \n",
    "                day_seed=day_seed,\n",
    "                store_raw_data=True\n",
    "            )\n",
    "            day_raw_data['day'] = day + 1\n",
    "            day_raw_data['day_seed'] = day_seed\n",
    "            raw_data_all_days.append(day_raw_data)\n",
    "        else:\n",
    "            day_results = sim.simulate_single_day(\n",
    "                use_antithetic=use_antithetic, \n",
    "                day_seed=day_seed,\n",
    "                store_raw_data=False\n",
    "            )\n",
    "        \n",
    "        metrics = sim.calculate_performance_metrics(day_results)\n",
    "        \n",
    "        daily_results.append(day_results)\n",
    "        daily_metrics.append({\n",
    "            'day': day + 1,\n",
    "            'day_seed': day_seed,\n",
    "            'total_waiting_time': metrics['total_waiting_time'],\n",
    "            'idle_time': metrics['idle_time'],\n",
    "            'overtime': metrics['overtime'],\n",
    "            'total_cost': metrics['total_cost'],\n",
    "            'avg_waiting_time': metrics['avg_waiting_time'],\n",
    "            'utilization': metrics['utilization'],\n",
    "            'service_time_mean': service_time_mean\n",
    "        })\n",
    "    \n",
    "    metrics_df = pd.DataFrame(daily_metrics)\n",
    "    \n",
    "    if store_raw_data:\n",
    "        return daily_results, metrics_df, raw_data_all_days\n",
    "    else:\n",
    "        return daily_results, metrics_df\n",
    "\n",
    "def run_comprehensive_experiment(service_time_mean=20, base_seed=42):\n",
    "    cost_params = {'C_w': 0.1, 'C_i': 1, 'C_o': 1}\n",
    "    \n",
    "    # Exactly 5 interarrival times between 10-30 minutes as requested\n",
    "    scheduled_interarrivals = [10, 15, 20, 25, 30]\n",
    "    server_configs = [1, 2]\n",
    "    num_datasets = 1000\n",
    "    \n",
    "    all_results_with_raw = {}\n",
    "    \n",
    "    for num_servers in server_configs:\n",
    "        for interarrival in scheduled_interarrivals:\n",
    "            key = f\"servers_{num_servers}_interarrival_{interarrival}\"\n",
    "            print(f\"Simulating {num_datasets} days: {num_servers} server(s), {interarrival} min interarrival...\")\n",
    "            \n",
    "            daily_results, metrics_df, raw_data_all_days = run_multiple_days_simulation(\n",
    "                num_datasets=num_datasets,\n",
    "                num_servers=num_servers,\n",
    "                scheduled_interarrival=interarrival,\n",
    "                cost_params=cost_params,\n",
    "                service_time_mean=service_time_mean,\n",
    "                base_seed=base_seed,\n",
    "                store_raw_data=True\n",
    "            )\n",
    "            \n",
    "            all_results_with_raw[key] = {\n",
    "                'daily_results': daily_results,\n",
    "                'metrics_df': metrics_df,\n",
    "                'raw_data': raw_data_all_days\n",
    "            }\n",
    "    \n",
    "    return all_results_with_raw\n",
    "\n",
    "def run_sensitivity_analysis(base_params=None, variations=None):\n",
    "    \"\"\"Run sensitivity analysis by varying key parameters\"\"\"\n",
    "    if base_params is None:\n",
    "        base_params = {\n",
    "            'num_servers': 1,\n",
    "            'scheduled_interarrival': 20,\n",
    "            'service_time_mean': 20,\n",
    "            'cost_params': {'C_w': 0.1, 'C_i': 1, 'C_o': 1}\n",
    "        }\n",
    "    \n",
    "    if variations is None:\n",
    "        variations = {\n",
    "            'service_time_mean': [15, 18, 20, 22, 25],\n",
    "            'scheduled_interarrival': [10, 15, 20, 25, 30],\n",
    "            'C_w': [0.05, 0.1, 0.2, 0.5],\n",
    "            'C_i': [0.5, 1, 2, 5],\n",
    "            'C_o': [0.5, 1, 2, 5]\n",
    "        }\n",
    "    \n",
    "    sensitivity_results = {}\n",
    "    \n",
    "    print(\"RUNNING SENSITIVITY ANALYSIS\")\n",
    "    print(\"=\" * 60)\n",
    "    \n",
    "    # Service time sensitivity\n",
    "    print(\"\\n1. Service Time Sensitivity:\")\n",
    "    print(\"-\" * 40)\n",
    "    for service_mean in variations['service_time_mean']:\n",
    "        params = base_params.copy()\n",
    "        params['service_time_mean'] = service_mean\n",
    "        \n",
    "        daily_results, metrics_df = run_multiple_days_simulation(\n",
    "            num_datasets=100,\n",
    "            num_servers=params['num_servers'],\n",
    "            scheduled_interarrival=params['scheduled_interarrival'],\n",
    "            cost_params=params['cost_params'],\n",
    "            service_time_mean=service_mean,\n",
    "            base_seed=42\n",
    "        )\n",
    "        \n",
    "        avg_cost = metrics_df['total_cost'].mean()\n",
    "        avg_wait = metrics_df['avg_waiting_time'].mean()\n",
    "        \n",
    "        sensitivity_results[f'service_mean_{service_mean}'] = {\n",
    "            'avg_cost': avg_cost,\n",
    "            'avg_wait': avg_wait,\n",
    "            'params': params\n",
    "        }\n",
    "        \n",
    "        print(f\"Service Mean: {service_mean} min -> Avg Cost: ${avg_cost:.2f}, Avg Wait: {avg_wait:.1f} min\")\n",
    "    \n",
    "    # Cost parameters sensitivity\n",
    "    print(\"\\n2. Cost Parameters Sensitivity:\")\n",
    "    print(\"-\" * 40)\n",
    "    for cost_param in ['C_w', 'C_i', 'C_o']:\n",
    "        for value in variations[cost_param]:\n",
    "            params = base_params.copy()\n",
    "            cost_params = params['cost_params'].copy()\n",
    "            cost_params[cost_param] = value\n",
    "            params['cost_params'] = cost_params\n",
    "            \n",
    "            daily_results, metrics_df = run_multiple_days_simulation(\n",
    "                num_datasets=100,\n",
    "                num_servers=params['num_servers'],\n",
    "                scheduled_interarrival=params['scheduled_interarrival'],\n",
    "                cost_params=cost_params,\n",
    "                service_time_mean=params['service_time_mean'],\n",
    "                base_seed=42\n",
    "            )\n",
    "            \n",
    "            avg_cost = metrics_df['total_cost'].mean()\n",
    "            \n",
    "            sensitivity_results[f'{cost_param}_{value}'] = {\n",
    "                'avg_cost': avg_cost,\n",
    "                'params': params\n",
    "            }\n",
    "            \n",
    "            print(f\"{cost_param}: {value} -> Avg Cost: ${avg_cost:.2f}\")\n",
    "    \n",
    "    return sensitivity_results\n",
    "\n",
    "def export_to_excel(all_results, sensitivity_results=None, raw_data_all=None, filename=None):\n",
    "    \"\"\"Export all simulation results to Excel files\"\"\"\n",
    "    if filename is None:\n",
    "        timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n",
    "        filename = f\"clinic_simulation_results_{timestamp}\"\n",
    "    \n",
    "    # Create output directory\n",
    "    os.makedirs('simulation_outputs', exist_ok=True)\n",
    "    \n",
    "    # Create main results workbook\n",
    "    with pd.ExcelWriter(f'simulation_outputs/{filename}_main.xlsx', engine='openpyxl') as writer:\n",
    "        \n",
    "        # Summary sheet\n",
    "        summary_data = []\n",
    "        for key, result in all_results.items():\n",
    "            avg_metrics = result['metrics_df'].mean()\n",
    "            summary_data.append({\n",
    "                'Configuration': key,\n",
    "                'Scheduled Interarrival': int(key.split('_')[-1]),\n",
    "                'Number of Servers': int(key.split('_')[1]),\n",
    "                'Average Total Cost': avg_metrics['total_cost'],\n",
    "                'Std Total Cost': result['metrics_df']['total_cost'].std(),\n",
    "                'Average Waiting Time': avg_metrics['avg_waiting_time'],\n",
    "                'Average Idle Time': avg_metrics['idle_time'],\n",
    "                'Average Overtime': avg_metrics['overtime'],\n",
    "                'Average Utilization': avg_metrics['utilization']\n",
    "            })\n",
    "        \n",
    "        summary_df = pd.DataFrame(summary_data)\n",
    "        summary_df.to_excel(writer, sheet_name='Summary', index=False)\n",
    "        \n",
    "        # Performance metrics for each configuration\n",
    "        for key, result in all_results.items():\n",
    "            metrics_df = result['metrics_df']\n",
    "            # Rename columns for better readability\n",
    "            metrics_df_display = metrics_df.rename(columns={\n",
    "                'total_waiting_time': 'Total Waiting Time',\n",
    "                'idle_time': 'Doctor Idle Time', \n",
    "                'overtime': 'Doctor Overtime',\n",
    "                'total_cost': 'Total Cost',\n",
    "                'avg_waiting_time': 'Average Waiting Time',\n",
    "                'utilization': 'Utilization Rate'\n",
    "            })\n",
    "            metrics_df_display.to_excel(writer, sheet_name=f'{key}_Metrics', index=False)\n",
    "            \n",
    "            # Sample patient data (first 3 days)\n",
    "            for day in range(min(3, len(result['daily_results']))):\n",
    "                day_df = result['daily_results'][day]\n",
    "                day_df.to_excel(writer, sheet_name=f'{key}_Day{day+1}', index=False)\n",
    "    \n",
    "    # Create sensitivity analysis workbook\n",
    "    if sensitivity_results:\n",
    "        with pd.ExcelWriter(f'simulation_outputs/{filename}_sensitivity.xlsx', engine='openpyxl') as writer:\n",
    "            sensitivity_data = []\n",
    "            for key, result in sensitivity_results.items():\n",
    "                sensitivity_data.append({\n",
    "                    'Parameter Variation': key,\n",
    "                    'Average Cost': result['avg_cost'],\n",
    "                    'Average Wait Time': result.get('avg_wait', None),\n",
    "                    'Parameters': str(result['params'])\n",
    "                })\n",
    "            \n",
    "            sensitivity_df = pd.DataFrame(sensitivity_data)\n",
    "            sensitivity_df.to_excel(writer, sheet_name='Sensitivity Analysis', index=False)\n",
    "    \n",
    "    # Create raw data workbook\n",
    "    if raw_data_all:\n",
    "        with pd.ExcelWriter(f'simulation_outputs/{filename}_raw_data.xlsx', engine='openpyxl') as writer:\n",
    "            for config_key, config_data in raw_data_all.items():\n",
    "                # Create a sheet for each configuration\n",
    "                raw_data_list = []\n",
    "                \n",
    "                for day_data in config_data['raw_data']:\n",
    "                    day_num = day_data['day']\n",
    "                    day_seed = day_data['day_seed']\n",
    "                    \n",
    "                    # Extract uniform random numbers\n",
    "                    if 'U_interarrival_antithetic_set1' in day_data:\n",
    "                        # Antithetic case\n",
    "                        for i, (u_int1, u_int2, u_serv1, u_serv2) in enumerate(zip(\n",
    "                            day_data['U_interarrival_antithetic_set1'],\n",
    "                            day_data['U_interarrival_antithetic_set2'],\n",
    "                            day_data['U_service_antithetic_set1'],\n",
    "                            day_data['U_service_antithetic_set2']\n",
    "                        )):\n",
    "                            raw_data_list.append({\n",
    "                                'Configuration': config_key,\n",
    "                                'Day': day_num,\n",
    "                                'Day Seed': day_seed,\n",
    "                                'Patient Group': f'Set1_Patient{i+1}',\n",
    "                                'U Interarrival': u_int1,\n",
    "                                'U Service': u_serv1,\n",
    "                                'Interarrival Time': day_data['interarrival_times_set1'][i],\n",
    "                                'Service Time': day_data['service_times_set1'][i],\n",
    "                                'Method': 'Antithetic_Set1'\n",
    "                            })\n",
    "                            raw_data_list.append({\n",
    "                                'Configuration': config_key,\n",
    "                                'Day': day_num,\n",
    "                                'Day Seed': day_seed,\n",
    "                                'Patient Group': f'Set2_Patient{i+1}',\n",
    "                                'U Interarrival': u_int2,\n",
    "                                'U Service': u_serv2,\n",
    "                                'Interarrival Time': day_data['interarrival_times_set2'][i],\n",
    "                                'Service Time': day_data['service_times_set2'][i],\n",
    "                                'Method': 'Antithetic_Set2'\n",
    "                            })\n",
    "                    else:\n",
    "                        # Regular case\n",
    "                        for i, (u_int, u_serv) in enumerate(zip(\n",
    "                            day_data['U_interarrival'],\n",
    "                            day_data['U_service']\n",
    "                        )):\n",
    "                            raw_data_list.append({\n",
    "                                'Configuration': config_key,\n",
    "                                'Day': day_num,\n",
    "                                'Day Seed': day_seed,\n",
    "                                'Patient': i+1,\n",
    "                                'U Interarrival': u_int,\n",
    "                                'U Service': u_serv,\n",
    "                                'Interarrival Time': day_data['interarrival_times'][i],\n",
    "                                'Service Time': day_data['service_times'][i],\n",
    "                                'Method': 'Standard'\n",
    "                            })\n",
    "                \n",
    "                raw_data_df = pd.DataFrame(raw_data_list)\n",
    "                raw_data_df.to_excel(writer, sheet_name=f'{config_key}_RawData', index=False)\n",
    "    \n",
    "    print(f\"\\nResults exported to:\")\n",
    "    print(f\"  Main results: simulation_outputs/{filename}_main.xlsx\")\n",
    "    if sensitivity_results:\n",
    "        print(f\"  Sensitivity analysis: simulation_outputs/{filename}_sensitivity.xlsx\")\n",
    "    if raw_data_all:\n",
    "        print(f\"  Raw data: simulation_outputs/{filename}_raw_data.xlsx\")\n",
    "    \n",
    "    return filename\n",
    "\n",
    "# MAIN EXECUTION\n",
    "def main():\n",
    "    print(\"CLINIC APPOINTMENT SYSTEM SIMULATION - OPTIMAL SCHEDULING ANALYSIS\")\n",
    "    print(\"=\" * 80)\n",
    "    print(\"Testing 5 interarrival times: 10, 15, 20, 25, 30 minutes\")\n",
    "    print(\"With 1 and 2 server configurations\")\n",
    "    print(\"Triangular distribution: (-10, 0, 20) minutes for patient punctuality\")\n",
    "    print(\"=\" * 80)\n",
    "    \n",
    "    # Create output directory\n",
    "    os.makedirs('simulation_outputs', exist_ok=True)\n",
    "    \n",
    "    # 1. Show sample day with compact table\n",
    "    print(\"\\n1. SAMPLE DAY - COMPACT PATIENT TABLE\")\n",
    "    print(\"=\" * 80)\n",
    "    sim = ClinicSimulation(num_servers=1, scheduled_interarrival=20, service_time_mean=20, base_seed=42)\n",
    "    sample_day, raw_data = sim.simulate_single_day(use_antithetic=True, day_seed=42, store_raw_data=True)\n",
    "    sample_metrics = sim.calculate_performance_metrics(sample_day)\n",
    "\n",
    "    print(f\"Configuration: 1 Server, 20-min Interarrival, 20-min Mean Service Time\")\n",
    "    print(f\"Seed: 42\")\n",
    "    print(\"-\" * 80)\n",
    "\n",
    "    # Display compact table for all 24 patients with full column names\n",
    "    compact_df = sample_day.round(2)\n",
    "    print(\"\\nCOMPACT PATIENT SCHEDULE TABLE (All 24 Patients)\")\n",
    "    print(\"-\" * 80)\n",
    "    print(compact_df.to_string(index=False, formatters={\n",
    "        'Customer Sequence': '{:>2}'.format,\n",
    "        'Arrival time': '{:>8.1f}'.format,\n",
    "        'Service staring time': '{:>8.1f}'.format,\n",
    "        'Service time': '{:>6.1f}'.format,\n",
    "        'Service ending time': '{:>8.1f}'.format,\n",
    "        'Waiting Time': '{:>6.1f}'.format\n",
    "    }))\n",
    "\n",
    "    print(\"\\n\" + \"-\" * 80)\n",
    "    print(\"PERFORMANCE SUMMARY FOR SAMPLE DAY\")\n",
    "    print(f\"Total Waiting Time: {sample_metrics['total_waiting_time']:.1f} min\")\n",
    "    print(f\"Average Waiting Time: {sample_metrics['avg_waiting_time']:.1f} min\")\n",
    "    print(f\"Doctor Idle Time: {sample_metrics['idle_time']:.1f} min\")\n",
    "    print(f\"Doctor Overtime: {sample_metrics['overtime']:.1f} min\")\n",
    "    print(f\"Last Service Ends: {sample_metrics['last_service_end']:.1f} min\")\n",
    "    print(f\"Total Cost: ${sample_metrics['total_cost']:.2f}\")\n",
    "\n",
    "    # 2. Run comprehensive experiment with all 5 interarrival times\n",
    "    print(\"\\n\\n2. COMPREHENSIVE EXPERIMENT - FINDING OPTIMAL SCHEDULE\")\n",
    "    print(\"=\" * 80)\n",
    "    print(\"Running simulation for 1000 days per scenario...\")\n",
    "    print(\"Testing interarrival times: [10, 15, 20, 25, 30] minutes\")\n",
    "    print(\"With server configurations: [1, 2] servers\")\n",
    "\n",
    "    all_results_with_raw = run_comprehensive_experiment(service_time_mean=20, base_seed=42)\n",
    "\n",
    "    # 3. Run sensitivity analysis\n",
    "    print(\"\\n\\n3. SENSITIVITY ANALYSIS\")\n",
    "    print(\"=\" * 80)\n",
    "    sensitivity_results = run_sensitivity_analysis()\n",
    "\n",
    "    # 4. Export all data to Excel files\n",
    "    print(\"\\n\\n4. DATA EXPORT TO EXCEL\")\n",
    "    print(\"=\" * 80)\n",
    "    \n",
    "    # Prepare all_results for export\n",
    "    all_results_for_export = {}\n",
    "    for key, result in all_results_with_raw.items():\n",
    "        all_results_for_export[key] = {\n",
    "            'daily_results': result['daily_results'],\n",
    "            'metrics_df': result['metrics_df']\n",
    "        }\n",
    "    \n",
    "    # Export to Excel\n",
    "    export_filename = export_to_excel(\n",
    "        all_results_for_export, \n",
    "        sensitivity_results, \n",
    "        all_results_with_raw\n",
    "    )\n",
    "\n",
    "    # 5. Display optimal configurations\n",
    "    print(\"\\n\\n5. OPTIMAL SCHEDULE ANALYSIS\")\n",
    "    print(\"=\" * 80)\n",
    "    \n",
    "    summary_stats = []\n",
    "    for key, result in all_results_with_raw.items():\n",
    "        avg_metrics = result['metrics_df'].mean()\n",
    "        servers = int(key.split('_')[1])\n",
    "        interarrival = int(key.split('_')[-1])\n",
    "        \n",
    "        summary_stats.append({\n",
    "            'servers': servers,\n",
    "            'interarrival': interarrival,\n",
    "            'config': key,\n",
    "            'avg_total_cost': avg_metrics['total_cost'],\n",
    "            'avg_waiting_time': avg_metrics['avg_waiting_time'],\n",
    "            'avg_overtime': avg_metrics['overtime'],\n",
    "            'avg_utilization': avg_metrics['utilization']\n",
    "        })\n",
    "    \n",
    "    summary_df = pd.DataFrame(summary_stats)\n",
    "    \n",
    "    # Find optimal configurations\n",
    "    print(\"\\nOPTIMAL CONFIGURATIONS:\")\n",
    "    print(\"-\" * 60)\n",
    "    \n",
    "    for servers in [1, 2]:\n",
    "        server_data = summary_df[summary_df['servers'] == servers]\n",
    "        optimal_idx = server_data['avg_total_cost'].idxmin()\n",
    "        optimal = server_data.loc[optimal_idx]\n",
    "        \n",
    "        print(f\"\\n{servers} SERVER OPTIMAL:\")\n",
    "        print(f\"  Interarrival Time: {optimal['interarrival']} minutes\")\n",
    "        print(f\"  Average Daily Cost: ${optimal['avg_total_cost']:.2f}\")\n",
    "        print(f\"  Average Waiting Time: {optimal['avg_waiting_time']:.2f} minutes\")\n",
    "        print(f\"  Average Overtime: {optimal['avg_overtime']:.2f} minutes\")\n",
    "        print(f\"  Utilization: {optimal['avg_utilization']:.1%}\")\n",
    "    \n",
    "    # Display all results comparison\n",
    "    print(f\"\\nALL CONFIGURATIONS COMPARISON:\")\n",
    "    print(\"-\" * 80)\n",
    "    display_cols = ['servers', 'interarrival', 'avg_total_cost', 'avg_waiting_time', 'avg_overtime', 'avg_utilization']\n",
    "    display_df = summary_df[display_cols].round(3)\n",
    "    display_df.columns = ['Servers', 'Interarrival', 'Avg Cost', 'Avg Wait', 'Avg Overtime', 'Utilization']\n",
    "    print(display_df.to_string(index=False))\n",
    "\n",
    "    # 6. Plotting results\n",
    "    print(\"\\n\\n6. PERFORMANCE GRAPHS\")\n",
    "    print(\"=\" * 80)\n",
    "\n",
    "    def plot_comparison(summary_df):\n",
    "        fig, axes = plt.subplots(2, 2, figsize=(15, 12))\n",
    "        \n",
    "        # Plot 1: Total Cost vs Interarrival Time\n",
    "        for servers in summary_df['servers'].unique():\n",
    "            subset = summary_df[summary_df['servers'] == servers]\n",
    "            axes[0,0].plot(subset['interarrival'], subset['avg_total_cost'], \n",
    "                          marker='o', linewidth=2, markersize=8, label=f'{servers} Server(s)')\n",
    "        axes[0,0].set_xlabel('Scheduled Interarrival Time (min)')\n",
    "        axes[0,0].set_ylabel('Average Total Cost ($)')\n",
    "        axes[0,0].set_title('Total Cost vs Interarrival Time\\n(Optimal Schedule Analysis)')\n",
    "        axes[0,0].legend()\n",
    "        axes[0,0].grid(True, alpha=0.3)\n",
    "        \n",
    "        # Plot 2: Average Waiting Time vs Interarrival Time\n",
    "        for servers in summary_df['servers'].unique():\n",
    "            subset = summary_df[summary_df['servers'] == servers]\n",
    "            axes[0,1].plot(subset['interarrival'], subset['avg_waiting_time'], \n",
    "                          marker='s', linewidth=2, markersize=8, label=f'{servers} Server(s)')\n",
    "        axes[0,1].set_xlabel('Scheduled Interarrival Time (min)')\n",
    "        axes[0,1].set_ylabel('Average Waiting Time (min)')\n",
    "        axes[0,1].set_title('Patient Waiting Time vs Interarrival Time')\n",
    "        axes[0,1].legend()\n",
    "        axes[0,1].grid(True, alpha=0.3)\n",
    "        \n",
    "        # Plot 3: Overtime vs Interarrival Time\n",
    "        for servers in summary_df['servers'].unique():\n",
    "            subset = summary_df[summary_df['servers'] == servers]\n",
    "            axes[1,0].plot(subset['interarrival'], subset['avg_overtime'], \n",
    "                          marker='^', linewidth=2, markersize=8, label=f'{servers} Server(s)')\n",
    "        axes[1,0].set_xlabel('Scheduled Interarrival Time (min)')\n",
    "        axes[1,0].set_ylabel('Average Overtime (min)')\n",
    "        axes[1,0].set_title('Doctor Overtime vs Interarrival Time')\n",
    "        axes[1,0].legend()\n",
    "        axes[1,0].grid(True, alpha=0.3)\n",
    "        \n",
    "        # Plot 4: Utilization vs Interarrival Time\n",
    "        for servers in summary_df['servers'].unique():\n",
    "            subset = summary_df[summary_df['servers'] == servers]\n",
    "            axes[1,1].plot(subset['interarrival'], subset['avg_utilization'] * 100, \n",
    "                          marker='d', linewidth=2, markersize=8, label=f'{servers} Server(s)')\n",
    "        axes[1,1].set_xlabel('Scheduled Interarrival Time (min)')\n",
    "        axes[1,1].set_ylabel('Utilization Rate (%)')\n",
    "        axes[1,1].set_title('Doctor Utilization vs Interarrival Time')\n",
    "        axes[1,1].legend()\n",
    "        axes[1,1].grid(True, alpha=0.3)\n",
    "        \n",
    "        plt.tight_layout()\n",
    "        plt.show()\n",
    "\n",
    "    plot_comparison(summary_df)\n",
    "\n",
    "    print(\"\\n\" + \"=\" * 80)\n",
    "    print(\"SIMULATION COMPLETED SUCCESSFULLY!\")\n",
    "    print(\"All data has been exported to Excel files in the 'simulation_outputs' folder\")\n",
    "    print(\"\\nKey Features:\")\n",
    "    print(\"- Original triangular distribution: (-10, 0, 20) minutes\")\n",
    "    print(\"- Arrival times can be negative (patients arriving before clinic opens)\")\n",
    "    print(\"- Service start times are always non-negative\")\n",
    "    print(\"- Full column names as originally specified\")\n",
    "    print(\"- Tested 5 interarrival times (10, 15, 20, 25, 30 minutes)\")\n",
    "    print(\"- Compared 1-server vs 2-server configurations\") \n",
    "    print(\"- Identified optimal schedules for minimum cost\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0c139ff1",
   "metadata": {},
   "source": [
    "### checked for U independence across scenarios"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d2ba6980",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CLINIC APPOINTMENT SYSTEM SIMULATION - INDEPENDENT SCENARIO STREAMS\n",
      "================================================================================\n",
      "Testing 5 interarrival times: 10, 15, 20, 25, 30 minutes\n",
      "With 1 and 2 server configurations\n",
      "Each scenario has UNIQUE random number streams\n",
      "================================================================================\n",
      "DEMONSTRATING INDEPENDENT RANDOM STREAMS ACROSS SCENARIOS\n",
      "======================================================================\n",
      "Scenario Base Seeds:\n",
      "----------------------------------------\n",
      "Servers: 1, Interarrival: 15min -> Base Seed: 695667499\n",
      "Servers: 1, Interarrival: 20min -> Base Seed: 964887701\n",
      "Servers: 2, Interarrival: 15min -> Base Seed: 1684062783\n",
      "Servers: 2, Interarrival: 20min -> Base Seed: 1635951747\n",
      "\n",
      "First Day U Values Comparison:\n",
      "----------------------------------------\n",
      "Scenario (1,15):\n",
      "  U_interarrival: [0.12104107 0.51087612 0.83254636]\n",
      "  U_service:      [0.66391711 0.98437568 0.15280999]\n",
      "Scenario (1,20):\n",
      "  U_interarrival: [0.34853799 0.18599058 0.67832822]\n",
      "  U_service:      [0.85092195 0.4490231  0.93949093]\n",
      "Scenario (2,15):\n",
      "  U_interarrival: [0.21896723 0.81369355 0.71577465]\n",
      "  U_service:      [0.38922385 0.85503104 0.70210481]\n",
      "Scenario (2,20):\n",
      "  U_interarrival: [0.78908823 0.88631872 0.31208664]\n",
      "  U_service:      [0.58864567 0.18758608 0.00154019]\n",
      "\n",
      "Independence Verification:\n",
      "----------------------------------------\n",
      "Scenarios (1, 15) vs (1, 20): U different = True\n",
      "Scenarios (1, 15) vs (2, 15): U different = True\n",
      "Scenarios (1, 15) vs (2, 20): U different = True\n",
      "Scenarios (1, 20) vs (2, 15): U different = True\n",
      "Scenarios (1, 20) vs (2, 20): U different = True\n",
      "Scenarios (2, 15) vs (2, 20): U different = True\n",
      "\n",
      "\n",
      "1. SAMPLE DAY - COMPACT PATIENT TABLE\n",
      "================================================================================\n",
      "Configuration: 1 Server, 20-min Interarrival, 20-min Mean Service Time\n",
      "Seed: 42\n",
      "--------------------------------------------------------------------------------\n",
      "\n",
      "COMPACT PATIENT SCHEDULE TABLE (All 24 Patients)\n",
      "--------------------------------------------------------------------------------\n",
      "Customer Sequence Arrival time Service starting time Service time Service ending time Waiting Time\n",
      "                1          0.6                   0.6         35.7                36.4          0.0\n",
      "                2         34.6                  36.4          4.8                41.1          1.8\n",
      "                3         47.3                  47.3          4.0                51.3          0.0\n",
      "                4         64.5                  64.5          4.0                68.5          0.0\n",
      "                5         76.8                  76.8          7.3                84.1          0.0\n",
      "                6         96.8                  96.8         14.9               111.7          0.0\n",
      "                7        114.2                 114.2         11.3               125.5          0.0\n",
      "                8        151.0                 151.0          6.9               157.9          0.0\n",
      "                9        164.5                 164.5         18.9               183.5          0.0\n",
      "               10        186.8                 186.8          3.0               189.8          0.0\n",
      "               11        192.5                 192.5          6.9               199.4          0.0\n",
      "               12        235.8                 235.8          9.1               244.9          0.0\n",
      "               13        245.0                 245.0          3.7               248.7          0.0\n",
      "               14        253.8                 253.8         31.0               284.8          0.0\n",
      "               15        279.0                 284.8         34.1               318.9          5.9\n",
      "               16        301.1                 318.9         33.9               352.9         17.9\n",
      "               17        330.3                 352.9         23.8               376.6         22.5\n",
      "               18        350.3                 376.6         12.9               389.6         26.3\n",
      "               19        374.1                 389.6         16.8               406.3         15.4\n",
      "               20        376.3                 406.3         24.7               431.0         30.0\n",
      "               21        401.0                 431.0          9.8               440.8         30.0\n",
      "               22        419.4                 440.8         39.4               480.2         21.5\n",
      "               23        456.5                 480.2         24.6               504.8         23.7\n",
      "               24        453.0                 504.8         20.1               524.9         51.8\n",
      "\n",
      "--------------------------------------------------------------------------------\n",
      "PERFORMANCE SUMMARY FOR SAMPLE DAY\n",
      "Total Waiting Time: 246.9 min\n",
      "Average Waiting Time: 10.3 min\n",
      "Doctor Idle Time: 123.3 min\n",
      "Doctor Overtime: 44.9 min\n",
      "Last Service Ends: 524.9 min\n",
      "Total Cost: $192.92\n",
      "\n",
      "\n",
      "2. COMPREHENSIVE EXPERIMENT - INDEPENDENT SCENARIO STREAMS\n",
      "================================================================================\n",
      "Running simulation for 1000 days per scenario...\n",
      "Each scenario has UNIQUE random number streams\n",
      "GENERATING UNIQUE RANDOM STREAMS FOR EACH SCENARIO:\n",
      "--------------------------------------------------\n",
      "servers_1_interarrival_10 -> Base Seed: 1851408076\n",
      "servers_1_interarrival_15 -> Base Seed: 695667499\n",
      "servers_1_interarrival_20 -> Base Seed: 964887701\n",
      "servers_1_interarrival_25 -> Base Seed: 34750076\n",
      "servers_1_interarrival_30 -> Base Seed: 1012054170\n",
      "servers_2_interarrival_10 -> Base Seed: 1143910390\n",
      "servers_2_interarrival_15 -> Base Seed: 1684062783\n",
      "servers_2_interarrival_20 -> Base Seed: 1635951747\n",
      "servers_2_interarrival_25 -> Base Seed: 1129515566\n",
      "servers_2_interarrival_30 -> Base Seed: 396286589\n",
      "\n",
      "\n",
      "3. SENSITIVITY ANALYSIS\n",
      "================================================================================\n",
      "RUNNING SENSITIVITY ANALYSIS WITH INDEPENDENT STREAMS\n",
      "============================================================\n",
      "\n",
      "1. Service Time Sensitivity:\n",
      "----------------------------------------\n",
      "Service Mean: 15 min -> Avg Cost: $185.99, Avg Wait: 14.1 min\n",
      "Service Mean: 18 min -> Avg Cost: $186.96, Avg Wait: 23.7 min\n",
      "Service Mean: 20 min -> Avg Cost: $206.36, Avg Wait: 36.1 min\n",
      "Service Mean: 22 min -> Avg Cost: $258.19, Avg Wait: 53.3 min\n",
      "Service Mean: 25 min -> Avg Cost: $374.39, Avg Wait: 80.4 min\n",
      "\n",
      "\n",
      "4. DATA EXPORT TO EXCEL\n",
      "================================================================================\n",
      "\n",
      "Results exported to:\n",
      "  Main results: simulation_outputs/clinic_simulation_results_20251016_155854_main.xlsx\n",
      "  Sensitivity analysis: simulation_outputs/clinic_simulation_results_20251016_155854_sensitivity.xlsx\n",
      "  Raw data: simulation_outputs/clinic_simulation_results_20251016_155854_raw_data.xlsx\n",
      "\n",
      "\n",
      "5. OPTIMAL SCHEDULE ANALYSIS\n",
      "================================================================================\n",
      "\n",
      "OPTIMAL CONFIGURATIONS:\n",
      "------------------------------------------------------------\n",
      "\n",
      "1 SERVER OPTIMAL:\n",
      "  Interarrival Time: 20 minutes\n",
      "  Average Daily Cost: $225.70\n",
      "  Average Waiting Time: 39.63 minutes\n",
      "  Average Overtime: 65.79 minutes\n",
      "  Utilization: 88.1%\n",
      "\n",
      "2 SERVER OPTIMAL:\n",
      "  Interarrival Time: 10 minutes\n",
      "  Average Daily Cost: $72.79\n",
      "  Average Waiting Time: 16.32 minutes\n",
      "  Average Overtime: 0.00 minutes\n",
      "  Utilization: 82.5%\n",
      "\n",
      "ALL CONFIGURATIONS COMPARISON:\n",
      "--------------------------------------------------------------------------------\n",
      " Servers  Interarrival  Avg Cost  Avg Wait  Avg Overtime  Utilization\n",
      "       1            10   329.489   120.312        29.855        0.978\n",
      "       1            15   229.525    72.181        32.559        0.953\n",
      "       1            20   225.703    39.631        65.790        0.881\n",
      "       1            25   340.123    21.714       144.518        0.770\n",
      "       1            30   523.410    12.373       246.705        0.660\n",
      "       2            10    72.794    16.321         0.000        0.825\n",
      "       2            15   112.014     4.212         0.152        0.624\n",
      "       2            20   193.053     1.316        13.556        0.490\n",
      "       2            25   381.698     0.599       122.542        0.400\n",
      "       2            30   582.475     0.244       237.158        0.333\n",
      "\n",
      "\n",
      "6. PERFORMANCE GRAPHS\n",
      "================================================================================\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x864 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "================================================================================\n",
      "SIMULATION COMPLETED SUCCESSFULLY!\n",
      "All data has been exported to Excel files in the 'simulation_outputs' folder\n",
      "\n",
      "Key Improvements:\n",
      "- ✓ Each scenario now has UNIQUE random number streams\n",
      "- ✓ No correlation between different server/interarrival configurations\n",
      "- ✓ Complete statistical independence across all scenarios\n",
      "- ✓ Maintained reproducibility within each scenario\n",
      "- ✓ All U values are different across scenarios\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import os\n",
    "from datetime import datetime\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "class ClinicSimulation:\n",
    "    def __init__(self, num_servers=1, scheduled_interarrival=20, planning_horizon=480, \n",
    "                 patients_per_day=24, queue_capacity=20, cost_params=None,\n",
    "                 service_time_mean=20, base_seed=42):\n",
    "        \"\"\"\n",
    "        Initialize simulation with configuration parameters\n",
    "        \"\"\"\n",
    "        self.num_servers = num_servers\n",
    "        self.scheduled_interarrival = scheduled_interarrival\n",
    "        self.planning_horizon = planning_horizon\n",
    "        self.patients_per_day = patients_per_day\n",
    "        self.queue_capacity = queue_capacity\n",
    "        self.base_seed = base_seed\n",
    "        \n",
    "        self.cost_params = cost_params or {'C_w': 0.1, 'C_i': 1, 'C_o': 1}\n",
    "        self.triangular_min = -10\n",
    "        self.triangular_mode = 0\n",
    "        self.triangular_max = 20\n",
    "        self.service_time_mean = service_time_mean\n",
    "    \n",
    "    def generate_interarrival_time(self, U):\n",
    "        \"\"\"Generate interarrival time using constant + triangular distribution\"\"\"\n",
    "        F_mode = (self.triangular_mode - self.triangular_min) / (self.triangular_max - self.triangular_min)\n",
    "        triangular_component = np.where(\n",
    "            U <= F_mode,\n",
    "            self.triangular_min + np.sqrt(U * (self.triangular_max - self.triangular_min) * (self.triangular_mode - self.triangular_min)),\n",
    "            self.triangular_max - np.sqrt((1 - U) * (self.triangular_max - self.triangular_min) * (self.triangular_max - self.triangular_mode))\n",
    "        )\n",
    "        return self.scheduled_interarrival + triangular_component\n",
    "    \n",
    "    def generate_service_time(self, U):\n",
    "        \"\"\"Generate service time using inverse transform for exponential distribution\"\"\"\n",
    "        return -np.log(1 - U) * self.service_time_mean\n",
    "    \n",
    "    def simulate_single_day(self, use_antithetic=False, day_seed=None, store_raw_data=False):\n",
    "        \"\"\"\n",
    "        Simulate one complete day at the clinic\n",
    "        \"\"\"\n",
    "        # SET SEED HERE - This is the key reproducibility point!\n",
    "        if day_seed is not None:\n",
    "            np.random.seed(day_seed)\n",
    "        else:\n",
    "            np.random.seed(self.base_seed)\n",
    "        \n",
    "        n_patients = self.patients_per_day\n",
    "        raw_data = {}\n",
    "        \n",
    "        if use_antithetic:\n",
    "            half_n = n_patients // 2\n",
    "            # INDEPENDENT STREAMS: Different U for interarrival vs service\n",
    "            U_interarrival = np.random.uniform(0, 1, half_n)\n",
    "            U_service = np.random.uniform(0, 1, half_n)\n",
    "            \n",
    "            if store_raw_data:\n",
    "                raw_data['U_interarrival_antithetic_set1'] = U_interarrival.tolist()\n",
    "                raw_data['U_service_antithetic_set1'] = U_service.tolist()\n",
    "                raw_data['U_interarrival_antithetic_set2'] = (1 - U_interarrival).tolist()\n",
    "                raw_data['U_service_antithetic_set2'] = (1 - U_service).tolist()\n",
    "            \n",
    "            interarrival_times1 = np.array([self.generate_interarrival_time(u) for u in U_interarrival])\n",
    "            interarrival_times2 = np.array([self.generate_interarrival_time(1-u) for u in U_interarrival])\n",
    "            service_times1 = np.array([self.generate_service_time(u) for u in U_service])\n",
    "            service_times2 = np.array([self.generate_service_time(1-u) for u in U_service])\n",
    "            \n",
    "            interarrival_times = np.concatenate([interarrival_times1, interarrival_times2])\n",
    "            service_times = np.concatenate([service_times1, service_times2])\n",
    "            \n",
    "            if store_raw_data:\n",
    "                raw_data['interarrival_times_set1'] = interarrival_times1.tolist()\n",
    "                raw_data['interarrival_times_set2'] = interarrival_times2.tolist()\n",
    "                raw_data['service_times_set1'] = service_times1.tolist()\n",
    "                raw_data['service_times_set2'] = service_times2.tolist()\n",
    "        else:\n",
    "            # INDEPENDENT STREAMS: Different U for interarrival vs service\n",
    "            U_interarrival = np.random.uniform(0, 1, n_patients)\n",
    "            U_service = np.random.uniform(0, 1, n_patients)\n",
    "            \n",
    "            if store_raw_data:\n",
    "                raw_data['U_interarrival'] = U_interarrival.tolist()\n",
    "                raw_data['U_service'] = U_service.tolist()\n",
    "            \n",
    "            interarrival_times = np.array([self.generate_interarrival_time(u) for u in U_interarrival])\n",
    "            service_times = np.array([self.generate_service_time(u) for u in U_service])\n",
    "            \n",
    "            if store_raw_data:\n",
    "                raw_data['interarrival_times'] = interarrival_times.tolist()\n",
    "                raw_data['service_times'] = service_times.tolist()\n",
    "        \n",
    "        # Calculate scheduled arrival times (starting from time 0)\n",
    "        scheduled_arrivals = np.arange(0, n_patients * self.scheduled_interarrival, self.scheduled_interarrival)\n",
    "        \n",
    "        # Calculate actual arrival times (scheduled time + punctuality variation)\n",
    "        lateness = interarrival_times - self.scheduled_interarrival\n",
    "        actual_arrival_times = scheduled_arrivals + lateness\n",
    "        \n",
    "        # Allow negative arrival times (patients arriving before clinic opens)\n",
    "        # But service can only start at or after time 0\n",
    "        service_start_times = np.zeros(n_patients)\n",
    "        service_end_times = np.zeros(n_patients)\n",
    "        waiting_times = np.zeros(n_patients)\n",
    "        server_assignment = np.zeros(n_patients, dtype=int)\n",
    "        \n",
    "        if self.num_servers == 1:\n",
    "            for i in range(n_patients):\n",
    "                if i == 0:\n",
    "                    # First patient: service starts at max(0, arrival_time)\n",
    "                    service_start_times[i] = max(0, actual_arrival_times[i])\n",
    "                else:\n",
    "                    service_start_times[i] = max(actual_arrival_times[i], service_end_times[i-1])\n",
    "                service_end_times[i] = service_start_times[i] + service_times[i]\n",
    "                waiting_times[i] = max(0, service_start_times[i] - actual_arrival_times[i])\n",
    "                server_assignment[i] = 0\n",
    "        else:\n",
    "            server_end_times = [0] * self.num_servers  # All servers start available at time 0\n",
    "            for i in range(n_patients):\n",
    "                next_available_time = min(server_end_times)\n",
    "                server_index = server_end_times.index(next_available_time)\n",
    "                service_start_times[i] = max(actual_arrival_times[i], next_available_time)\n",
    "                service_end_times[i] = service_start_times[i] + service_times[i]\n",
    "                waiting_times[i] = max(0, service_start_times[i] - actual_arrival_times[i])\n",
    "                server_assignment[i] = server_index\n",
    "                server_end_times[server_index] = service_end_times[i]\n",
    "        \n",
    "        # Use full column names as originally specified\n",
    "        results_df = pd.DataFrame({\n",
    "            'Customer Sequence': range(1, n_patients + 1),\n",
    "            'Arrival time': actual_arrival_times,\n",
    "            'Service starting time': service_start_times,\n",
    "            'Service time': service_times,\n",
    "            'Service ending time': service_end_times,\n",
    "            'Waiting Time': waiting_times\n",
    "        })\n",
    "        \n",
    "        if store_raw_data:\n",
    "            raw_data['scheduled_arrivals'] = scheduled_arrivals.tolist()\n",
    "            raw_data['actual_arrival_times'] = actual_arrival_times.tolist()\n",
    "            raw_data['lateness'] = lateness.tolist()\n",
    "            raw_data['service_start_times'] = service_start_times.tolist()\n",
    "            raw_data['service_end_times'] = service_end_times.tolist()\n",
    "            raw_data['waiting_times'] = waiting_times.tolist()\n",
    "            raw_data['server_assignment'] = server_assignment.tolist()\n",
    "            raw_data['day_seed'] = day_seed\n",
    "            return results_df, raw_data\n",
    "        \n",
    "        return results_df\n",
    "    \n",
    "    def calculate_performance_metrics(self, results_df):\n",
    "        last_service_end = results_df['Service ending time'].max()\n",
    "        overtime = max(0, last_service_end - self.planning_horizon)\n",
    "        \n",
    "        idle_time = 0\n",
    "        if self.num_servers == 1:\n",
    "            for i in range(1, len(results_df)):\n",
    "                idle_gap = results_df.loc[i, 'Service starting time'] - results_df.loc[i-1, 'Service ending time']\n",
    "                idle_time += max(0, idle_gap)\n",
    "            # Initial idle time before first patient starts\n",
    "            idle_time += max(0, results_df.loc[0, 'Service starting time'] - 0)\n",
    "        else:\n",
    "            server_last_end = {server: 0 for server in range(self.num_servers)}\n",
    "            for _, patient in results_df.iterrows():\n",
    "                server = patient.get('Server', 0)\n",
    "                start_time = patient['Service starting time']\n",
    "                idle_gap = start_time - server_last_end[server]\n",
    "                idle_time += max(0, idle_gap)\n",
    "                server_last_end[server] = patient['Service ending time']\n",
    "        \n",
    "        total_waiting_time = results_df['Waiting Time'].sum()\n",
    "        total_cost = (total_waiting_time * self.cost_params['C_w'] + \n",
    "                     idle_time * self.cost_params['C_i'] + \n",
    "                     overtime * self.cost_params['C_o'])\n",
    "        \n",
    "        performance_metrics = {\n",
    "            'total_waiting_time': total_waiting_time,\n",
    "            'idle_time': idle_time,\n",
    "            'overtime': overtime,\n",
    "            'total_cost': total_cost,\n",
    "            'last_service_end': last_service_end,\n",
    "            'avg_waiting_time': total_waiting_time / len(results_df),\n",
    "            'utilization': (results_df['Service time'].sum() / \n",
    "                          (self.num_servers * last_service_end)) if last_service_end > 0 else 0\n",
    "        }\n",
    "        \n",
    "        return performance_metrics\n",
    "\n",
    "def generate_scenario_seed(base_seed, num_servers, scheduled_interarrival):\n",
    "    \"\"\"\n",
    "    Generate unique base seed for each scenario combination\n",
    "    This ensures different random numbers across different scenarios\n",
    "    \"\"\"\n",
    "    # Create a unique seed based on scenario parameters\n",
    "    scenario_hash = hash(f\"{num_servers}_{scheduled_interarrival}\") % (2**31)\n",
    "    return base_seed + scenario_hash\n",
    "\n",
    "def run_multiple_days_simulation(num_datasets=1000, num_servers=1, scheduled_interarrival=20, \n",
    "                               cost_params=None, use_antithetic=True, service_time_mean=20,\n",
    "                               base_seed=42, store_raw_data=False):\n",
    "    \"\"\"\n",
    "    Run simulation for multiple days with systematic seeding\n",
    "    \"\"\"\n",
    "    \n",
    "    # Generate unique seed for this specific scenario\n",
    "    scenario_base_seed = generate_scenario_seed(base_seed, num_servers, scheduled_interarrival)\n",
    "    \n",
    "    sim = ClinicSimulation(\n",
    "        num_servers=num_servers, \n",
    "        scheduled_interarrival=scheduled_interarrival,\n",
    "        cost_params=cost_params,\n",
    "        service_time_mean=service_time_mean,\n",
    "        base_seed=scenario_base_seed  # UNIQUE SEED FOR THIS SCENARIO\n",
    "    )\n",
    "    \n",
    "    daily_results = []\n",
    "    daily_metrics = []\n",
    "    raw_data_all_days = []\n",
    "    \n",
    "    for day in range(num_datasets):\n",
    "        # SYSTEMATIC SEEDING: Each day gets scenario_base_seed + day_number\n",
    "        day_seed = scenario_base_seed + day  # UNIQUE SEED FOR EACH DAY IN THIS SCENARIO\n",
    "        \n",
    "        if store_raw_data:\n",
    "            day_results, day_raw_data = sim.simulate_single_day(\n",
    "                use_antithetic=use_antithetic, \n",
    "                day_seed=day_seed,\n",
    "                store_raw_data=True\n",
    "            )\n",
    "            day_raw_data['day'] = day + 1\n",
    "            day_raw_data['day_seed'] = day_seed\n",
    "            day_raw_data['scenario_base_seed'] = scenario_base_seed\n",
    "            raw_data_all_days.append(day_raw_data)\n",
    "        else:\n",
    "            day_results = sim.simulate_single_day(\n",
    "                use_antithetic=use_antithetic, \n",
    "                day_seed=day_seed,\n",
    "                store_raw_data=False\n",
    "            )\n",
    "        \n",
    "        metrics = sim.calculate_performance_metrics(day_results)\n",
    "        \n",
    "        daily_results.append(day_results)\n",
    "        daily_metrics.append({\n",
    "            'day': day + 1,\n",
    "            'day_seed': day_seed,\n",
    "            'scenario_base_seed': scenario_base_seed,\n",
    "            'total_waiting_time': metrics['total_waiting_time'],\n",
    "            'idle_time': metrics['idle_time'],\n",
    "            'overtime': metrics['overtime'],\n",
    "            'total_cost': metrics['total_cost'],\n",
    "            'avg_waiting_time': metrics['avg_waiting_time'],\n",
    "            'utilization': metrics['utilization'],\n",
    "            'service_time_mean': service_time_mean\n",
    "        })\n",
    "    \n",
    "    metrics_df = pd.DataFrame(daily_metrics)\n",
    "    \n",
    "    if store_raw_data:\n",
    "        return daily_results, metrics_df, raw_data_all_days\n",
    "    else:\n",
    "        return daily_results, metrics_df\n",
    "\n",
    "def demonstrate_independent_scenario_seeds():\n",
    "    \"\"\"Demonstrate that different scenarios get different random numbers\"\"\"\n",
    "    print(\"DEMONSTRATING INDEPENDENT RANDOM STREAMS ACROSS SCENARIOS\")\n",
    "    print(\"=\" * 70)\n",
    "    \n",
    "    base_seed = 42\n",
    "    scenarios = [\n",
    "        (1, 15),  # 1 server, 15-min interarrival\n",
    "        (1, 20),  # 1 server, 20-min interarrival  \n",
    "        (2, 15),  # 2 servers, 15-min interarrival\n",
    "        (2, 20),  # 2 servers, 20-min interarrival\n",
    "    ]\n",
    "    \n",
    "    print(\"Scenario Base Seeds:\")\n",
    "    print(\"-\" * 40)\n",
    "    for num_servers, interarrival in scenarios:\n",
    "        scenario_seed = generate_scenario_seed(base_seed, num_servers, interarrival)\n",
    "        print(f\"Servers: {num_servers}, Interarrival: {interarrival}min -> Base Seed: {scenario_seed}\")\n",
    "    \n",
    "    print(\"\\nFirst Day U Values Comparison:\")\n",
    "    print(\"-\" * 40)\n",
    "    \n",
    "    first_day_us = {}\n",
    "    for num_servers, interarrival in scenarios:\n",
    "        scenario_seed = generate_scenario_seed(base_seed, num_servers, interarrival)\n",
    "        np.random.seed(scenario_seed)  # Set seed for this scenario\n",
    "        U_interarrival = np.random.uniform(0, 1, 3)  # Get first 3 U values\n",
    "        U_service = np.random.uniform(0, 1, 3)\n",
    "        \n",
    "        first_day_us[(num_servers, interarrival)] = {\n",
    "            'U_interarrival': U_interarrival,\n",
    "            'U_service': U_service\n",
    "        }\n",
    "        \n",
    "        print(f\"Scenario ({num_servers},{interarrival}):\")\n",
    "        print(f\"  U_interarrival: {U_interarrival}\")\n",
    "        print(f\"  U_service:      {U_service}\")\n",
    "    \n",
    "    # Check if they're different\n",
    "    print(\"\\nIndependence Verification:\")\n",
    "    print(\"-\" * 40)\n",
    "    scenarios_list = list(first_day_us.keys())\n",
    "    for i in range(len(scenarios_list)):\n",
    "        for j in range(i+1, len(scenarios_list)):\n",
    "            scenario1 = scenarios_list[i]\n",
    "            scenario2 = scenarios_list[j]\n",
    "            u1 = first_day_us[scenario1]['U_interarrival']\n",
    "            u2 = first_day_us[scenario2]['U_interarrival']\n",
    "            are_different = not np.array_equal(u1, u2)\n",
    "            print(f\"Scenarios {scenario1} vs {scenario2}: U different = {are_different}\")\n",
    "\n",
    "def run_comprehensive_experiment(service_time_mean=20, base_seed=42):\n",
    "    cost_params = {'C_w': 0.1, 'C_i': 1, 'C_o': 1}\n",
    "    \n",
    "    # Exactly 5 interarrival times between 10-30 minutes as requested\n",
    "    scheduled_interarrivals = [10, 15, 20, 25, 30]\n",
    "    server_configs = [1, 2]\n",
    "    num_datasets = 1000\n",
    "    \n",
    "    all_results_with_raw = {}\n",
    "    \n",
    "    print(\"GENERATING UNIQUE RANDOM STREAMS FOR EACH SCENARIO:\")\n",
    "    print(\"-\" * 50)\n",
    "    \n",
    "    for num_servers in server_configs:\n",
    "        for interarrival in scheduled_interarrivals:\n",
    "            key = f\"servers_{num_servers}_interarrival_{interarrival}\"\n",
    "            \n",
    "            # Generate unique base seed for this scenario\n",
    "            scenario_base_seed = generate_scenario_seed(base_seed, num_servers, interarrival)\n",
    "            print(f\"{key} -> Base Seed: {scenario_base_seed}\")\n",
    "            \n",
    "            daily_results, metrics_df, raw_data_all_days = run_multiple_days_simulation(\n",
    "                num_datasets=num_datasets,\n",
    "                num_servers=num_servers,\n",
    "                scheduled_interarrival=interarrival,\n",
    "                cost_params=cost_params,\n",
    "                service_time_mean=service_time_mean,\n",
    "                base_seed=base_seed,  # Pass the master base seed\n",
    "                store_raw_data=True\n",
    "            )\n",
    "            \n",
    "            all_results_with_raw[key] = {\n",
    "                'daily_results': daily_results,\n",
    "                'metrics_df': metrics_df,\n",
    "                'raw_data': raw_data_all_days,\n",
    "                'scenario_base_seed': scenario_base_seed\n",
    "            }\n",
    "    \n",
    "    return all_results_with_raw\n",
    "\n",
    "def run_sensitivity_analysis(base_params=None, variations=None):\n",
    "    \"\"\"Run sensitivity analysis by varying key parameters\"\"\"\n",
    "    if base_params is None:\n",
    "        base_params = {\n",
    "            'num_servers': 1,\n",
    "            'scheduled_interarrival': 20,\n",
    "            'service_time_mean': 20,\n",
    "            'cost_params': {'C_w': 0.1, 'C_i': 1, 'C_o': 1}\n",
    "        }\n",
    "    \n",
    "    if variations is None:\n",
    "        variations = {\n",
    "            'service_time_mean': [15, 18, 20, 22, 25],\n",
    "            'scheduled_interarrival': [10, 15, 20, 25, 30],\n",
    "            'C_w': [0.05, 0.1, 0.2, 0.5],\n",
    "            'C_i': [0.5, 1, 2, 5],\n",
    "            'C_o': [0.5, 1, 2, 5]\n",
    "        }\n",
    "    \n",
    "    sensitivity_results = {}\n",
    "    \n",
    "    print(\"RUNNING SENSITIVITY ANALYSIS WITH INDEPENDENT STREAMS\")\n",
    "    print(\"=\" * 60)\n",
    "    \n",
    "    # Service time sensitivity\n",
    "    print(\"\\n1. Service Time Sensitivity:\")\n",
    "    print(\"-\" * 40)\n",
    "    for service_mean in variations['service_time_mean']:\n",
    "        params = base_params.copy()\n",
    "        params['service_time_mean'] = service_mean\n",
    "        \n",
    "        # Generate unique seed for this sensitivity test\n",
    "        sensitivity_seed = generate_scenario_seed(42, params['num_servers'], params['scheduled_interarrival']) + hash(f\"service_{service_mean}\") % 1000\n",
    "        \n",
    "        daily_results, metrics_df = run_multiple_days_simulation(\n",
    "            num_datasets=100,\n",
    "            num_servers=params['num_servers'],\n",
    "            scheduled_interarrival=params['scheduled_interarrival'],\n",
    "            cost_params=params['cost_params'],\n",
    "            service_time_mean=service_mean,\n",
    "            base_seed=sensitivity_seed\n",
    "        )\n",
    "        \n",
    "        avg_cost = metrics_df['total_cost'].mean()\n",
    "        avg_wait = metrics_df['avg_waiting_time'].mean()\n",
    "        \n",
    "        sensitivity_results[f'service_mean_{service_mean}'] = {\n",
    "            'avg_cost': avg_cost,\n",
    "            'avg_wait': avg_wait,\n",
    "            'params': params\n",
    "        }\n",
    "        \n",
    "        print(f\"Service Mean: {service_mean} min -> Avg Cost: ${avg_cost:.2f}, Avg Wait: {avg_wait:.1f} min\")\n",
    "    \n",
    "    return sensitivity_results\n",
    "\n",
    "def export_to_excel(all_results, sensitivity_results=None, raw_data_all=None, filename=None):\n",
    "    \"\"\"Export all simulation results to Excel files\"\"\"\n",
    "    if filename is None:\n",
    "        timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n",
    "        filename = f\"clinic_simulation_results_{timestamp}\"\n",
    "    \n",
    "    # Create output directory\n",
    "    os.makedirs('simulation_outputs', exist_ok=True)\n",
    "    \n",
    "    # Create main results workbook\n",
    "    with pd.ExcelWriter(f'simulation_outputs/{filename}_main.xlsx', engine='openpyxl') as writer:\n",
    "        \n",
    "        # Summary sheet\n",
    "        summary_data = []\n",
    "        for key, result in all_results.items():\n",
    "            avg_metrics = result['metrics_df'].mean()\n",
    "            summary_data.append({\n",
    "                'Configuration': key,\n",
    "                'Scheduled Interarrival': int(key.split('_')[-1]),\n",
    "                'Number of Servers': int(key.split('_')[1]),\n",
    "                'Scenario Base Seed': result.get('scenario_base_seed', 'N/A'),\n",
    "                'Average Total Cost': avg_metrics['total_cost'],\n",
    "                'Std Total Cost': result['metrics_df']['total_cost'].std(),\n",
    "                'Average Waiting Time': avg_metrics['avg_waiting_time'],\n",
    "                'Average Idle Time': avg_metrics['idle_time'],\n",
    "                'Average Overtime': avg_metrics['overtime'],\n",
    "                'Average Utilization': avg_metrics['utilization']\n",
    "            })\n",
    "        \n",
    "        summary_df = pd.DataFrame(summary_data)\n",
    "        summary_df.to_excel(writer, sheet_name='Summary', index=False)\n",
    "        \n",
    "        # Performance metrics for each configuration\n",
    "        for key, result in all_results.items():\n",
    "            metrics_df = result['metrics_df']\n",
    "            metrics_df_display = metrics_df.rename(columns={\n",
    "                'total_waiting_time': 'Total Waiting Time',\n",
    "                'idle_time': 'Doctor Idle Time', \n",
    "                'overtime': 'Doctor Overtime',\n",
    "                'total_cost': 'Total Cost',\n",
    "                'avg_waiting_time': 'Average Waiting Time',\n",
    "                'utilization': 'Utilization Rate'\n",
    "            })\n",
    "            metrics_df_display.to_excel(writer, sheet_name=f'{key}_Metrics', index=False)\n",
    "            \n",
    "            # Sample patient data (first 3 days)\n",
    "            for day in range(min(3, len(result['daily_results']))):\n",
    "                day_df = result['daily_results'][day]\n",
    "                day_df.to_excel(writer, sheet_name=f'{key}_Day{day+1}', index=False)\n",
    "    \n",
    "    # Create sensitivity analysis workbook\n",
    "    if sensitivity_results:\n",
    "        with pd.ExcelWriter(f'simulation_outputs/{filename}_sensitivity.xlsx', engine='openpyxl') as writer:\n",
    "            sensitivity_data = []\n",
    "            for key, result in sensitivity_results.items():\n",
    "                sensitivity_data.append({\n",
    "                    'Parameter Variation': key,\n",
    "                    'Average Cost': result['avg_cost'],\n",
    "                    'Average Wait Time': result.get('avg_wait', None),\n",
    "                    'Parameters': str(result['params'])\n",
    "                })\n",
    "            \n",
    "            sensitivity_df = pd.DataFrame(sensitivity_data)\n",
    "            sensitivity_df.to_excel(writer, sheet_name='Sensitivity Analysis', index=False)\n",
    "    \n",
    "    # Create raw data workbook\n",
    "    if raw_data_all:\n",
    "        with pd.ExcelWriter(f'simulation_outputs/{filename}_raw_data.xlsx', engine='openpyxl') as writer:\n",
    "            for config_key, config_data in raw_data_all.items():\n",
    "                # Create a sheet for each configuration\n",
    "                raw_data_list = []\n",
    "                \n",
    "                for day_data in config_data['raw_data']:\n",
    "                    day_num = day_data['day']\n",
    "                    day_seed = day_data['day_seed']\n",
    "                    scenario_base_seed = day_data.get('scenario_base_seed', 'N/A')\n",
    "                    \n",
    "                    # Extract uniform random numbers\n",
    "                    if 'U_interarrival_antithetic_set1' in day_data:\n",
    "                        # Antithetic case\n",
    "                        for i, (u_int1, u_int2, u_serv1, u_serv2) in enumerate(zip(\n",
    "                            day_data['U_interarrival_antithetic_set1'],\n",
    "                            day_data['U_interarrival_antithetic_set2'],\n",
    "                            day_data['U_service_antithetic_set1'],\n",
    "                            day_data['U_service_antithetic_set2']\n",
    "                        )):\n",
    "                            raw_data_list.append({\n",
    "                                'Configuration': config_key,\n",
    "                                'Scenario Base Seed': scenario_base_seed,\n",
    "                                'Day': day_num,\n",
    "                                'Day Seed': day_seed,\n",
    "                                'Patient Group': f'Set1_Patient{i+1}',\n",
    "                                'U Interarrival': u_int1,\n",
    "                                'U Service': u_serv1,\n",
    "                                'Interarrival Time': day_data['interarrival_times_set1'][i],\n",
    "                                'Service Time': day_data['service_times_set1'][i],\n",
    "                                'Method': 'Antithetic_Set1'\n",
    "                            })\n",
    "                    else:\n",
    "                        # Regular case\n",
    "                        for i, (u_int, u_serv) in enumerate(zip(\n",
    "                            day_data['U_interarrival'],\n",
    "                            day_data['U_service']\n",
    "                        )):\n",
    "                            raw_data_list.append({\n",
    "                                'Configuration': config_key,\n",
    "                                'Scenario Base Seed': scenario_base_seed,\n",
    "                                'Day': day_num,\n",
    "                                'Day Seed': day_seed,\n",
    "                                'Patient': i+1,\n",
    "                                'U Interarrival': u_int,\n",
    "                                'U Service': u_serv,\n",
    "                                'Interarrival Time': day_data['interarrival_times'][i],\n",
    "                                'Service Time': day_data['service_times'][i],\n",
    "                                'Method': 'Standard'\n",
    "                            })\n",
    "                \n",
    "                raw_data_df = pd.DataFrame(raw_data_list)\n",
    "                raw_data_df.to_excel(writer, sheet_name=f'{config_key}_RawData', index=False)\n",
    "    \n",
    "    print(f\"\\nResults exported to:\")\n",
    "    print(f\"  Main results: simulation_outputs/{filename}_main.xlsx\")\n",
    "    if sensitivity_results:\n",
    "        print(f\"  Sensitivity analysis: simulation_outputs/{filename}_sensitivity.xlsx\")\n",
    "    if raw_data_all:\n",
    "        print(f\"  Raw data: simulation_outputs/{filename}_raw_data.xlsx\")\n",
    "    \n",
    "    return filename\n",
    "\n",
    "# MAIN EXECUTION\n",
    "def main():\n",
    "    print(\"CLINIC APPOINTMENT SYSTEM SIMULATION - INDEPENDENT SCENARIO STREAMS\")\n",
    "    print(\"=\" * 80)\n",
    "    print(\"Testing 5 interarrival times: 10, 15, 20, 25, 30 minutes\")\n",
    "    print(\"With 1 and 2 server configurations\")\n",
    "    print(\"Each scenario has UNIQUE random number streams\")\n",
    "    print(\"=\" * 80)\n",
    "    \n",
    "    # Create output directory\n",
    "    os.makedirs('simulation_outputs', exist_ok=True)\n",
    "    \n",
    "    # Demonstrate independent scenario seeds\n",
    "    demonstrate_independent_scenario_seeds()\n",
    "    \n",
    "    # 1. Show sample day with compact table\n",
    "    print(\"\\n\\n1. SAMPLE DAY - COMPACT PATIENT TABLE\")\n",
    "    print(\"=\" * 80)\n",
    "    sim = ClinicSimulation(num_servers=1, scheduled_interarrival=20, service_time_mean=20, base_seed=42)\n",
    "    sample_day, raw_data = sim.simulate_single_day(use_antithetic=True, day_seed=42, store_raw_data=True)\n",
    "    sample_metrics = sim.calculate_performance_metrics(sample_day)\n",
    "\n",
    "    print(f\"Configuration: 1 Server, 20-min Interarrival, 20-min Mean Service Time\")\n",
    "    print(f\"Seed: 42\")\n",
    "    print(\"-\" * 80)\n",
    "\n",
    "    # Display compact table for all 24 patients with full column names\n",
    "    compact_df = sample_day.round(2)\n",
    "    print(\"\\nCOMPACT PATIENT SCHEDULE TABLE (All 24 Patients)\")\n",
    "    print(\"-\" * 80)\n",
    "    print(compact_df.to_string(index=False, formatters={\n",
    "        'Customer Sequence': '{:>2}'.format,\n",
    "        'Arrival time': '{:>8.1f}'.format,\n",
    "        'Service starting time': '{:>8.1f}'.format,\n",
    "        'Service time': '{:>6.1f}'.format,\n",
    "        'Service ending time': '{:>8.1f}'.format,\n",
    "        'Waiting Time': '{:>6.1f}'.format\n",
    "    }))\n",
    "\n",
    "    print(\"\\n\" + \"-\" * 80)\n",
    "    print(\"PERFORMANCE SUMMARY FOR SAMPLE DAY\")\n",
    "    print(f\"Total Waiting Time: {sample_metrics['total_waiting_time']:.1f} min\")\n",
    "    print(f\"Average Waiting Time: {sample_metrics['avg_waiting_time']:.1f} min\")\n",
    "    print(f\"Doctor Idle Time: {sample_metrics['idle_time']:.1f} min\")\n",
    "    print(f\"Doctor Overtime: {sample_metrics['overtime']:.1f} min\")\n",
    "    print(f\"Last Service Ends: {sample_metrics['last_service_end']:.1f} min\")\n",
    "    print(f\"Total Cost: ${sample_metrics['total_cost']:.2f}\")\n",
    "\n",
    "    # 2. Run comprehensive experiment with all 5 interarrival times\n",
    "    print(\"\\n\\n2. COMPREHENSIVE EXPERIMENT - INDEPENDENT SCENARIO STREAMS\")\n",
    "    print(\"=\" * 80)\n",
    "    print(\"Running simulation for 1000 days per scenario...\")\n",
    "    print(\"Each scenario has UNIQUE random number streams\")\n",
    "\n",
    "    all_results_with_raw = run_comprehensive_experiment(service_time_mean=20, base_seed=42)\n",
    "\n",
    "    # 3. Run sensitivity analysis\n",
    "    print(\"\\n\\n3. SENSITIVITY ANALYSIS\")\n",
    "    print(\"=\" * 80)\n",
    "    sensitivity_results = run_sensitivity_analysis()\n",
    "\n",
    "    # 4. Export all data to Excel files\n",
    "    print(\"\\n\\n4. DATA EXPORT TO EXCEL\")\n",
    "    print(\"=\" * 80)\n",
    "    \n",
    "    # Prepare all_results for export\n",
    "    all_results_for_export = {}\n",
    "    for key, result in all_results_with_raw.items():\n",
    "        all_results_for_export[key] = {\n",
    "            'daily_results': result['daily_results'],\n",
    "            'metrics_df': result['metrics_df']\n",
    "        }\n",
    "    \n",
    "    # Export to Excel\n",
    "    export_filename = export_to_excel(\n",
    "        all_results_for_export, \n",
    "        sensitivity_results, \n",
    "        all_results_with_raw\n",
    "    )\n",
    "\n",
    "    # 5. Display optimal configurations\n",
    "    print(\"\\n\\n5. OPTIMAL SCHEDULE ANALYSIS\")\n",
    "    print(\"=\" * 80)\n",
    "    \n",
    "    summary_stats = []\n",
    "    for key, result in all_results_with_raw.items():\n",
    "        avg_metrics = result['metrics_df'].mean()\n",
    "        servers = int(key.split('_')[1])\n",
    "        interarrival = int(key.split('_')[-1])\n",
    "        \n",
    "        summary_stats.append({\n",
    "            'servers': servers,\n",
    "            'interarrival': interarrival,\n",
    "            'config': key,\n",
    "            'avg_total_cost': avg_metrics['total_cost'],\n",
    "            'avg_waiting_time': avg_metrics['avg_waiting_time'],\n",
    "            'avg_overtime': avg_metrics['overtime'],\n",
    "            'avg_utilization': avg_metrics['utilization']\n",
    "        })\n",
    "    \n",
    "    summary_df = pd.DataFrame(summary_stats)\n",
    "    \n",
    "    # Find optimal configurations\n",
    "    print(\"\\nOPTIMAL CONFIGURATIONS:\")\n",
    "    print(\"-\" * 60)\n",
    "    \n",
    "    for servers in [1, 2]:\n",
    "        server_data = summary_df[summary_df['servers'] == servers]\n",
    "        optimal_idx = server_data['avg_total_cost'].idxmin()\n",
    "        optimal = server_data.loc[optimal_idx]\n",
    "        \n",
    "        print(f\"\\n{servers} SERVER OPTIMAL:\")\n",
    "        print(f\"  Interarrival Time: {optimal['interarrival']} minutes\")\n",
    "        print(f\"  Average Daily Cost: ${optimal['avg_total_cost']:.2f}\")\n",
    "        print(f\"  Average Waiting Time: {optimal['avg_waiting_time']:.2f} minutes\")\n",
    "        print(f\"  Average Overtime: {optimal['avg_overtime']:.2f} minutes\")\n",
    "        print(f\"  Utilization: {optimal['avg_utilization']:.1%}\")\n",
    "    \n",
    "    # Display all results comparison\n",
    "    print(f\"\\nALL CONFIGURATIONS COMPARISON:\")\n",
    "    print(\"-\" * 80)\n",
    "    display_cols = ['servers', 'interarrival', 'avg_total_cost', 'avg_waiting_time', 'avg_overtime', 'avg_utilization']\n",
    "    display_df = summary_df[display_cols].round(3)\n",
    "    display_df.columns = ['Servers', 'Interarrival', 'Avg Cost', 'Avg Wait', 'Avg Overtime', 'Utilization']\n",
    "    print(display_df.to_string(index=False))\n",
    "\n",
    "    # 6. Plotting results\n",
    "    print(\"\\n\\n6. PERFORMANCE GRAPHS\")\n",
    "    print(\"=\" * 80)\n",
    "\n",
    "    def plot_comparison(summary_df):\n",
    "        fig, axes = plt.subplots(2, 2, figsize=(15, 12))\n",
    "        \n",
    "        # Plot 1: Total Cost vs Interarrival Time\n",
    "        for servers in summary_df['servers'].unique():\n",
    "            subset = summary_df[summary_df['servers'] == servers]\n",
    "            axes[0,0].plot(subset['interarrival'], subset['avg_total_cost'], \n",
    "                          marker='o', linewidth=2, markersize=8, label=f'{servers} Server(s)')\n",
    "        axes[0,0].set_xlabel('Scheduled Interarrival Time (min)')\n",
    "        axes[0,0].set_ylabel('Average Total Cost ($)')\n",
    "        axes[0,0].set_title('Total Cost vs Interarrival Time\\n(Independent Scenario Streams)')\n",
    "        axes[0,0].legend()\n",
    "        axes[0,0].grid(True, alpha=0.3)\n",
    "        \n",
    "        # Plot 2: Average Waiting Time vs Interarrival Time\n",
    "        for servers in summary_df['servers'].unique():\n",
    "            subset = summary_df[summary_df['servers'] == servers]\n",
    "            axes[0,1].plot(subset['interarrival'], subset['avg_waiting_time'], \n",
    "                          marker='s', linewidth=2, markersize=8, label=f'{servers} Server(s)')\n",
    "        axes[0,1].set_xlabel('Scheduled Interarrival Time (min)')\n",
    "        axes[0,1].set_ylabel('Average Waiting Time (min)')\n",
    "        axes[0,1].set_title('Patient Waiting Time vs Interarrival Time')\n",
    "        axes[0,1].legend()\n",
    "        axes[0,1].grid(True, alpha=0.3)\n",
    "        \n",
    "        plt.tight_layout()\n",
    "        plt.show()\n",
    "\n",
    "    plot_comparison(summary_df)\n",
    "\n",
    "    print(\"\\n\" + \"=\" * 80)\n",
    "    print(\"SIMULATION COMPLETED SUCCESSFULLY!\")\n",
    "    print(\"All data has been exported to Excel files in the 'simulation_outputs' folder\")\n",
    "    print(\"\\nKey Improvements:\")\n",
    "    print(\"- ✓ Each scenario now has UNIQUE random number streams\")\n",
    "    print(\"- ✓ No correlation between different server/interarrival configurations\")\n",
    "    print(\"- ✓ Complete statistical independence across all scenarios\")\n",
    "    print(\"- ✓ Maintained reproducibility within each scenario\")\n",
    "    print(\"- ✓ All U values are different across scenarios\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "755895f2",
   "metadata": {},
   "source": [
    "### Final\n",
    "\n",
    "Key Features Included:\n",
    "1. Complete Antithetic Data:\n",
    "\n",
    "- Set 1: Original U values and generated times\n",
    "\n",
    "- Set 2: Antithetic U values (1-U) and their generated times\n",
    "\n",
    "- Alternating pattern in raw data export\n",
    "\n",
    "2. Independent Scenario Streams:\n",
    "\n",
    "- Unique random numbers for each (servers, interarrival) combination\n",
    "\n",
    "- No correlation between different scenarios\n",
    "\n",
    "- No correlation between each day within scenario (checked by me)\n",
    "\n",
    "3. Comprehensive Output:\n",
    "\n",
    "- Main Results: Clean summary for decision-makers\n",
    "\n",
    "- Sensitivity Analysis: Parameter impact analysis\n",
    "\n",
    "- Raw Data: Complete traceability with all U values and seeds\n",
    "\n",
    "4. Full Reproducibility:\n",
    "\n",
    "- Systematic seed management\n",
    "\n",
    "- Scenario-specific base seeds\n",
    "\n",
    "- Day-specific seeds within scenarios"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "0ef2bce9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CLINIC APPOINTMENT SYSTEM SIMULATION - COMPLETE WITH ANTITHETIC SETS\n",
      "================================================================================\n",
      "Testing 5 interarrival times: 10, 15, 20, 25, 30 minutes\n",
      "With 1 and 2 server configurations\n",
      "Each scenario has UNIQUE random number streams\n",
      "Raw data includes BOTH antithetic sets\n",
      "================================================================================\n",
      "\n",
      "1. SAMPLE DAY - COMPACT PATIENT TABLE\n",
      "================================================================================\n",
      "Configuration: 1 Server, 20-min Interarrival, 20-min Mean Service Time\n",
      "Seed: 42\n",
      "--------------------------------------------------------------------------------\n",
      "\n",
      "COMPACT PATIENT SCHEDULE TABLE (All 24 Patients)\n",
      "--------------------------------------------------------------------------------\n",
      "Customer Sequence Arrival time Service starting time Service time Service ending time Waiting Time\n",
      "                1          0.6                   0.6         35.7                36.4          0.0\n",
      "                2         34.6                  36.4          4.8                41.1          1.8\n",
      "                3         47.3                  47.3          4.0                51.3          0.0\n",
      "                4         64.5                  64.5          4.0                68.5          0.0\n",
      "                5         76.8                  76.8          7.3                84.1          0.0\n",
      "                6         96.8                  96.8         14.9               111.7          0.0\n",
      "                7        114.2                 114.2         11.3               125.5          0.0\n",
      "                8        151.0                 151.0          6.9               157.9          0.0\n",
      "                9        164.5                 164.5         18.9               183.5          0.0\n",
      "               10        186.8                 186.8          3.0               189.8          0.0\n",
      "               11        192.5                 192.5          6.9               199.4          0.0\n",
      "               12        235.8                 235.8          9.1               244.9          0.0\n",
      "               13        245.0                 245.0          3.7               248.7          0.0\n",
      "               14        253.8                 253.8         31.0               284.8          0.0\n",
      "               15        279.0                 284.8         34.1               318.9          5.9\n",
      "               16        301.1                 318.9         33.9               352.9         17.9\n",
      "               17        330.3                 352.9         23.8               376.6         22.5\n",
      "               18        350.3                 376.6         12.9               389.6         26.3\n",
      "               19        374.1                 389.6         16.8               406.3         15.4\n",
      "               20        376.3                 406.3         24.7               431.0         30.0\n",
      "               21        401.0                 431.0          9.8               440.8         30.0\n",
      "               22        419.4                 440.8         39.4               480.2         21.5\n",
      "               23        456.5                 480.2         24.6               504.8         23.7\n",
      "               24        453.0                 504.8         20.1               524.9         51.8\n",
      "\n",
      "--------------------------------------------------------------------------------\n",
      "PERFORMANCE SUMMARY FOR SAMPLE DAY\n",
      "Total Waiting Time: 246.9 min\n",
      "Average Waiting Time: 10.3 min\n",
      "Doctor Idle Time: 123.3 min\n",
      "Doctor Overtime: 44.9 min\n",
      "Last Service Ends: 524.9 min\n",
      "Total Cost: $192.92\n",
      "\n",
      "\n",
      "2. COMPREHENSIVE EXPERIMENT - INDEPENDENT SCENARIOS\n",
      "================================================================================\n",
      "Running simulation for 1000 days per scenario...\n",
      "Each scenario has UNIQUE random number streams\n",
      "GENERATING UNIQUE RANDOM STREAMS FOR EACH SCENARIO:\n",
      "--------------------------------------------------\n",
      "servers_1_interarrival_10 -> Base Seed: 1851408076\n",
      "servers_1_interarrival_15 -> Base Seed: 695667499\n",
      "servers_1_interarrival_20 -> Base Seed: 964887701\n",
      "servers_1_interarrival_25 -> Base Seed: 34750076\n",
      "servers_1_interarrival_30 -> Base Seed: 1012054170\n",
      "servers_2_interarrival_10 -> Base Seed: 1143910390\n",
      "servers_2_interarrival_15 -> Base Seed: 1684062783\n",
      "servers_2_interarrival_20 -> Base Seed: 1635951747\n",
      "servers_2_interarrival_25 -> Base Seed: 1129515566\n",
      "servers_2_interarrival_30 -> Base Seed: 396286589\n",
      "\n",
      "\n",
      "3. SENSITIVITY ANALYSIS\n",
      "================================================================================\n",
      "RUNNING SENSITIVITY ANALYSIS WITH INDEPENDENT STREAMS\n",
      "============================================================\n",
      "\n",
      "1. Service Time Sensitivity:\n",
      "----------------------------------------\n",
      "Service Mean: 15 min -> Avg Cost: $185.99, Avg Wait: 14.1 min\n",
      "Service Mean: 18 min -> Avg Cost: $186.96, Avg Wait: 23.7 min\n",
      "Service Mean: 20 min -> Avg Cost: $206.36, Avg Wait: 36.1 min\n",
      "Service Mean: 22 min -> Avg Cost: $258.19, Avg Wait: 53.3 min\n",
      "Service Mean: 25 min -> Avg Cost: $374.39, Avg Wait: 80.4 min\n",
      "\n",
      "\n",
      "4. DATA EXPORT TO EXCEL\n",
      "================================================================================\n",
      "\n",
      "Results exported to:\n",
      "  Main results: simulation_outputs/clinic_simulation_results_20251016_162326_main.xlsx\n",
      "  Sensitivity analysis: simulation_outputs/clinic_simulation_results_20251016_162326_sensitivity.xlsx\n",
      "  Raw data: simulation_outputs/clinic_simulation_results_20251016_162326_raw_data.xlsx\n",
      "  ✓ Raw data includes BOTH antithetic sets (Set1 and Set2)\n",
      "\n",
      "\n",
      "5. OPTIMAL SCHEDULE ANALYSIS\n",
      "================================================================================\n",
      "\n",
      "OPTIMAL CONFIGURATIONS:\n",
      "------------------------------------------------------------\n",
      "\n",
      "1 SERVER OPTIMAL:\n",
      "  Interarrival Time: 20 minutes\n",
      "  Average Daily Cost: $225.70\n",
      "  Average Waiting Time: 39.63 minutes\n",
      "  Average Overtime: 65.79 minutes\n",
      "  Utilization: 88.1%\n",
      "\n",
      "2 SERVER OPTIMAL:\n",
      "  Interarrival Time: 10 minutes\n",
      "  Average Daily Cost: $72.79\n",
      "  Average Waiting Time: 16.32 minutes\n",
      "  Average Overtime: 0.00 minutes\n",
      "  Utilization: 82.5%\n",
      "\n",
      "ALL CONFIGURATIONS COMPARISON:\n",
      "--------------------------------------------------------------------------------\n",
      " Servers  Interarrival  Avg Cost  Avg Wait  Avg Overtime  Utilization\n",
      "       1            10   329.489   120.312        29.855        0.978\n",
      "       1            15   229.525    72.181        32.559        0.953\n",
      "       1            20   225.703    39.631        65.790        0.881\n",
      "       1            25   340.123    21.714       144.518        0.770\n",
      "       1            30   523.410    12.373       246.705        0.660\n",
      "       2            10    72.794    16.321         0.000        0.825\n",
      "       2            15   112.014     4.212         0.152        0.624\n",
      "       2            20   193.053     1.316        13.556        0.490\n",
      "       2            25   381.698     0.599       122.542        0.400\n",
      "       2            30   582.475     0.244       237.158        0.333\n",
      "\n",
      "\n",
      "6. PERFORMANCE GRAPHS\n",
      "================================================================================\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x864 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "================================================================================\n",
      "SIMULATION COMPLETED SUCCESSFULLY!\n",
      "All data has been exported to Excel files in the 'simulation_outputs' folder\n",
      "\n",
      "Key Features:\n",
      "- ✓ Each scenario has UNIQUE random number streams\n",
      "- ✓ Raw data includes BOTH antithetic sets (Set1 and Set2)\n",
      "- ✓ Complete statistical independence across all scenarios\n",
      "- ✓ Full reproducibility with systematic seed management\n",
      "- ✓ Tested 5 interarrival times (10, 15, 20, 25, 30 minutes)\n",
      "- ✓ Compared 1-server vs 2-server configurations\n",
      "- ✓ Identified optimal schedules for minimum cost\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import os\n",
    "from datetime import datetime\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "class ClinicSimulation:\n",
    "    def __init__(self, num_servers=1, scheduled_interarrival=20, planning_horizon=480, \n",
    "                 patients_per_day=24, queue_capacity=20, cost_params=None,\n",
    "                 service_time_mean=20, base_seed=42):\n",
    "        \"\"\"\n",
    "        Initialize simulation with configuration parameters\n",
    "        \"\"\"\n",
    "        self.num_servers = num_servers\n",
    "        self.scheduled_interarrival = scheduled_interarrival\n",
    "        self.planning_horizon = planning_horizon\n",
    "        self.patients_per_day = patients_per_day\n",
    "        self.queue_capacity = queue_capacity\n",
    "        self.base_seed = base_seed\n",
    "        \n",
    "        self.cost_params = cost_params or {'C_w': 0.1, 'C_i': 1, 'C_o': 1}\n",
    "        self.triangular_min = -10\n",
    "        self.triangular_mode = 0\n",
    "        self.triangular_max = 20\n",
    "        self.service_time_mean = service_time_mean\n",
    "    \n",
    "    def generate_interarrival_time(self, U):\n",
    "        \"\"\"Generate interarrival time using constant + triangular distribution\"\"\"\n",
    "        F_mode = (self.triangular_mode - self.triangular_min) / (self.triangular_max - self.triangular_min)\n",
    "        triangular_component = np.where(\n",
    "            U <= F_mode,\n",
    "            self.triangular_min + np.sqrt(U * (self.triangular_max - self.triangular_min) * (self.triangular_mode - self.triangular_min)),\n",
    "            self.triangular_max - np.sqrt((1 - U) * (self.triangular_max - self.triangular_min) * (self.triangular_max - self.triangular_mode))\n",
    "        )\n",
    "        return self.scheduled_interarrival + triangular_component\n",
    "    \n",
    "    def generate_service_time(self, U):\n",
    "        \"\"\"Generate service time using inverse transform for exponential distribution\"\"\"\n",
    "        return -np.log(1 - U) * self.service_time_mean\n",
    "    \n",
    "    def simulate_single_day(self, use_antithetic=False, day_seed=None, store_raw_data=False):\n",
    "        \"\"\"\n",
    "        Simulate one complete day at the clinic\n",
    "        \"\"\"\n",
    "        # SET SEED HERE - This is the key reproducibility point!\n",
    "        if day_seed is not None:\n",
    "            np.random.seed(day_seed)\n",
    "        else:\n",
    "            np.random.seed(self.base_seed)\n",
    "        \n",
    "        n_patients = self.patients_per_day\n",
    "        raw_data = {}\n",
    "        \n",
    "        if use_antithetic:\n",
    "            half_n = n_patients // 2\n",
    "            # INDEPENDENT STREAMS: Different U for interarrival vs service\n",
    "            U_interarrival = np.random.uniform(0, 1, half_n)\n",
    "            U_service = np.random.uniform(0, 1, half_n)\n",
    "            \n",
    "            if store_raw_data:\n",
    "                raw_data['U_interarrival_antithetic_set1'] = U_interarrival.tolist()\n",
    "                raw_data['U_service_antithetic_set1'] = U_service.tolist()\n",
    "                raw_data['U_interarrival_antithetic_set2'] = (1 - U_interarrival).tolist()\n",
    "                raw_data['U_service_antithetic_set2'] = (1 - U_service).tolist()\n",
    "            \n",
    "            interarrival_times1 = np.array([self.generate_interarrival_time(u) for u in U_interarrival])\n",
    "            interarrival_times2 = np.array([self.generate_interarrival_time(1-u) for u in U_interarrival])\n",
    "            service_times1 = np.array([self.generate_service_time(u) for u in U_service])\n",
    "            service_times2 = np.array([self.generate_service_time(1-u) for u in U_service])\n",
    "            \n",
    "            interarrival_times = np.concatenate([interarrival_times1, interarrival_times2])\n",
    "            service_times = np.concatenate([service_times1, service_times2])\n",
    "            \n",
    "            if store_raw_data:\n",
    "                raw_data['interarrival_times_set1'] = interarrival_times1.tolist()\n",
    "                raw_data['interarrival_times_set2'] = interarrival_times2.tolist()\n",
    "                raw_data['service_times_set1'] = service_times1.tolist()\n",
    "                raw_data['service_times_set2'] = service_times2.tolist()\n",
    "        else:\n",
    "            # INDEPENDENT STREAMS: Different U for interarrival vs service\n",
    "            U_interarrival = np.random.uniform(0, 1, n_patients)\n",
    "            U_service = np.random.uniform(0, 1, n_patients)\n",
    "            \n",
    "            if store_raw_data:\n",
    "                raw_data['U_interarrival'] = U_interarrival.tolist()\n",
    "                raw_data['U_service'] = U_service.tolist()\n",
    "            \n",
    "            interarrival_times = np.array([self.generate_interarrival_time(u) for u in U_interarrival])\n",
    "            service_times = np.array([self.generate_service_time(u) for u in U_service])\n",
    "            \n",
    "            if store_raw_data:\n",
    "                raw_data['interarrival_times'] = interarrival_times.tolist()\n",
    "                raw_data['service_times'] = service_times.tolist()\n",
    "        \n",
    "        # Calculate scheduled arrival times (starting from time 0)\n",
    "        scheduled_arrivals = np.arange(0, n_patients * self.scheduled_interarrival, self.scheduled_interarrival)\n",
    "        \n",
    "        # Calculate actual arrival times (scheduled time + punctuality variation)\n",
    "        lateness = interarrival_times - self.scheduled_interarrival\n",
    "        actual_arrival_times = scheduled_arrivals + lateness\n",
    "        \n",
    "        # Allow negative arrival times (patients arriving before clinic opens)\n",
    "        # But service can only start at or after time 0\n",
    "        service_start_times = np.zeros(n_patients)\n",
    "        service_end_times = np.zeros(n_patients)\n",
    "        waiting_times = np.zeros(n_patients)\n",
    "        server_assignment = np.zeros(n_patients, dtype=int)\n",
    "        \n",
    "        if self.num_servers == 1:\n",
    "            for i in range(n_patients):\n",
    "                if i == 0:\n",
    "                    # First patient: service starts at max(0, arrival_time)\n",
    "                    service_start_times[i] = max(0, actual_arrival_times[i])\n",
    "                else:\n",
    "                    service_start_times[i] = max(actual_arrival_times[i], service_end_times[i-1])\n",
    "                service_end_times[i] = service_start_times[i] + service_times[i]\n",
    "                waiting_times[i] = max(0, service_start_times[i] - actual_arrival_times[i])\n",
    "                server_assignment[i] = 0\n",
    "        else:\n",
    "            server_end_times = [0] * self.num_servers  # All servers start available at time 0\n",
    "            for i in range(n_patients):\n",
    "                next_available_time = min(server_end_times)\n",
    "                server_index = server_end_times.index(next_available_time)\n",
    "                service_start_times[i] = max(actual_arrival_times[i], next_available_time)\n",
    "                service_end_times[i] = service_start_times[i] + service_times[i]\n",
    "                waiting_times[i] = max(0, service_start_times[i] - actual_arrival_times[i])\n",
    "                server_assignment[i] = server_index\n",
    "                server_end_times[server_index] = service_end_times[i]\n",
    "        \n",
    "        # Use full column names as originally specified\n",
    "        results_df = pd.DataFrame({\n",
    "            'Customer Sequence': range(1, n_patients + 1),\n",
    "            'Arrival time': actual_arrival_times,\n",
    "            'Service starting time': service_start_times,\n",
    "            'Service time': service_times,\n",
    "            'Service ending time': service_end_times,\n",
    "            'Waiting Time': waiting_times\n",
    "        })\n",
    "        \n",
    "        if store_raw_data:\n",
    "            raw_data['scheduled_arrivals'] = scheduled_arrivals.tolist()\n",
    "            raw_data['actual_arrival_times'] = actual_arrival_times.tolist()\n",
    "            raw_data['lateness'] = lateness.tolist()\n",
    "            raw_data['service_start_times'] = service_start_times.tolist()\n",
    "            raw_data['service_end_times'] = service_end_times.tolist()\n",
    "            raw_data['waiting_times'] = waiting_times.tolist()\n",
    "            raw_data['server_assignment'] = server_assignment.tolist()\n",
    "            raw_data['day_seed'] = day_seed\n",
    "            return results_df, raw_data\n",
    "        \n",
    "        return results_df\n",
    "    \n",
    "    def calculate_performance_metrics(self, results_df):\n",
    "        last_service_end = results_df['Service ending time'].max()\n",
    "        overtime = max(0, last_service_end - self.planning_horizon)\n",
    "        \n",
    "        idle_time = 0\n",
    "        if self.num_servers == 1:\n",
    "            for i in range(1, len(results_df)):\n",
    "                idle_gap = results_df.loc[i, 'Service starting time'] - results_df.loc[i-1, 'Service ending time']\n",
    "                idle_time += max(0, idle_gap)\n",
    "            # Initial idle time before first patient starts\n",
    "            idle_time += max(0, results_df.loc[0, 'Service starting time'] - 0)\n",
    "        else:\n",
    "            server_last_end = {server: 0 for server in range(self.num_servers)}\n",
    "            for _, patient in results_df.iterrows():\n",
    "                server = patient.get('Server', 0)\n",
    "                start_time = patient['Service starting time']\n",
    "                idle_gap = start_time - server_last_end[server]\n",
    "                idle_time += max(0, idle_gap)\n",
    "                server_last_end[server] = patient['Service ending time']\n",
    "        \n",
    "        total_waiting_time = results_df['Waiting Time'].sum()\n",
    "        total_cost = (total_waiting_time * self.cost_params['C_w'] + \n",
    "                     idle_time * self.cost_params['C_i'] + \n",
    "                     overtime * self.cost_params['C_o'])\n",
    "        \n",
    "        performance_metrics = {\n",
    "            'total_waiting_time': total_waiting_time,\n",
    "            'idle_time': idle_time,\n",
    "            'overtime': overtime,\n",
    "            'total_cost': total_cost,\n",
    "            'last_service_end': last_service_end,\n",
    "            'avg_waiting_time': total_waiting_time / len(results_df),\n",
    "            'utilization': (results_df['Service time'].sum() / \n",
    "                          (self.num_servers * last_service_end)) if last_service_end > 0 else 0\n",
    "        }\n",
    "        \n",
    "        return performance_metrics\n",
    "\n",
    "def generate_scenario_seed(base_seed, num_servers, scheduled_interarrival):\n",
    "    \"\"\"\n",
    "    Generate unique base seed for each scenario combination\n",
    "    This ensures different random numbers across different scenarios\n",
    "    \"\"\"\n",
    "    # Create a unique seed based on scenario parameters\n",
    "    scenario_hash = hash(f\"{num_servers}_{scheduled_interarrival}\") % (2**31)\n",
    "    return base_seed + scenario_hash\n",
    "\n",
    "def run_multiple_days_simulation(num_datasets=1000, num_servers=1, scheduled_interarrival=20, \n",
    "                               cost_params=None, use_antithetic=True, service_time_mean=20,\n",
    "                               base_seed=42, store_raw_data=False):\n",
    "    \"\"\"\n",
    "    Run simulation for multiple days with systematic seeding\n",
    "    \"\"\"\n",
    "    \n",
    "    # Generate unique seed for this specific scenario\n",
    "    scenario_base_seed = generate_scenario_seed(base_seed, num_servers, scheduled_interarrival)\n",
    "    \n",
    "    sim = ClinicSimulation(\n",
    "        num_servers=num_servers, \n",
    "        scheduled_interarrival=scheduled_interarrival,\n",
    "        cost_params=cost_params,\n",
    "        service_time_mean=service_time_mean,\n",
    "        base_seed=scenario_base_seed  # UNIQUE SEED FOR THIS SCENARIO\n",
    "    )\n",
    "    \n",
    "    daily_results = []\n",
    "    daily_metrics = []\n",
    "    raw_data_all_days = []\n",
    "    \n",
    "    for day in range(num_datasets):\n",
    "        # SYSTEMATIC SEEDING: Each day gets scenario_base_seed + day_number\n",
    "        day_seed = scenario_base_seed + day  # UNIQUE SEED FOR EACH DAY IN THIS SCENARIO\n",
    "        \n",
    "        if store_raw_data:\n",
    "            day_results, day_raw_data = sim.simulate_single_day(\n",
    "                use_antithetic=use_antithetic, \n",
    "                day_seed=day_seed,\n",
    "                store_raw_data=True\n",
    "            )\n",
    "            day_raw_data['day'] = day + 1\n",
    "            day_raw_data['day_seed'] = day_seed\n",
    "            day_raw_data['scenario_base_seed'] = scenario_base_seed\n",
    "            raw_data_all_days.append(day_raw_data)\n",
    "        else:\n",
    "            day_results = sim.simulate_single_day(\n",
    "                use_antithetic=use_antithetic, \n",
    "                day_seed=day_seed,\n",
    "                store_raw_data=False\n",
    "            )\n",
    "        \n",
    "        metrics = sim.calculate_performance_metrics(day_results)\n",
    "        \n",
    "        daily_results.append(day_results)\n",
    "        daily_metrics.append({\n",
    "            'day': day + 1,\n",
    "            'day_seed': day_seed,\n",
    "            'scenario_base_seed': scenario_base_seed,\n",
    "            'total_waiting_time': metrics['total_waiting_time'],\n",
    "            'idle_time': metrics['idle_time'],\n",
    "            'overtime': metrics['overtime'],\n",
    "            'total_cost': metrics['total_cost'],\n",
    "            'avg_waiting_time': metrics['avg_waiting_time'],\n",
    "            'utilization': metrics['utilization'],\n",
    "            'service_time_mean': service_time_mean\n",
    "        })\n",
    "    \n",
    "    metrics_df = pd.DataFrame(daily_metrics)\n",
    "    \n",
    "    if store_raw_data:\n",
    "        return daily_results, metrics_df, raw_data_all_days\n",
    "    else:\n",
    "        return daily_results, metrics_df\n",
    "\n",
    "def run_comprehensive_experiment(service_time_mean=20, base_seed=42):\n",
    "    cost_params = {'C_w': 0.1, 'C_i': 1, 'C_o': 1}\n",
    "    \n",
    "    # Exactly 5 interarrival times between 10-30 minutes as requested\n",
    "    scheduled_interarrivals = [10, 15, 20, 25, 30]\n",
    "    server_configs = [1, 2]\n",
    "    num_datasets = 1000\n",
    "    \n",
    "    all_results_with_raw = {}\n",
    "    \n",
    "    print(\"GENERATING UNIQUE RANDOM STREAMS FOR EACH SCENARIO:\")\n",
    "    print(\"-\" * 50)\n",
    "    \n",
    "    for num_servers in server_configs:\n",
    "        for interarrival in scheduled_interarrivals:\n",
    "            key = f\"servers_{num_servers}_interarrival_{interarrival}\"\n",
    "            \n",
    "            # Generate unique base seed for this scenario\n",
    "            scenario_base_seed = generate_scenario_seed(base_seed, num_servers, interarrival)\n",
    "            print(f\"{key} -> Base Seed: {scenario_base_seed}\")\n",
    "            \n",
    "            daily_results, metrics_df, raw_data_all_days = run_multiple_days_simulation(\n",
    "                num_datasets=num_datasets,\n",
    "                num_servers=num_servers,\n",
    "                scheduled_interarrival=interarrival,\n",
    "                cost_params=cost_params,\n",
    "                service_time_mean=service_time_mean,\n",
    "                base_seed=base_seed,  # Pass the master base seed\n",
    "                store_raw_data=True\n",
    "            )\n",
    "            \n",
    "            all_results_with_raw[key] = {\n",
    "                'daily_results': daily_results,\n",
    "                'metrics_df': metrics_df,\n",
    "                'raw_data': raw_data_all_days,\n",
    "                'scenario_base_seed': scenario_base_seed\n",
    "            }\n",
    "    \n",
    "    return all_results_with_raw\n",
    "\n",
    "def run_sensitivity_analysis(base_params=None, variations=None):\n",
    "    \"\"\"Run sensitivity analysis by varying key parameters\"\"\"\n",
    "    if base_params is None:\n",
    "        base_params = {\n",
    "            'num_servers': 1,\n",
    "            'scheduled_interarrival': 20,\n",
    "            'service_time_mean': 20,\n",
    "            'cost_params': {'C_w': 0.1, 'C_i': 1, 'C_o': 1}\n",
    "        }\n",
    "    \n",
    "    if variations is None:\n",
    "        variations = {\n",
    "            'service_time_mean': [15, 18, 20, 22, 25],\n",
    "            'scheduled_interarrival': [10, 15, 20, 25, 30],\n",
    "            'C_w': [0.05, 0.1, 0.2, 0.5],\n",
    "            'C_i': [0.5, 1, 2, 5],\n",
    "            'C_o': [0.5, 1, 2, 5]\n",
    "        }\n",
    "    \n",
    "    sensitivity_results = {}\n",
    "    \n",
    "    print(\"RUNNING SENSITIVITY ANALYSIS WITH INDEPENDENT STREAMS\")\n",
    "    print(\"=\" * 60)\n",
    "    \n",
    "    # Service time sensitivity\n",
    "    print(\"\\n1. Service Time Sensitivity:\")\n",
    "    print(\"-\" * 40)\n",
    "    for service_mean in variations['service_time_mean']:\n",
    "        params = base_params.copy()\n",
    "        params['service_time_mean'] = service_mean\n",
    "        \n",
    "        # Generate unique seed for this sensitivity test\n",
    "        sensitivity_seed = generate_scenario_seed(42, params['num_servers'], params['scheduled_interarrival']) + hash(f\"service_{service_mean}\") % 1000\n",
    "        \n",
    "        daily_results, metrics_df = run_multiple_days_simulation(\n",
    "            num_datasets=100,\n",
    "            num_servers=params['num_servers'],\n",
    "            scheduled_interarrival=params['scheduled_interarrival'],\n",
    "            cost_params=params['cost_params'],\n",
    "            service_time_mean=service_mean,\n",
    "            base_seed=sensitivity_seed\n",
    "        )\n",
    "        \n",
    "        avg_cost = metrics_df['total_cost'].mean()\n",
    "        avg_wait = metrics_df['avg_waiting_time'].mean()\n",
    "        \n",
    "        sensitivity_results[f'service_mean_{service_mean}'] = {\n",
    "            'avg_cost': avg_cost,\n",
    "            'avg_wait': avg_wait,\n",
    "            'params': params\n",
    "        }\n",
    "        \n",
    "        print(f\"Service Mean: {service_mean} min -> Avg Cost: ${avg_cost:.2f}, Avg Wait: {avg_wait:.1f} min\")\n",
    "    \n",
    "    return sensitivity_results\n",
    "\n",
    "def export_to_excel(all_results, sensitivity_results=None, raw_data_all=None, filename=None):\n",
    "    \"\"\"Export all simulation results to Excel files\"\"\"\n",
    "    if filename is None:\n",
    "        timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n",
    "        filename = f\"clinic_simulation_results_{timestamp}\"\n",
    "    \n",
    "    # Create output directory\n",
    "    os.makedirs('simulation_outputs', exist_ok=True)\n",
    "    \n",
    "    # Create main results workbook\n",
    "    with pd.ExcelWriter(f'simulation_outputs/{filename}_main.xlsx', engine='openpyxl') as writer:\n",
    "        \n",
    "        # Summary sheet\n",
    "        summary_data = []\n",
    "        for key, result in all_results.items():\n",
    "            avg_metrics = result['metrics_df'].mean()\n",
    "            summary_data.append({\n",
    "                'Configuration': key,\n",
    "                'Scheduled Interarrival': int(key.split('_')[-1]),\n",
    "                'Number of Servers': int(key.split('_')[1]),\n",
    "                'Average Total Cost': avg_metrics['total_cost'],\n",
    "                'Std Total Cost': result['metrics_df']['total_cost'].std(),\n",
    "                'Average Waiting Time': avg_metrics['avg_waiting_time'],\n",
    "                'Average Idle Time': avg_metrics['idle_time'],\n",
    "                'Average Overtime': avg_metrics['overtime'],\n",
    "                'Average Utilization': avg_metrics['utilization']\n",
    "            })\n",
    "        \n",
    "        summary_df = pd.DataFrame(summary_data)\n",
    "        summary_df.to_excel(writer, sheet_name='Summary', index=False)\n",
    "        \n",
    "        # Performance metrics for each configuration\n",
    "        for key, result in all_results.items():\n",
    "            metrics_df = result['metrics_df']\n",
    "            metrics_df_display = metrics_df.rename(columns={\n",
    "                'total_waiting_time': 'Total Waiting Time',\n",
    "                'idle_time': 'Doctor Idle Time', \n",
    "                'overtime': 'Doctor Overtime',\n",
    "                'total_cost': 'Total Cost',\n",
    "                'avg_waiting_time': 'Average Waiting Time',\n",
    "                'utilization': 'Utilization Rate'\n",
    "            })\n",
    "            metrics_df_display.to_excel(writer, sheet_name=f'{key}_Metrics', index=False)\n",
    "            \n",
    "            # Sample patient data (first 3 days)\n",
    "            for day in range(min(3, len(result['daily_results']))):\n",
    "                day_df = result['daily_results'][day]\n",
    "                day_df.to_excel(writer, sheet_name=f'{key}_Day{day+1}', index=False)\n",
    "    \n",
    "    # Create sensitivity analysis workbook\n",
    "    if sensitivity_results:\n",
    "        with pd.ExcelWriter(f'simulation_outputs/{filename}_sensitivity.xlsx', engine='openpyxl') as writer:\n",
    "            sensitivity_data = []\n",
    "            for key, result in sensitivity_results.items():\n",
    "                sensitivity_data.append({\n",
    "                    'Parameter Variation': key,\n",
    "                    'Average Cost': result['avg_cost'],\n",
    "                    'Average Wait Time': result.get('avg_wait', None),\n",
    "                    'Parameters': str(result['params'])\n",
    "                })\n",
    "            \n",
    "            sensitivity_df = pd.DataFrame(sensitivity_data)\n",
    "            sensitivity_df.to_excel(writer, sheet_name='Sensitivity Analysis', index=False)\n",
    "    \n",
    "    # Create raw data workbook - INCLUDES BOTH ANTITHETIC SETS\n",
    "    if raw_data_all:\n",
    "        with pd.ExcelWriter(f'simulation_outputs/{filename}_raw_data.xlsx', engine='openpyxl') as writer:\n",
    "            for config_key, config_data in raw_data_all.items():\n",
    "                # Create a sheet for each configuration\n",
    "                raw_data_list = []\n",
    "                \n",
    "                for day_data in config_data['raw_data']:\n",
    "                    day_num = day_data['day']\n",
    "                    day_seed = day_data['day_seed']\n",
    "                    scenario_base_seed = day_data.get('scenario_base_seed', 'N/A')\n",
    "                    \n",
    "                    # Extract uniform random numbers\n",
    "                    if 'U_interarrival_antithetic_set1' in day_data:\n",
    "                        # Antithetic case - INCLUDES BOTH SETS\n",
    "                        for i, (u_int1, u_int2, u_serv1, u_serv2) in enumerate(zip(\n",
    "                            day_data['U_interarrival_antithetic_set1'],\n",
    "                            day_data['U_interarrival_antithetic_set2'],\n",
    "                            day_data['U_service_antithetic_set1'],\n",
    "                            day_data['U_service_antithetic_set2']\n",
    "                        )):\n",
    "                            # Set 1 data\n",
    "                            raw_data_list.append({\n",
    "                                'Configuration': config_key,\n",
    "                                'Scenario Base Seed': scenario_base_seed,\n",
    "                                'Day': day_num,\n",
    "                                'Day Seed': day_seed,\n",
    "                                'Patient Group': f'Set1_Patient{i+1}',\n",
    "                                'U Interarrival': u_int1,\n",
    "                                'U Service': u_serv1,\n",
    "                                'Interarrival Time': day_data['interarrival_times_set1'][i],\n",
    "                                'Service Time': day_data['service_times_set1'][i],\n",
    "                                'Method': 'Antithetic_Set1'\n",
    "                            })\n",
    "                            # Set 2 data - INCLUDED\n",
    "                            raw_data_list.append({\n",
    "                                'Configuration': config_key,\n",
    "                                'Scenario Base Seed': scenario_base_seed,\n",
    "                                'Day': day_num,\n",
    "                                'Day Seed': day_seed,\n",
    "                                'Patient Group': f'Set2_Patient{i+1}',\n",
    "                                'U Interarrival': u_int2,\n",
    "                                'U Service': u_serv2,\n",
    "                                'Interarrival Time': day_data['interarrival_times_set2'][i],\n",
    "                                'Service Time': day_data['service_times_set2'][i],\n",
    "                                'Method': 'Antithetic_Set2'\n",
    "                            })\n",
    "                    else:\n",
    "                        # Regular case (non-antithetic)\n",
    "                        for i, (u_int, u_serv) in enumerate(zip(\n",
    "                            day_data['U_interarrival'],\n",
    "                            day_data['U_service']\n",
    "                        )):\n",
    "                            raw_data_list.append({\n",
    "                                'Configuration': config_key,\n",
    "                                'Scenario Base Seed': scenario_base_seed,\n",
    "                                'Day': day_num,\n",
    "                                'Day Seed': day_seed,\n",
    "                                'Patient': i+1,\n",
    "                                'U Interarrival': u_int,\n",
    "                                'U Service': u_serv,\n",
    "                                'Interarrival Time': day_data['interarrival_times'][i],\n",
    "                                'Service Time': day_data['service_times'][i],\n",
    "                                'Method': 'Standard'\n",
    "                            })\n",
    "                \n",
    "                raw_data_df = pd.DataFrame(raw_data_list)\n",
    "                raw_data_df.to_excel(writer, sheet_name=f'{config_key}_RawData', index=False)\n",
    "    \n",
    "    print(f\"\\nResults exported to:\")\n",
    "    print(f\"  Main results: simulation_outputs/{filename}_main.xlsx\")\n",
    "    if sensitivity_results:\n",
    "        print(f\"  Sensitivity analysis: simulation_outputs/{filename}_sensitivity.xlsx\")\n",
    "    if raw_data_all:\n",
    "        print(f\"  Raw data: simulation_outputs/{filename}_raw_data.xlsx\")\n",
    "        print(f\"  ✓ Raw data includes BOTH antithetic sets (Set1 and Set2)\")\n",
    "    \n",
    "    return filename\n",
    "\n",
    "# MAIN EXECUTION\n",
    "def main():\n",
    "    print(\"CLINIC APPOINTMENT SYSTEM SIMULATION - COMPLETE WITH ANTITHETIC SETS\")\n",
    "    print(\"=\" * 80)\n",
    "    print(\"Testing 5 interarrival times: 10, 15, 20, 25, 30 minutes\")\n",
    "    print(\"With 1 and 2 server configurations\")\n",
    "    print(\"Each scenario has UNIQUE random number streams\")\n",
    "    print(\"Raw data includes BOTH antithetic sets\")\n",
    "    print(\"=\" * 80)\n",
    "    \n",
    "    # Create output directory\n",
    "    os.makedirs('simulation_outputs', exist_ok=True)\n",
    "    \n",
    "    # 1. Show sample day with compact table\n",
    "    print(\"\\n1. SAMPLE DAY - COMPACT PATIENT TABLE\")\n",
    "    print(\"=\" * 80)\n",
    "    sim = ClinicSimulation(num_servers=1, scheduled_interarrival=20, service_time_mean=20, base_seed=42)\n",
    "    sample_day, raw_data = sim.simulate_single_day(use_antithetic=True, day_seed=42, store_raw_data=True)\n",
    "    sample_metrics = sim.calculate_performance_metrics(sample_day)\n",
    "\n",
    "    print(f\"Configuration: 1 Server, 20-min Interarrival, 20-min Mean Service Time\")\n",
    "    print(f\"Seed: 42\")\n",
    "    print(\"-\" * 80)\n",
    "\n",
    "    # Display compact table for all 24 patients with full column names\n",
    "    compact_df = sample_day.round(2)\n",
    "    print(\"\\nCOMPACT PATIENT SCHEDULE TABLE (All 24 Patients)\")\n",
    "    print(\"-\" * 80)\n",
    "    print(compact_df.to_string(index=False, formatters={\n",
    "        'Customer Sequence': '{:>2}'.format,\n",
    "        'Arrival time': '{:>8.1f}'.format,\n",
    "        'Service starting time': '{:>8.1f}'.format,\n",
    "        'Service time': '{:>6.1f}'.format,\n",
    "        'Service ending time': '{:>8.1f}'.format,\n",
    "        'Waiting Time': '{:>6.1f}'.format\n",
    "    }))\n",
    "\n",
    "    print(\"\\n\" + \"-\" * 80)\n",
    "    print(\"PERFORMANCE SUMMARY FOR SAMPLE DAY\")\n",
    "    print(f\"Total Waiting Time: {sample_metrics['total_waiting_time']:.1f} min\")\n",
    "    print(f\"Average Waiting Time: {sample_metrics['avg_waiting_time']:.1f} min\")\n",
    "    print(f\"Doctor Idle Time: {sample_metrics['idle_time']:.1f} min\")\n",
    "    print(f\"Doctor Overtime: {sample_metrics['overtime']:.1f} min\")\n",
    "    print(f\"Last Service Ends: {sample_metrics['last_service_end']:.1f} min\")\n",
    "    print(f\"Total Cost: ${sample_metrics['total_cost']:.2f}\")\n",
    "\n",
    "    # 2. Run comprehensive experiment with all 5 interarrival times\n",
    "    print(\"\\n\\n2. COMPREHENSIVE EXPERIMENT - INDEPENDENT SCENARIOS\")\n",
    "    print(\"=\" * 80)\n",
    "    print(\"Running simulation for 1000 days per scenario...\")\n",
    "    print(\"Each scenario has UNIQUE random number streams\")\n",
    "\n",
    "    all_results_with_raw = run_comprehensive_experiment(service_time_mean=20, base_seed=42)\n",
    "\n",
    "    # 3. Run sensitivity analysis\n",
    "    print(\"\\n\\n3. SENSITIVITY ANALYSIS\")\n",
    "    print(\"=\" * 80)\n",
    "    sensitivity_results = run_sensitivity_analysis()\n",
    "\n",
    "    # 4. Export all data to Excel files\n",
    "    print(\"\\n\\n4. DATA EXPORT TO EXCEL\")\n",
    "    print(\"=\" * 80)\n",
    "    \n",
    "    # Prepare all_results for export\n",
    "    all_results_for_export = {}\n",
    "    for key, result in all_results_with_raw.items():\n",
    "        all_results_for_export[key] = {\n",
    "            'daily_results': result['daily_results'],\n",
    "            'metrics_df': result['metrics_df']\n",
    "        }\n",
    "    \n",
    "    # Export to Excel\n",
    "    export_filename = export_to_excel(\n",
    "        all_results_for_export, \n",
    "        sensitivity_results, \n",
    "        all_results_with_raw\n",
    "    )\n",
    "\n",
    "    # 5. Display optimal configurations\n",
    "    print(\"\\n\\n5. OPTIMAL SCHEDULE ANALYSIS\")\n",
    "    print(\"=\" * 80)\n",
    "    \n",
    "    summary_stats = []\n",
    "    for key, result in all_results_with_raw.items():\n",
    "        avg_metrics = result['metrics_df'].mean()\n",
    "        servers = int(key.split('_')[1])\n",
    "        interarrival = int(key.split('_')[-1])\n",
    "        \n",
    "        summary_stats.append({\n",
    "            'servers': servers,\n",
    "            'interarrival': interarrival,\n",
    "            'config': key,\n",
    "            'avg_total_cost': avg_metrics['total_cost'],\n",
    "            'avg_waiting_time': avg_metrics['avg_waiting_time'],\n",
    "            'avg_overtime': avg_metrics['overtime'],\n",
    "            'avg_utilization': avg_metrics['utilization']\n",
    "        })\n",
    "    \n",
    "    summary_df = pd.DataFrame(summary_stats)\n",
    "    \n",
    "    # Find optimal configurations\n",
    "    print(\"\\nOPTIMAL CONFIGURATIONS:\")\n",
    "    print(\"-\" * 60)\n",
    "    \n",
    "    for servers in [1, 2]:\n",
    "        server_data = summary_df[summary_df['servers'] == servers]\n",
    "        optimal_idx = server_data['avg_total_cost'].idxmin()\n",
    "        optimal = server_data.loc[optimal_idx]\n",
    "        \n",
    "        print(f\"\\n{servers} SERVER OPTIMAL:\")\n",
    "        print(f\"  Interarrival Time: {optimal['interarrival']} minutes\")\n",
    "        print(f\"  Average Daily Cost: ${optimal['avg_total_cost']:.2f}\")\n",
    "        print(f\"  Average Waiting Time: {optimal['avg_waiting_time']:.2f} minutes\")\n",
    "        print(f\"  Average Overtime: {optimal['avg_overtime']:.2f} minutes\")\n",
    "        print(f\"  Utilization: {optimal['avg_utilization']:.1%}\")\n",
    "    \n",
    "    # Display all results comparison\n",
    "    print(f\"\\nALL CONFIGURATIONS COMPARISON:\")\n",
    "    print(\"-\" * 80)\n",
    "    display_cols = ['servers', 'interarrival', 'avg_total_cost', 'avg_waiting_time', 'avg_overtime', 'avg_utilization']\n",
    "    display_df = summary_df[display_cols].round(3)\n",
    "    display_df.columns = ['Servers', 'Interarrival', 'Avg Cost', 'Avg Wait', 'Avg Overtime', 'Utilization']\n",
    "    print(display_df.to_string(index=False))\n",
    "\n",
    "    # 6. Plotting results\n",
    "    print(\"\\n\\n6. PERFORMANCE GRAPHS\")\n",
    "    print(\"=\" * 80)\n",
    "\n",
    "    def plot_comparison(summary_df):\n",
    "        fig, axes = plt.subplots(2, 2, figsize=(15, 12))\n",
    "        \n",
    "        # Plot 1: Total Cost vs Interarrival Time\n",
    "        for servers in summary_df['servers'].unique():\n",
    "            subset = summary_df[summary_df['servers'] == servers]\n",
    "            axes[0,0].plot(subset['interarrival'], subset['avg_total_cost'], \n",
    "                          marker='o', linewidth=2, markersize=8, label=f'{servers} Server(s)')\n",
    "        axes[0,0].set_xlabel('Scheduled Interarrival Time (min)')\n",
    "        axes[0,0].set_ylabel('Average Total Cost ($)')\n",
    "        axes[0,0].set_title('Total Cost vs Interarrival Time\\n(Independent Scenario Streams)')\n",
    "        axes[0,0].legend()\n",
    "        axes[0,0].grid(True, alpha=0.3)\n",
    "        \n",
    "        # Plot 2: Average Waiting Time vs Interarrival Time\n",
    "        for servers in summary_df['servers'].unique():\n",
    "            subset = summary_df[summary_df['servers'] == servers]\n",
    "            axes[0,1].plot(subset['interarrival'], subset['avg_waiting_time'], \n",
    "                          marker='s', linewidth=2, markersize=8, label=f'{servers} Server(s)')\n",
    "        axes[0,1].set_xlabel('Scheduled Interarrival Time (min)')\n",
    "        axes[0,1].set_ylabel('Average Waiting Time (min)')\n",
    "        axes[0,1].set_title('Patient Waiting Time vs Interarrival Time')\n",
    "        axes[0,1].legend()\n",
    "        axes[0,1].grid(True, alpha=0.3)\n",
    "        \n",
    "        # Plot 3: Overtime vs Interarrival Time\n",
    "        for servers in summary_df['servers'].unique():\n",
    "            subset = summary_df[summary_df['servers'] == servers]\n",
    "            axes[1,0].plot(subset['interarrival'], subset['avg_overtime'], \n",
    "                          marker='^', linewidth=2, markersize=8, label=f'{servers} Server(s)')\n",
    "        axes[1,0].set_xlabel('Scheduled Interarrival Time (min)')\n",
    "        axes[1,0].set_ylabel('Average Overtime (min)')\n",
    "        axes[1,0].set_title('Doctor Overtime vs Interarrival Time')\n",
    "        axes[1,0].legend()\n",
    "        axes[1,0].grid(True, alpha=0.3)\n",
    "        \n",
    "        # Plot 4: Utilization vs Interarrival Time\n",
    "        for servers in summary_df['servers'].unique():\n",
    "            subset = summary_df[summary_df['servers'] == servers]\n",
    "            axes[1,1].plot(subset['interarrival'], subset['avg_utilization'] * 100, \n",
    "                          marker='d', linewidth=2, markersize=8, label=f'{servers} Server(s)')\n",
    "        axes[1,1].set_xlabel('Scheduled Interarrival Time (min)')\n",
    "        axes[1,1].set_ylabel('Utilization Rate (%)')\n",
    "        axes[1,1].set_title('Doctor Utilization vs Interarrival Time')\n",
    "        axes[1,1].legend()\n",
    "        axes[1,1].grid(True, alpha=0.3)\n",
    "        \n",
    "        plt.tight_layout()\n",
    "        plt.show()\n",
    "\n",
    "    plot_comparison(summary_df)\n",
    "\n",
    "    print(\"\\n\" + \"=\" * 80)\n",
    "    print(\"SIMULATION COMPLETED SUCCESSFULLY!\")\n",
    "    print(\"All data has been exported to Excel files in the 'simulation_outputs' folder\")\n",
    "    print(\"\\nKey Features:\")\n",
    "    print(\"- ✓ Each scenario has UNIQUE random number streams\")\n",
    "    print(\"- ✓ Raw data includes BOTH antithetic sets (Set1 and Set2)\")\n",
    "    print(\"- ✓ Complete statistical independence across all scenarios\")\n",
    "    print(\"- ✓ Full reproducibility with systematic seed management\")\n",
    "    print(\"- ✓ Tested 5 interarrival times (10, 15, 20, 25, 30 minutes)\")\n",
    "    print(\"- ✓ Compared 1-server vs 2-server configurations\")\n",
    "    print(\"- ✓ Identified optimal schedules for minimum cost\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d7da2908",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
